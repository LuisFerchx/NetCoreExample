import { Draggable, formatUnit, createElement, isNullOrUndefined, addClass, closest, removeClass, classList, remove } from '@syncfusion/ej2-base';
import * as cls from './constant';
var DragAndDrop = (function () {
    function DragAndDrop(parent) {
        this.parent = parent;
        this.dragObj = {
            element: null, cloneElement: null, instance: null, targetClone: null, draggedClone: null, targetCloneMulti: null,
            selectedCards: [], pageX: 0, pageY: 0, navigationInterval: null, cardDetails: [], modifiedData: []
        };
        this.isDragging = false;
        this.dragEdges = { left: false, right: false, top: false, bottom: false };
        this.isExternalDrop = false;
    }
    DragAndDrop.prototype.wireDragEvents = function (element) {
        var dragContainment;
        if (!this.parent.element != null && this.parent.externalDropId && this.parent.externalDropId.length === 0) {
            dragContainment = this.parent.element.querySelector('.' + cls.CONTENT_CLASS);
        }
        this.dragObj.instance = new Draggable(element, {
            clone: true,
            enableTapHold: this.parent.isAdaptive,
            enableTailMode: true,
            cursorAt: { top: -10, left: -10 },
            dragArea: dragContainment,
            dragStart: this.dragStart.bind(this),
            drag: this.drag.bind(this),
            dragStop: this.dragStop.bind(this),
            enableAutoScroll: false,
            helper: this.dragHelper.bind(this)
        });
    };
    DragAndDrop.prototype.dragHelper = function (e) {
        this.dragObj.element = closest(e.sender.target, '.' + cls.CARD_CLASS);
        if (isNullOrUndefined(this.dragObj.element)) {
            return null;
        }
        this.dragObj.element.style.width = formatUnit(this.dragObj.element.offsetWidth);
        var cloneContainer = this.dragObj.element.cloneNode(true);
        this.dragObj.cloneElement = cloneContainer;
        addClass([this.dragObj.cloneElement], cls.CLONED_CARD_CLASS);
        this.dragObj.element.parentElement.appendChild(this.dragObj.cloneElement);
        this.dragObj.targetCloneMulti = createElement('div', { className: cls.TARGET_MULTI_CLONE_CLASS });
        this.dragObj.targetClone = createElement('div', {
            className: cls.DROPPED_CLONE_CLASS,
            styles: 'width:100%;height:' + formatUnit(this.dragObj.element.offsetHeight)
        });
        this.dragObj.modifiedData = [];
        return this.dragObj.cloneElement;
    };
    DragAndDrop.prototype.dragStart = function (e) {
        var _this = this;
        this.dragObj.selectedCards = this.dragObj.element;
        if (this.dragObj.element.classList.contains(cls.CARD_SELECTION_CLASS)) {
            var className = '.' + cls.CARD_CLASS + '.' + cls.CARD_SELECTION_CLASS + ':not(.' + cls.CLONED_CARD_CLASS + ')';
            var closestEle = closest(this.dragObj.element, '.' + cls.CONTENT_ROW_CLASS);
            this.dragObj.selectedCards = [].slice.call(closestEle.querySelectorAll(className));
        }
        var cardId = [];
        if (this.dragObj.selectedCards instanceof HTMLElement) {
            var card = this.dragObj.selectedCards.getAttribute('data-id');
            cardId.push(card);
        }
        else {
            this.dragObj.selectedCards.forEach(function (element) {
                cardId.push(element.getAttribute('data-id'));
            });
        }
        this.parent.dotNetRef.invokeMethodAsync('DragStart', cardId, 'DragStart');
        e.bindEvents(e.dragElement);
        if (this.dragObj.element.classList.contains(cls.CARD_SELECTION_CLASS)) {
            this.dragObj.selectedCards.forEach(function (element) { _this.draggedClone(element); });
            if (this.dragObj.selectedCards.length > 1) {
                this.dragObj.cloneElement.innerHTML = '';
                var drag = createElement('div', {
                    className: 'e-multi-card-text',
                    innerHTML: this.dragObj.selectedCards.length + ' Cards'
                });
                this.dragObj.cloneElement.appendChild(drag);
                classList(this.dragObj.cloneElement, ['e-multi-card-clone'], [cls.CARD_SELECTION_CLASS]);
                this.dragObj.cloneElement.style.width = '90px';
            }
        }
        else {
            this.draggedClone(this.dragObj.element);
        }
    };
    DragAndDrop.prototype.drag = function (e) {
        var _this = this;
        if (!e.target) {
            return;
        }
        var cardElement = closest(e.target, '.' + cls.CARD_CLASS);
        var target = cardElement || e.target;
        var selector = '.' + cls.CONTENT_ROW_CLASS + ':not(.' + cls.SWIMLANE_ROW_CLASS + ') .' + cls.CONTENT_CELLS_CLASS
            + '.' + cls.DROPPABLE_CLASS;
        var contentCell = closest(target, selector);
        this.externalDrop(target, 'drag');
        this.target = this.parent.isExternalKanbanDrop ? this.externalTarget : this.parent.element;
        this.calculateArgs(e);
        if (contentCell && document.body.style.cursor !== 'not-allowed') {
            var targetKey = this.getColumnKey(contentCell);
            var keys = targetKey.split(',');
            this.multiCloneRemove();
            var isDrag = (targetKey === this.getColumnKey(closest(this.dragObj.draggedClone, '.' + cls.CONTENT_CELLS_CLASS)))
                ? true : false;
            if (keys.length === 1 || isDrag) {
                if (target.classList.contains(cls.CARD_CLASS) || target.classList.contains(cls.DRAGGED_CLONE_CLASS)) {
                    var element = target.classList.contains(cls.DRAGGED_CLONE_CLASS) ?
                        (target.previousElementSibling.classList.contains(cls.DRAGGED_CARD_CLASS) ? null : target.previousElementSibling)
                        : target.previousElementSibling;
                    var insertClone = 'afterend';
                    if (isNullOrUndefined(element)) {
                        var pageY = target.classList.contains(cls.DRAGGED_CLONE_CLASS) ? (this.dragObj.pageY / 2) :
                            this.dragObj.pageY;
                        var height = target.classList.contains(cls.DRAGGED_CLONE_CLASS) ? target.offsetHeight :
                            (target.offsetHeight / 2);
                        if ((pageY - (this.target.getBoundingClientRect().top + target.offsetTop)) < height) {
                            insertClone = 'beforebegin';
                        }
                    }
                    target.insertAdjacentElement(insertClone, this.dragObj.targetClone);
                }
                else if (target.classList.contains(cls.CONTENT_CELLS_CLASS) && !closest(target, '.' + cls.SWIMLANE_ROW_CLASS)) {
                    target.querySelector('.' + cls.CARD_CONTAINER_CLASS).appendChild(this.dragObj.targetClone);
                }
                else if (target.classList.contains(cls.CARD_CONTAINER_CLASS) && !closest(target, '.' + cls.SWIMLANE_ROW_CLASS)
                    && contentCell.querySelectorAll('.' + cls.CARD_CLASS).length === 0) {
                    target.appendChild(this.dragObj.targetClone);
                }
            }
            else if (keys.length > 1 && contentCell.classList.contains(cls.DROPPING_CLASS)) {
                this.multiCloneCreate(keys, contentCell);
            }
        }
        if (this.target.querySelectorAll('.' + cls.DROPPING_CLASS).length === 0) {
            this.cellDropping();
        }
        var multiKeyTarget = closest(target, '.' + cls.MULTI_COLUMN_KEY_CLASS);
        if (multiKeyTarget) {
            var columnKeys = [].slice.call(this.target.querySelectorAll('.' + cls.MULTI_COLUMN_KEY_CLASS + ':not(.' +
                cls.DISABLED_CLASS + ')')).filter(function (element) { return _this.getColumnKey(element) === _this.getColumnKey(multiKeyTarget); });
            if (columnKeys.length > 0) {
                addClass(columnKeys, cls.MULTI_ACTIVE_CLASS);
                if (columnKeys[0].previousElementSibling) {
                    addClass([columnKeys[0].previousElementSibling], 'e-multi-bottom-border');
                }
            }
        }
        document.body.style.cursor = (contentCell && contentCell.classList.contains(cls.DROPPING_CLASS)) ? '' : 'not-allowed';
        if (cardElement && !(closest(cardElement, '.' + cls.CONTENT_CELLS_CLASS)).classList.contains(cls.DROPPING_CLASS)) {
            cardElement.style.cursor = 'not-allowed';
            document.body.style.cursor = 'not-allowed';
        }
        if (this.isExternalDrop && document.body.style.cursor === 'not-allowed') {
            document.body.style.cursor = '';
        }
        if (document.body.style.cursor === 'not-allowed') {
            this.removeElement(this.dragObj.targetClone, this.target);
            this.multiCloneRemove();
        }
        this.updateScrollPosition();
        this.parent.isExternalKanbanDrop = false;
        this.isExternalDrop = false;
    };
    DragAndDrop.prototype.dragStop = function (e) {
        var contentCell = closest(this.dragObj.targetClone, '.' + cls.CONTENT_CELLS_CLASS);
        var columnKey;
        var dropIndex = 0;
        this.externalDrop(e.target, 'dragStop');
        if (this.dragObj.targetClone.parentElement) {
            var className_1 = '.' + cls.CARD_CLASS + ':not(.' + cls.DRAGGED_CARD_CLASS + '),.' + cls.DROPPED_CLONE_CLASS;
            var element = [].slice.call(this.dragObj.targetClone.parentElement.querySelectorAll(className_1));
            dropIndex = element.indexOf(this.dragObj.targetClone);
        }
        if (this.target && this.target.querySelector('.' + cls.TARGET_MULTI_CLONE_CLASS)) {
            columnKey = closest(e.target, '.' + cls.MULTI_COLUMN_KEY_CLASS + ':not(.' + cls.DISABLED_CLASS + ')');
        }
        if (contentCell || columnKey) {
            var cardStatus = void 0;
            if (contentCell) {
                cardStatus = this.getColumnKey(contentCell);
            }
            else {
                cardStatus = this.getColumnKey(columnKey);
                contentCell = closest(columnKey, '.' + cls.CONTENT_CELLS_CLASS);
            }
            var swimData = void 0;
            if (this.parent.swimlaneSettings.keyField && this.parent.swimlaneSettings.allowDragAndDrop) {
                var prev = closest(contentCell, '.' + cls.CONTENT_ROW_CLASS).previousElementSibling;
                swimData = this.getColumnKey(prev);
            }
            var cardId_1 = [];
            if (this.dragObj.selectedCards instanceof HTMLElement) {
                var card = this.dragObj.selectedCards.getAttribute('data-id');
                cardId_1.push(card);
            }
            else {
                this.dragObj.selectedCards.forEach(function (element) {
                    cardId_1.push(element.getAttribute('data-id'));
                });
            }
            var prevele = false;
            var cloneElement = void 0;
            var cloneElementId = "";
            if (this.parent.sortSettings.field && this.parent.sortSettings.sortBy === 'Index') {
                cloneElement = this.parent.sortSettings.direction === 'Ascending' ?
                    this.dragObj.targetClone.previousElementSibling : this.dragObj.targetClone.nextElementSibling;
                if (cloneElement && !cloneElement.classList.contains(cls.DRAGGED_CARD_CLASS) && !cloneElement.classList.contains(cls.CLONED_CARD_CLASS)
                    && !cloneElement.classList.contains(cls.DRAGGED_CLONE_CLASS)) {
                    prevele = true;
                }
                else if (this.dragObj.targetClone.nextElementSibling && this.parent.sortSettings.direction === 'Ascending') {
                    cloneElement = this.dragObj.targetClone.nextElementSibling;
                }
                else if (this.dragObj.targetClone.previousElementSibling && this.parent.sortSettings.direction === 'Descending') {
                    cloneElement = this.dragObj.targetClone.previousElementSibling;
                }
            }
            if (cloneElement) {
                cloneElementId = cloneElement.getAttribute('data-id');
            }
            this.parent.dotNetRef.invokeMethodAsync('DragStop', cardId_1, cardStatus, swimData, dropIndex, prevele, cloneElementId, this.parent.isExternalKanbanDrop);
        }
        this.removeElement(this.dragObj.draggedClone);
        this.removeElement(this.dragObj.targetClone, this.target);
        this.removeElement(this.dragObj.cloneElement);
        var dragMultiClone = [].slice.call(this.parent.element.querySelectorAll('.' + cls.DRAGGED_CLONE_CLASS));
        dragMultiClone.forEach(function (clone) { return remove(clone); });
        this.dragObj.element.style.removeProperty('width');
        this.multiCloneRemove();
        if (this.dragObj.selectedCards instanceof HTMLElement) {
            removeClass([this.dragObj.selectedCards], cls.DRAGGED_CARD_CLASS);
        }
        else {
            removeClass(this.dragObj.selectedCards, cls.DRAGGED_CARD_CLASS);
        }
        clearInterval(this.dragObj.navigationInterval);
        this.dragObj.navigationInterval = null;
        if (document.body.style.cursor === 'not-allowed') {
            document.body.style.cursor = '';
        }
        var styleCards = [].slice.call(this.parent.element.querySelectorAll('.' + cls.CARD_CLASS + '[style]'));
        styleCards.forEach(function (styleCard) { styleCard.style.cursor = ''; });
        var className = '.' + cls.CONTENT_ROW_CLASS + ':not(.' + cls.SWIMLANE_ROW_CLASS + ')';
        var cells = [].slice.call(this.parent.element.querySelectorAll(className + ' .' + cls.CONTENT_CELLS_CLASS));
        cells.forEach(function (cell) { return removeClass([cell], cls.DROPPING_CLASS); });
        this.dragObj.cardDetails = this.dragObj.modifiedData = [];
        this.isDragging = false;
        this.parent.isExternalKanbanDrop = false;
        this.target = null;
        this.externalTarget = null;
    };
    DragAndDrop.prototype.draggedClone = function (element) {
        this.dragObj.draggedClone = createElement('div', {
            className: cls.DRAGGED_CLONE_CLASS,
            styles: 'width:' + formatUnit(element.offsetWidth - 1) + ';height:' + formatUnit(element.offsetHeight)
        });
        element.insertAdjacentElement('afterend', this.dragObj.draggedClone);
        addClass([element], cls.DRAGGED_CARD_CLASS);
    };
    DragAndDrop.prototype.calculateArgs = function (e) {
        var eventArgs = this.getPageCoordinates(e);
        this.dragObj.pageY = eventArgs.pageY;
        this.dragObj.pageX = eventArgs.pageX;
        this.isDragging = true;
    };
    DragAndDrop.prototype.getPageCoordinates = function (e) {
        var eventArgs = e.event;
        return eventArgs && eventArgs.changedTouches ? eventArgs.changedTouches[0] : e.changedTouches ? e.changedTouches[0] :
            eventArgs || e;
    };
    DragAndDrop.prototype.getColumnKey = function (target) {
        if (target && target.getAttribute('data-key')) {
            return target.getAttribute('data-key').trim();
        }
        return '';
    };
    DragAndDrop.prototype.multiCloneRemove = function () {
        if (this.target) {
            var cloneMulti = [].slice.call(this.target.querySelectorAll('.' + cls.TARGET_MULTI_CLONE_CLASS));
            if (cloneMulti.length > 0) {
                var columnKey = [].slice.call(this.target.querySelectorAll('.' + cls.MULTI_COLUMN_KEY_CLASS));
                columnKey.forEach(function (node) { return remove(node); });
                cloneMulti.forEach(function (node) {
                    var cell = closest(node, '.' + cls.CONTENT_CELLS_CLASS);
                    if (cell) {
                        cell.style.borderStyle = '';
                        if (cell.querySelector('.' + cls.SHOW_ADD_BUTTON)) {
                            removeClass([cell.querySelector('.' + cls.SHOW_ADD_BUTTON)], cls.MULTI_CARD_CONTAINER_CLASS);
                        }
                        removeClass([cell.querySelector('.' + cls.CARD_CONTAINER_CLASS)], cls.MULTI_CARD_CONTAINER_CLASS);
                    }
                });
                this.removeElement(this.dragObj.targetCloneMulti, this.target);
            }
        }
    };
    DragAndDrop.prototype.removeElement = function (element, externalElement) {
        externalElement = externalElement ? externalElement : this.parent.element;
        if (externalElement.getElementsByClassName(element.className).length > 0) {
            remove(element);
        }
    };
    DragAndDrop.prototype.externalDrop = function (target, state) {
        var _this = this;
        if (this.parent.externalDropId) {
            this.parent.externalDropId.forEach(function (externalDropId) {
                _this.externalTarget = closest(target, externalDropId);
                if (_this.externalTarget) {
                    if (_this.externalTarget.classList.contains('e-kanban')) {
                        _this.parent.isExternalKanbanDrop = true;
                        var className = '.' + cls.CONTENT_ROW_CLASS + ':not(.' + cls.SWIMLANE_ROW_CLASS +
                            '):not(.' + cls.COLLAPSED_CLASS + ') .' + cls.CONTENT_CELLS_CLASS;
                        var cells = [].slice.call(_this.externalTarget.querySelectorAll(className));
                        if (state === 'drag') {
                            addClass(cells, cls.DROPPING_CLASS);
                        }
                        else {
                            removeClass(cells, cls.DROPPING_CLASS);
                        }
                    }
                    else {
                        _this.isExternalDrop = true;
                    }
                }
            });
        }
    };
    DragAndDrop.prototype.multiCloneCreate = function (keys, contentCell) {
        var offsetHeight = contentCell.offsetHeight;
        var limitEle = contentCell.querySelector('.' + cls.LIMITS_CLASS);
        if (limitEle) {
            offsetHeight -= limitEle.offsetHeight;
        }
        this.dragObj.targetCloneMulti.style.height = formatUnit(offsetHeight);
        if (contentCell.querySelector('.' + cls.SHOW_ADD_BUTTON)) {
            addClass([contentCell.querySelector('.' + cls.SHOW_ADD_BUTTON)], cls.MULTI_CARD_CONTAINER_CLASS);
        }
        addClass([contentCell.querySelector('.' + cls.CARD_CONTAINER_CLASS)], cls.MULTI_CARD_CONTAINER_CLASS);
        contentCell.querySelector('.' + cls.CARD_CONTAINER_CLASS).style.height = 'auto';
        contentCell.style.borderStyle = 'none';
        this.removeElement(this.dragObj.targetClone);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            var dragCell = closest(this.dragObj.draggedClone, '.' + cls.CONTENT_CELLS_CLASS);
            var transition = this.parent.transition[dragCell.cellIndex].transitionColumn;
            var allowTransition = this.allowedTransition(this.dragObj.element.getAttribute('data-key'), key, transition);
            var name_1 = allowTransition ? '' : ' ' + cls.DISABLED_CLASS;
            var colKey = createElement('div', {
                className: cls.MULTI_COLUMN_KEY_CLASS + name_1,
                attrs: { 'data-key': key.trim() }
            });
            var text = createElement('div', { className: 'e-text', innerHTML: key.trim() });
            contentCell.appendChild(this.dragObj.targetCloneMulti).appendChild(colKey).appendChild(text);
            colKey.style.cursor = allowTransition ? '' : 'not-allowed';
            colKey.style.lineHeight = colKey.style.height = formatUnit((offsetHeight / keys.length));
            text.style.top = formatUnit((offsetHeight / 2) - (text.offsetHeight / 2));
        }
    };
    DragAndDrop.prototype.allowedTransition = function (currentCardKey, targetCardKey, allowedKey) {
        var allowTransition = true;
        var targetKey = targetCardKey.split(',');
        for (var i = 0; i < targetKey.length; i++) {
            if (currentCardKey === targetKey[i].trim()) {
                return true;
            }
            if (allowedKey) {
                if (allowedKey.length === 1 && allowedKey[0].length === 0) {
                    return true;
                }
                for (var j = 0; j < allowedKey.length; j++) {
                    if (targetKey[i].trim() === allowedKey[j].trim()) {
                        return true;
                    }
                    else {
                        allowTransition = false;
                    }
                }
            }
        }
        return allowTransition;
    };
    DragAndDrop.prototype.cellDropping = function () {
        var _this = this;
        var dragCell = closest(this.dragObj.draggedClone, '.' + cls.CONTENT_CELLS_CLASS);
        var dragRow = closest(this.dragObj.draggedClone, '.' + cls.CONTENT_ROW_CLASS);
        this.addDropping(dragRow, dragCell);
        if (dragCell && dragCell.classList.contains(cls.DROP_CLASS)) {
            addClass([dragCell], cls.DROPPING_CLASS);
        }
        if (this.parent.swimlaneSettings.keyField && this.parent.swimlaneSettings.allowDragAndDrop) {
            var className = '.' + cls.CONTENT_ROW_CLASS + ':not(.' + cls.SWIMLANE_ROW_CLASS + '):not(.' + cls.COLLAPSED_CLASS + ')';
            var rows = [].slice.call(this.target.querySelectorAll(className));
            [].slice.call(rows).forEach(function (row) {
                if (dragRow !== row) {
                    _this.addDropping(row, dragCell);
                }
            });
        }
    };
    DragAndDrop.prototype.addDropping = function (dragRow, dragCell) {
        var _this = this;
        if (dragCell && dragRow) {
            [].slice.call(dragRow.children).forEach(function (cell) {
                var transition = _this.parent.transition[dragCell.cellIndex].transitionColumn;
                if (cell !== dragCell && cell.classList.contains(cls.DROP_CLASS) &&
                    _this.allowedTransition(dragCell.getAttribute('data-key'), cell.getAttribute('data-key'), transition)) {
                    addClass([cell], cls.DROPPING_CLASS);
                }
            });
        }
    };
    DragAndDrop.prototype.updateScrollPosition = function () {
        var _this = this;
        if (isNullOrUndefined(this.dragObj.navigationInterval)) {
            this.dragObj.navigationInterval = window.setInterval(function () { _this.autoScroll(); }, 100);
        }
    };
    DragAndDrop.prototype.autoScrollValidation = function () {
        var pageY = this.dragObj.pageY;
        var pageX = this.dragObj.pageX;
        var autoScrollDistance = 30;
        var dragEdges = { left: false, right: false, top: false, bottom: false };
        var viewBoundaries = this.target.querySelector('.' + cls.CONTENT_CLASS).getBoundingClientRect();
        if ((pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset) &&
            (pageY > viewBoundaries.top + window.pageYOffset)) {
            dragEdges.top = true;
        }
        if ((pageY > (viewBoundaries.bottom - autoScrollDistance) + window.pageYOffset) &&
            (pageY < viewBoundaries.bottom + window.pageYOffset)) {
            dragEdges.bottom = true;
        }
        if ((pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset) &&
            (pageX > viewBoundaries.left + window.pageXOffset)) {
            dragEdges.left = true;
        }
        if ((pageX > (viewBoundaries.right - autoScrollDistance) + window.pageXOffset) &&
            (pageX < viewBoundaries.right + window.pageXOffset)) {
            dragEdges.right = true;
        }
        this.dragEdges = dragEdges;
    };
    DragAndDrop.prototype.autoScroll = function () {
        this.autoScrollValidation();
        var scrollSensitivity = 30;
        if (this.parent.isAdaptive) {
            var parent_1;
            if (this.dragEdges.top || this.dragEdges.bottom) {
                if (this.dragObj.targetClone) {
                    parent_1 = closest(this.dragObj.targetClone, '.' + cls.CARD_CONTAINER_CLASS);
                }
                else {
                    parent_1 = closest(this.dragObj.draggedClone, '.' + cls.CARD_CONTAINER_CLASS);
                }
            }
            else if (this.dragEdges.right || this.dragEdges.left) {
                parent_1 = this.target.querySelector('.' + cls.CONTENT_CLASS);
            }
            if (parent_1) {
                var yIsScrollable = parent_1.offsetHeight <= parent_1.scrollHeight;
                var xIsScrollable = parent_1.offsetWidth <= parent_1.scrollWidth;
                var yInBounds = parent_1.scrollTop >= 0 && parent_1.scrollTop + parent_1.offsetHeight <= parent_1.scrollHeight;
                var xInBounds = parent_1.scrollLeft >= 0 && parent_1.scrollLeft + parent_1.offsetWidth <= parent_1.scrollWidth;
                if (yIsScrollable && yInBounds && (this.dragEdges.top || this.dragEdges.bottom)) {
                    parent_1.scrollTop += this.dragEdges.top ? -(scrollSensitivity + 36) : scrollSensitivity;
                }
                if (xIsScrollable && xInBounds && (this.dragEdges.left || this.dragEdges.right)) {
                    var scroll_1 = (this.getWidth() * (this.target.querySelector('.' + cls.CONTENT_ROW_CLASS + ':not(.' + cls.SWIMLANE_ROW_CLASS + ')').childElementCount - 1)) > parent_1.scrollLeft;
                    if (scroll_1 || this.dragEdges.left) {
                        parent_1.scrollLeft += this.dragEdges.left ? -scrollSensitivity : scrollSensitivity;
                    }
                }
            }
        }
        else {
            var parent_2 = this.target.querySelector('.' + cls.CONTENT_CLASS);
            var column = this.dragObj.targetClone.parentElement;
            var yScrollable = parent_2.offsetHeight <= parent_2.scrollHeight;
            var xScrollable = parent_2.offsetWidth <= parent_2.scrollWidth;
            var yBounds = yScrollable && parent_2.scrollTop >= 0 && parent_2.scrollTop + parent_2.offsetHeight <= parent_2.scrollHeight;
            var xBounds = xScrollable && parent_2.scrollLeft >= 0 && parent_2.scrollLeft + parent_2.offsetWidth <= parent_2.scrollWidth;
            if (yBounds && (this.dragEdges.top || this.dragEdges.bottom)) {
                parent_2.scrollTop += this.dragEdges.top ? -scrollSensitivity : scrollSensitivity;
                if (column) {
                    column.scrollTop += this.dragEdges.top ? -scrollSensitivity : scrollSensitivity;
                }
            }
            if (xBounds && (this.dragEdges.left || this.dragEdges.right)) {
                parent_2.scrollLeft += this.dragEdges.left ? -scrollSensitivity : scrollSensitivity;
                if (column) {
                    column.scrollLeft += this.dragEdges.left ? -scrollSensitivity : scrollSensitivity;
                }
            }
            if (this.dragObj.pageY - window.scrollY < scrollSensitivity) {
                window.scrollTo(window.scrollX, window.scrollY - scrollSensitivity);
            }
            else if (window.innerHeight - (this.dragObj.pageY - window.scrollY) < scrollSensitivity) {
                window.scrollTo(window.scrollX, window.scrollY + scrollSensitivity);
            }
        }
    };
    DragAndDrop.prototype.getWidth = function () {
        return (window.innerWidth * 80) / 100;
    };
    DragAndDrop.prototype.unWireDragEvents = function () {
        if (this.dragObj.instance && !this.dragObj.instance.isDestroyed) {
            this.dragObj.instance.destroy();
        }
    };
    DragAndDrop.prototype.destroy = function () {
        this.unWireDragEvents();
    };
    return DragAndDrop;
}());
export { DragAndDrop };
