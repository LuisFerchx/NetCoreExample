import { extend, addClass, closest, setStyleAttribute, isNullOrUndefined, removeClass, formatUnit, EventHandler, Browser } from '@syncfusion/ej2-base';
import { Popup } from '@syncfusion/ej2-popups';
import { DragAndDrop } from './drag';
import { Keyboard } from './keyboard';
import { KanbanTouch } from './touch';
import * as cls from './constant';
var SfKanban = (function () {
    function SfKanban(element, options, dotnetRef) {
        this.element = element;
        this.dotNetRef = dotnetRef;
        this.updateContext(options);
        this.columnToggleArray = [];
        this.selectionArray = [];
        this.lastCardSelection = null;
        this.lastSelectionRow = null;
        this.lastCard = null;
        this.selectedCardsElement = [];
        this.selectedCardsData = [];
        this.hideColumnKeys = [];
        this.scrollPosition = { content: {}, column: {} };
        this.initializeModules();
        this.scrollUiUpdate();
        this.wireEvents();
        if (this.element) {
            this.element.blazor__instance = this;
        }
    }
    SfKanban.prototype.initializeModules = function () {
        if (this.isAdaptive || Browser.isTouch) {
            this.touchModule = new KanbanTouch(this);
        }
        if (this.allowDragAndDrop) {
            this.dragAndDropModule = new DragAndDrop(this);
        }
        if (this.allowKeyboard) {
            this.keyboardModule = new Keyboard(this);
        }
        this.scrollPosition.content = { left: 0, top: 0 };
        this.initializeSwimlaneTree();
    };
    SfKanban.prototype.updateContext = function (kanbanObj) {
        extend(this, this, kanbanObj);
    };
    SfKanban.prototype.getSelectedCards = function () {
        return [].slice.call(this.element.querySelectorAll('.' + cls.CARD_CLASS + '.' + cls.CARD_SELECTION_CLASS));
    };
    SfKanban.prototype.documentClick = function (args) {
        if (args.target.classList.contains(cls.SWIMLANE_OVERLAY_CLASS) &&
            this.element.querySelector('.' + cls.SWIMLANE_RESOURCE_CLASS).classList.contains('e-popup-open')) {
            this.treePopup.hide();
            removeClass([this.popupOverlay], 'e-enable');
        }
        if (closest(args.target, "." + cls.ROOT_CLASS)) {
            return;
        }
        var cards = [].slice.call(this.element.querySelectorAll("." + cls.CARD_CLASS + "." + cls.CARD_SELECTION_CLASS));
        removeClass(cards, cls.CARD_SELECTION_CLASS);
        this.disableAttributeSelection(cards);
    };
    SfKanban.prototype.disableAttributeSelection = function (cards) {
        if (cards instanceof Element) {
            cards.setAttribute('aria-selected', 'false');
        }
        else {
            cards.forEach(function (card) { card.setAttribute('aria-selected', 'false'); });
        }
    };
    SfKanban.prototype.wireDragEvent = function () {
        var _this = this;
        if (this.allowDragAndDrop) {
            var cards = [].slice.call(this.element.querySelectorAll('.' + cls.CONTENT_CELLS_CLASS
                + '.' + cls.DRAG_CLASS + ' .' + cls.CARD_CLASS + ':not(' + cls.DRAGGABLE_CLASS + ')'));
            addClass(cards, cls.DROPPABLE_CLASS);
            cards.forEach(function (card) { return _this.dragAndDropModule.wireDragEvents(card); });
        }
    };
    SfKanban.prototype.initializeSwimlaneTree = function () {
        if (this.swimlaneSettings.keyField && this.isAdaptive) {
            var height = this.element.querySelector('.' + cls.SWIMLANE_HEADER_CLASS).offsetHeight;
            var treeHeight = window.innerHeight - height;
            this.popupOverlay = this.element.querySelector('.' + cls.SWIMLANE_CONTENT_CLASS + ' .' + cls.SWIMLANE_OVERLAY_CLASS);
            setStyleAttribute(this.element.querySelector('.' + cls.SWIMLANE_OVERLAY_CLASS), { 'height': treeHeight + 'px' });
            setStyleAttribute(this.element.querySelector('.' + cls.SWIMLANE_CONTENT_CLASS), { 'top': height + 'px' });
            var treeWrapper = this.element.querySelector('.' + cls.SWIMLANE_RESOURCE_CLASS);
            setStyleAttribute(treeWrapper, { 'height': treeHeight + 'px' });
            var popupObj = {
                targetType: 'relative',
                actionOnScroll: 'none',
                enableRtl: this.enableRtl,
                zIndex: 10,
                hideAnimation: { name: 'SlideLeftOut', duration: 500 },
                showAnimation: { name: 'SlideLeftIn', duration: 500 },
                viewPortElement: this.element.querySelector('.' + cls.CONTENT_CLASS)
            };
            this.treePopup = new Popup(treeWrapper, popupObj);
        }
    };
    SfKanban.prototype.cardSelection = function (target, isCtrl, isShift) {
        var _this = this;
        if (!target) {
            return;
        }
        var cards = this.getSelectedCards();
        if (this.cardSettings.selectionType !== 'None') {
            var contentRow = closest(target, '.' + cls.CONTENT_ROW_CLASS);
            var index = !isNullOrUndefined(this.lastSelectionRow) ? this.lastSelectionRow.rowIndex : contentRow.rowIndex;
            if (index !== contentRow.rowIndex && (isCtrl || isShift) && this.cardSettings.selectionType === 'Multiple') {
                return;
            }
            if (cards.length !== 0 && (!isCtrl || this.cardSettings.selectionType === 'Single')) {
                removeClass(cards, cls.CARD_SELECTION_CLASS);
                this.disableAttributeSelection(cards);
                cards.forEach(function (el) {
                    _this.selectionArray.splice(_this.selectionArray.indexOf(el.getAttribute('data-id')), 1);
                    _this.selectedCardsElement.splice(_this.selectedCardsElement.indexOf(el), 1);
                });
            }
            if (cards.length > 0 && isShift && this.cardSettings.selectionType === 'Multiple') {
                var curCards_1 = [];
                var start = void 0;
                var end = void 0;
                var i = void 0;
                var allCards = [].slice.call(contentRow.querySelectorAll('.' + cls.CARD_CLASS));
                allCards.forEach(function (el) { return curCards_1.push(el.getAttribute('data-id')); });
                var curId = target.getAttribute('data-id');
                var lastId = this.lastCard.getAttribute('data-id');
                var curIndex = end = curCards_1.indexOf(curId);
                var lastIndex = start = curCards_1.indexOf(lastId);
                var select = curIndex > lastIndex ? 'next' : 'prev';
                if (select === 'prev') {
                    start = curIndex;
                    end = lastIndex;
                }
                for (i = start; i <= end; i++) {
                    var card = allCards[i];
                    addClass([card], cls.CARD_SELECTION_CLASS);
                    card.setAttribute('aria-selected', 'true');
                    card.setAttribute('tabindex', '0');
                    this.selectionArray.push(card.getAttribute('data-id'));
                    this.selectedCardsElement.push(card);
                    this.lastCardSelection = card;
                    if (select === 'prev') {
                        this.lastCardSelection = allCards[start];
                    }
                }
            }
            else {
                addClass([target], cls.CARD_SELECTION_CLASS);
                target.setAttribute('aria-selected', 'true');
                target.setAttribute('tabindex', '0');
                this.selectionArray.push(target.getAttribute('data-id'));
                this.selectedCardsElement.push(target);
                this.lastCard = this.lastCardSelection = target;
                this.lastSelectionRow = closest(target, '.' + cls.CONTENT_ROW_CLASS);
                if (this.lastSelectionRow.previousElementSibling) {
                    var elementSelector = "." + cls.SWIMLANE_ROW_EXPAND_CLASS + ",." + cls.SWIMLANE_ROW_COLLAPSE_CLASS;
                    var parentEle = this.lastSelectionRow.previousElementSibling.querySelector(elementSelector);
                    if (parentEle && parentEle.classList.contains(cls.SWIMLANE_ROW_COLLAPSE_CLASS)) {
                        parentEle.click();
                    }
                }
            }
        }
    };
    SfKanban.prototype.scrollUiUpdate = function () {
        var _this = this;
        var header = this.element.querySelector('.' + cls.HEADER_CLASS);
        var content = this.element.querySelector('.' + cls.CONTENT_CLASS);
        var height = this.element.offsetHeight - header.offsetHeight;
        if (this.isAdaptive) {
            height = window.innerHeight - (header.offsetHeight + cls.bottomSpace);
            var swimlaneToolbar = this.element.querySelector('.' + cls.SWIMLANE_HEADER_CLASS);
            if (swimlaneToolbar) {
                height -= swimlaneToolbar.offsetHeight;
            }
            var cardContainers = [].slice.call(this.element.querySelectorAll('.' + cls.CONTENT_CELLS_CLASS));
            cardContainers.forEach(function (cell) {
                var cardContainer = cell.querySelector('.' + cls.CARD_CONTAINER_CLASS);
                if (!cardContainer.classList.contains(cls.MULTI_CARD_CONTAINER_CLASS)) {
                    cardContainer.style.height = formatUnit(height);
                    EventHandler.add(cell, 'touchmove', _this.onAdaptiveScroll, _this);
                }
            });
        }
        if (this.height !== 'auto' && this.height !== '100%') {
            content.style.height = formatUnit(height);
        }
        [].slice.call(header.children).forEach(function (node) {
            var paddingValue = 0;
            if ((content.offsetWidth - content.clientWidth) > 0) {
                paddingValue = 17;
                if ((content.offsetHeight - content.clientHeight) > 0) {
                    node.style.width = formatUnit(content.clientWidth);
                }
            }
            if (_this.enableRtl) {
                node.style.paddingLeft = formatUnit(paddingValue);
            }
            else {
                node.style.paddingRight = formatUnit(paddingValue);
            }
        });
    };
    SfKanban.prototype.onContentScroll = function (e) {
        var target = e.target;
        var header = this.element.querySelector('.' + cls.HEADER_CLASS);
        [].slice.call(header.children).forEach(function (node) { node.scrollLeft = target.scrollLeft; });
        this.scrollPosition.content = { left: target.scrollLeft, top: target.scrollTop };
    };
    SfKanban.prototype.onColumnScroll = function (e) {
        var target = e.target;
        if (target.offsetParent) {
            var columnKey = target.offsetParent.getAttribute('data-key');
            this.scrollPosition.column[columnKey] = { left: target.scrollLeft, top: target.scrollTop };
        }
    };
    SfKanban.prototype.onAdaptiveScroll = function (e) {
        if (this.touchModule.tabHold && !this.touchModule.mobilePopup) {
            e.preventDefault();
        }
    };
    SfKanban.prototype.updateScrollPosition = function () {
        var _this = this;
        var content = this.element.querySelector('.' + cls.CONTENT_CLASS);
        if (content) {
            content.scrollTo(this.scrollPosition.content.left, this.scrollPosition.content.top);
        }
        var cardContainer = [].slice.call(this.element.querySelectorAll('.' + cls.CARD_CONTAINER_CLASS));
        cardContainer.forEach(function (container) {
            if (container.offsetParent) {
                var scrollData = _this.scrollPosition.column[container.offsetParent.getAttribute('data-key')];
                if (scrollData) {
                    container.scrollTo(scrollData.left, scrollData.top);
                }
            }
        });
    };
    SfKanban.prototype.wireEvents = function () {
        var _this = this;
        var content = this.element.querySelector('.' + cls.CONTENT_CLASS);
        EventHandler.add(content, 'scroll', this.onContentScroll, this);
        EventHandler.add(document, Browser.touchStartEvent, this.documentClick, this);
        var cardContainer = [].slice.call(this.element.querySelectorAll('.' + cls.CARD_CONTAINER_CLASS));
        cardContainer.forEach(function (container) {
            if (container.offsetParent) {
                _this.scrollPosition.column[container.offsetParent.getAttribute('data-key')] = { left: 0, top: 0 };
            }
            EventHandler.add(container, 'scroll', _this.onColumnScroll, _this);
        });
        if (this.isAdaptive) {
            this.touchModule.wireTouchEvents();
        }
        this.wireDragEvent();
    };
    SfKanban.prototype.unWireEvents = function () {
        var _this = this;
        var content = this.element.querySelector('.' + cls.CONTENT_CLASS);
        EventHandler.remove(content, 'scroll', this.onContentScroll);
        EventHandler.remove(document, Browser.touchStartEvent, this.documentClick);
        var cardContainer = [].slice.call(this.element.querySelectorAll('.' + cls.CARD_CONTAINER_CLASS));
        cardContainer.forEach(function (container) { EventHandler.remove(container, 'scroll', _this.onColumnScroll); });
        if (this.isAdaptive) {
            var cardContainers = [].slice.call(this.element.querySelectorAll('.' + cls.CONTENT_CELLS_CLASS));
            cardContainers.forEach(function (cell) { EventHandler.remove(cell, 'touchmove', _this.onAdaptiveScroll); });
            this.touchModule.unWireTouchEvents();
        }
    };
    SfKanban.prototype.onCardClick = function (target, e) {
        if (target.classList.contains(cls.CARD_SELECTION_CLASS)) {
            removeClass([target], cls.CARD_SELECTION_CLASS);
            this.disableAttributeSelection(target);
        }
        else {
            var isCtrlKey = e.ctrlKey;
            if (this.isAdaptive && this.touchModule) {
                isCtrlKey = (this.touchModule.mobilePopup && this.touchModule.tabHold) || isCtrlKey;
            }
            this.cardSelection(target, isCtrlKey, e.shiftKey);
        }
        if (this.isAdaptive && this.touchModule) {
            this.touchModule.updatePopupContent();
        }
        var cell = closest(target, '.' + cls.CONTENT_CELLS_CLASS);
        if (this.allowKeyboard) {
            var element = [].slice.call(cell.querySelectorAll('.' + cls.CARD_CLASS));
            element.forEach(function (e) {
                e.setAttribute('tabindex', '0');
            });
            this.keyboardModule.addRemoveTabIndex('Remove');
        }
    };
    SfKanban.prototype.onMenuClick = function () {
        if (this.element.querySelector('.' + cls.SWIMLANE_RESOURCE_CLASS).classList.contains('e-popup-open')) {
            this.treePopup.hide();
            removeClass([this.popupOverlay], 'e-enable');
        }
        else {
            this.treePopup.show();
            addClass([this.popupOverlay], 'e-enable');
        }
    };
    SfKanban.prototype.onListViewClick = function () {
        this.treePopup.hide();
        removeClass([this.popupOverlay], 'e-enable');
    };
    SfKanban.prototype.onPropertyChanged = function (props) {
        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
            var key = props_1[_i];
            switch (key) {
                case 'width':
                    this.setWidth();
                    break;
                case 'height':
                    this.setHeight();
                    break;
                case 'enableRtl':
                    if (this.enableRtl) {
                        addClass([this.element], cls.CLS_RTL);
                    }
                    else {
                        removeClass([this.element], cls.CLS_RTL);
                    }
                    break;
            }
        }
    };
    SfKanban.prototype.onSwimlaneProperties = function (isDrag, keyField) {
        this.swimlaneSettings.allowDragAndDrop = isDrag;
        this.swimlaneSettings.keyField = keyField;
    };
    SfKanban.prototype.setWidth = function () {
        if (this.width === '100%') {
            this.element.style.width = '';
        }
        else {
            setStyleAttribute(this.element, { 'width': formatUnit(this.width) });
        }
    };
    SfKanban.prototype.setHeight = function () {
        setStyleAttribute(this.element, { 'height': formatUnit(this.height) });
    };
    SfKanban.prototype.destroy = function () {
        if (this.touchModule) {
            this.touchModule.destroy();
        }
        if (this.dragAndDropModule) {
            this.dragAndDropModule.destroy();
        }
        if (this.keyboardModule) {
            this.keyboardModule.destroy();
        }
        this.unWireEvents();
    };
    return SfKanban;
}());
export { SfKanban };
