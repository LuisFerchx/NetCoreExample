var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { isNullOrUndefined, enableBlazorMode } from '@syncfusion/ej2-base';
import { SfDocumentEditor } from './sf-documenteditor-fn';
import { XmlHttpRequestHandler } from './document-editor/implementation/base/ajax-helper';
import { WParagraphFormat, WCharacterFormat, WTableFormat, WCellFormat, WSectionFormat, WRowFormat, TextElementBox, ErrorTextElementBox, TextFormField, CheckBoxFormField, DropDownFormField, WParagraphStyle, WCharacterStyle } from './document-editor';
var DocumentEditor = {
    sendHandler: null,
    info: null,
    isSpellChecking: null,
    elementRef: null,
    dotnetRef: null,
    initialize: function (element, options, dotnetRef) {
        enableBlazorMode();
        var docEdit = new SfDocumentEditor(element, dotnetRef, options);
        docEdit.preRender();
        docEdit.render();
        this.elementRef = element;
        this.dotnetRef = dotnetRef;
        this.sendHandler = XmlHttpRequestHandler.prototype.send;
        XmlHttpRequestHandler.prototype.send = this.docEditRequestHandler.bind(this);
    },
    updateOptions: function (element, options, dotnetRef) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var instance = element.blazor__instance;
            instance.setOptions(options, instance.options, true);
            instance.options = options;
        }
    },
    docEditRequestHandler: function (jsonObject) {
        return __awaiter(this, void 0, void 0, function () {
            var value, pastedContent, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof jsonObject === 'string')) return [3, 1];
                        value = JSON.parse(jsonObject);
                        if (value['LanguageID'] !== '') {
                            this.sendHandler.call(jsonObject);
                        }
                        return [3, 3];
                    case 1:
                        jsonObject['action'] = 'SystemClipboard';
                        return [4, this.dotnetRef.invokeMethodAsync('SystemClipboard', jsonObject)];
                    case 2:
                        pastedContent = _a.sent();
                        result = { data: JSON.parse(pastedContent) };
                        this.elementRef.blazor__instance.editor.pasteRequestHandler.successHandler(result);
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    },
    openblank: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.openBlank();
        }
    },
    loadDocument: function (element, content) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.open(content);
        }
    },
    insertTable: function (element, row, column) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertTable(row, column);
        }
    },
    goToHeader: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.goToHeader();
        }
    },
    goToFooter: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.goToFooter();
        }
    },
    insertPageNumber: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertPageNumber();
        }
    },
    undo: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editorHistory.undo();
        }
    },
    redo: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editorHistory.redo();
        }
    },
    updateFields: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.updateFields();
        }
    },
    canUndo: function (element) {
        var canundo;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            canundo = element.blazor__instance.editorHistory.canUndo();
        }
        return canundo;
    },
    canRedo: function (element) {
        var canRedo;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            canRedo = element.blazor__instance.editorHistory.canRedo();
        }
        return canRedo;
    },
    getBookMarks: function (element) {
        var bookmarks;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            bookmarks = element.blazor__instance.getBookmarks();
        }
        return bookmarks;
    },
    getText: function (element, includeObject) {
        var text = undefined;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            text = element.blazor__instance.selection.getText(includeObject);
        }
        return text;
    },
    insertHyperlinkInternal: function (element, url, displayText, remove, isBookmark) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertHyperlinkInternal(url, displayText, remove, isBookmark);
        }
    },
    insertTableOfContents: function (element, tableOfContentsSettings) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertTableOfContents(tableOfContentsSettings);
        }
    },
    insertText: function (element, text) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertText(text);
        }
    },
    applyStyle: function (element, style) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.applyStyle(style);
        }
    },
    insertRow: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertRow(value);
        }
    },
    insertColumn: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertColumn(value);
        }
    },
    deleteTable: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.deleteTable();
        }
    },
    deleteRow: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.deleteRow();
        }
    },
    deleteColumn: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.deleteColumn();
        }
    },
    canMergeCells: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.canMergeCells();
        }
    },
    insertPageBreak: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertPageBreak();
        }
    },
    toggleBold: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleBold();
        }
    },
    toggleItalic: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleItalic();
        }
    },
    toggleSubscript: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleSubscript();
        }
    },
    toggleSuperscript: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleSuperscript();
        }
    },
    toggleUnderline: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleUnderline(value);
        }
    },
    toggleHighlightColor: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleHighlightColor(value);
        }
    },
    toggleStrikethrough: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleStrikethrough(value);
        }
    },
    toggleTextAlignment: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleTextAlignment(value);
        }
    },
    toggleBaselineAlignment: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.toggleBaselineAlignment(value);
        }
    },
    applyBullet: function (element, bullet, fontFamily) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.applyBullet(bullet, fontFamily);
        }
    },
    applyNumbering: function (element, numberFormat, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.applyNumbering(numberFormat, value);
        }
    },
    paste: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.paste(value);
        }
    },
    clearFormatting: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.clearFormatting();
        }
    },
    createStyle: function (element, style) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.createStyle(element.blazor__instance.documentHelper.preDefinedStyles.get(style));
        }
    },
    closeHeaderFooter: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.closeHeaderFooter();
        }
    },
    selectAll: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectAll();
        }
    },
    selectLine: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectLine();
        }
    },
    selectCurrentWord: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectCurrentWord();
        }
    },
    selectParagraph: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectParagraph();
        }
    },
    selectTable: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectTable();
        }
    },
    mergeCells: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.mergeCells();
        }
    },
    autoFitTable: function (element, fitType) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.autoFitTable(fitType);
        }
    },
    fitPage: function (element, fitPageType) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.fitPage(fitPageType);
        }
    },
    updateZoomFactor: function (element, factor) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.setOptions({ "zoomFactor": parseInt(factor, 0) / 100 }, { "zoomFactor": element.blazor__instance.options.zoomFactor }, false);
        }
    },
    goToPage: function (element, index) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.goToPage(index);
        }
    },
    extendToWordStart: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.extendToWordStart();
        }
    },
    insertEditingRegion: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertEditingRegion();
        }
    },
    moveToLineStart: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.moveToLineStart();
        }
    },
    insertSectionBreak: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertSectionBreak();
        }
    },
    enforceProtection: function (element, saltValue, hashValue, protectionType) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var data = [saltValue, hashValue];
            var result = { data: JSON.stringify(data) };
            element.blazor__instance.editor.enforceProtectionInternal(result, protectionType);
        }
    },
    stopProtection: function (element, saltValue, hashValue) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var data = [saltValue, hashValue];
            var result = { data: JSON.stringify(data) };
            element.blazor__instance.editor.onUnProtectionSuccess(result);
        }
        return element.blazor__instance.documentHelper.isDocumentProtected;
    },
    getCurrentSaltValue: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            return element.blazor__instance.documentHelper.saltValue;
        }
        return "";
    },
    insertEditRangeElement: function (element, userName) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.isHighlightEditRegion = true;
            element.blazor__instance.editor.insertEditRangeElement(userName);
        }
    },
    removeUserRestrictions: function (element, userName) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.removeUserRestrictions(userName);
        }
    },
    setIsHighlightEditRegion: function (element, isHighlight) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.isHighlightEditRegion = isHighlight;
        }
    },
    navigateNextEditRegion: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.navigateToNextEditingRegion();
        }
    },
    showAllEditingRegion: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.showAllEditingRegion();
        }
    },
    deleteComment: function (element, comment) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.deleteCommentInternal(this.getComment(element, comment));
        }
    },
    getCurrentEditRangeUser: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (element.blazor__instance.documentHelper.selection.checkSelectionIsAtEditRegion()) {
                var editRange = element.blazor__instance.documentHelper.selection.getEditRangeStartElement();
                if (editRange) {
                    return editRange.user;
                }
            }
        }
        return "";
    },
    resolveReOpenComment: function (element, comment) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (comment.isResolved) {
                element.blazor__instance.editor.resolveComment(this.getComment(element, comment));
            }
            else {
                element.blazor__instance.editor.reopenComment(this.getComment(element, comment));
            }
        }
    },
    updateCommentText: function (element, comment) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var commentEle = this.getComment(element, comment);
            commentEle.text = comment.text;
        }
    },
    addEmptyComment: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectComment(element.blazor__instance.editor.insertCommentInternal(''));
        }
    },
    addReplyComment: function (element, parentComment, replyText) {
        var commentJson;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var commentEle = this.getComment(element, parentComment);
            element.blazor__instance.editor.replyComment(commentEle, replyText);
            commentJson = JSON.stringify(element.blazor__instance.editor.getCommentObj(commentEle.replyComments[commentEle.replyComments.length - 1]));
        }
        return commentJson;
    },
    selectComment: function (element, comment) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var commentEle = this.getComment(element, comment);
            element.blazor__instance.selection.selectComment(commentEle);
        }
    },
    updateCommentPaneHeight: function (element, reviewPane) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var tabHeaderHeight = reviewPane.getElementsByClassName('e-tab-header')[0].getBoundingClientRect().height;
            var toolbarHeight = reviewPane.getElementsByClassName('e-de-cmt-toolbar')[0].getBoundingClientRect().height;
            var commentArea = reviewPane.getElementsByClassName('e-de-cmt-container')[0];
            commentArea.style.height = reviewPane.getBoundingClientRect().height - tabHeaderHeight - toolbarHeight + 'px';
        }
    },
    setFocusToElement: function (element, elementRef) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            elementRef.focus();
        }
    },
    updateTextBoxHeight: function (element, elementRef) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            setTimeout(function () {
                elementRef.style.height = 'auto';
                var scrollHeight = elementRef.scrollHeight;
                elementRef.style.height = scrollHeight + 'px';
            });
        }
    },
    getComment: function (element, comment) {
        var comments = element.blazor__instance.documentHelper.comments;
        for (var i = 0; i < comments.length; i++) {
            if (comment.isReply) {
                for (var j = 0; j < comments[i].replyComments.length; j++) {
                    var replyComment = comments[i].replyComments[j];
                    if (replyComment.commentId == comment.commentId) {
                        return replyComment;
                    }
                }
            }
            else if (comments[i].commentId == comment.commentId) {
                return comments[i];
            }
        }
        return undefined;
    },
    navigateNextComment: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.navigateNextComment();
        }
    },
    navigatePreviousComment: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.navigatePreviousComment();
        }
    },
    increaseIndent: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.increaseIndent();
        }
    },
    decreaseIndent: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.decreaseIndent();
        }
    },
    insertField: function (element, code) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertField(code);
        }
    },
    getIsInField: function (element) {
        var isInField;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            isInField = element.blazor__instance.selection.isInField;
        }
        return isInField;
    },
    insertHyperlink: function (element, address, displayText) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertHyperlink(address, displayText);
        }
    },
    removeHyperlink: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.removeHyperlink();
        }
    },
    insertBookmark: function (element, name) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertBookmark(name);
        }
    },
    clearList: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.clearList();
        }
    },
    setRedoLimit: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editorHistory.redoLimit = val;
        }
    },
    getRedoLimit: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.editorHistory.redoLimit;
        }
        return result;
    },
    setIndex: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            setTimeout(function () {
                var elementFocus = document.activeElement;
                element.blazor__instance.searchModule.searchResults.index = val;
                elementFocus.focus();
            }, 10);
        }
    },
    getIndex: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.searchModule.searchResults.index;
        }
        return result;
    },
    findAll: function (element, text, findoption) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.documentHelper.owner.findResultsList = [];
            element.blazor__instance.searchModule.findAll(text, findoption);
            if (element.blazor__instance.searchModule.textSearchResults.length > 0) {
                element.blazor__instance.searchModule.addFindResultView(element.blazor__instance.searchModule.textSearchResults);
                return element.blazor__instance.documentHelper.owner.findResultsList;
            }
        }
        return [];
    },
    find: function (element, text, findOption) {
        var result;
        var results;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.documentHelper.owner.findResultsList = [];
            result = element.blazor__instance.searchModule.textSearch.findAll(text, findOption);
            if (!isNullOrUndefined(result)) {
                element.blazor__instance.searchModule.addFindResultView(result);
                results = element.blazor__instance.documentHelper.owner.findResultsList;
            }
        }
        return results;
    },
    navigateNextResult: function (element, text, findOption) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.searchModule.find(text, findOption);
        }
    },
    navigatePreviousResult: function (element, text, findOption) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.searchModule.find(text, findOption);
        }
    },
    replace: function (element, findText, replaceText, findOption) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var documentHelper = element.blazor__instance.documentHelper;
            var results = documentHelper.owner.searchModule.textSearchResults;
            if (findText !== '' && !isNullOrUndefined(findText)) {
                if (documentHelper.owner.selection != null) {
                    var selectionText = documentHelper.owner.selection.text;
                    if (!documentHelper.owner.selection.isEmpty) {
                        if (documentHelper.owner.selection.isForward) {
                            documentHelper.owner.selection.selectContent(documentHelper.owner.selection.start, true);
                        }
                        else {
                            documentHelper.owner.selection.selectContent(documentHelper.owner.selection.end, true);
                        }
                    }
                    if (!isNullOrUndefined(results) && !isNullOrUndefined(results.currentSearchResult)) {
                        var result = results.currentSearchResult;
                        documentHelper.owner.searchModule.navigate(result);
                        if (result.text === selectionText) {
                            var replace = isNullOrUndefined(replaceText) ? '' : replaceText;
                            documentHelper.owner.searchModule.replace(replace, result, results);
                        }
                    }
                }
            }
        }
    },
    replaceAll: function (element, text, findOption) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.searchModule.replaceAllInternal(text, findOption);
        }
    },
    getsearchresults: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.searchModule.searchResults;
        }
    },
    clear: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.searchModule.searchResults.clear;
        }
    },
    setBackground: function (element, color) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.background = color;
        }
    },
    getBackground: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.background;
        }
        return result;
    },
    setBottomMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.bottomMargin = val;
        }
    },
    getBottomMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.bottomMargin;
        }
        return result;
    },
    setLeftMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.leftMargin = val;
        }
    },
    getLeftMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.leftMargin;
        }
        return result;
    },
    setPreferredWidth: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.preferredWidth = val;
        }
    },
    getPreferredWidth: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.preferredWidth;
        }
        return result;
    },
    setRightMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.rightMargin = val;
        }
    },
    getRightMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.rightMargin;
        }
        return result;
    },
    setTopMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.topMargin = val;
        }
    },
    getTopMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.topMargin;
        }
        return result;
    },
    setPreferredWidthType: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.preferredWidthType = val;
        }
    },
    getPreferredWidthType: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.preferredWidthType;
        }
        return result;
    },
    setVerticalAlignment: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.verticalAlignment = val;
        }
    },
    getVerticalAlignment: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.cellFormat.verticalAlignment;
        }
        return result;
    },
    insertImage: function (element, imageString, width, height) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertImage(imageString, width, height);
        }
    },
    resizeWindow: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            setTimeout(function () {
                element.blazor__instance.resize();
            }, 100);
        }
    },
    resize: function (element, width, height) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.imageFormat.resize(width, height);
        }
    },
    getImageHeight: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.imageFormat.height;
        }
    },
    getImageWidth: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.imageFormat.width;
        }
    },
    setAfterSpacing: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.afterSpacing = val;
        }
    },
    getAfterSpacing: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.afterSpacing;
        }
        return result;
    },
    setBeforeSpacing: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.beforeSpacing = val;
        }
    },
    getBeforeSpacing: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.beforeSpacing;
        }
        return result;
    },
    setBidi: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.bidi = val;
        }
    },
    getBidi: function (element) {
        var bidi;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            bidi = element.blazor__instance.selection.paragraphFormat.bidi;
        }
        return bidi;
    },
    setContextualSpacing: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.contextualSpacing = val;
        }
    },
    getContextualSpacing: function (element) {
        var bidi;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            bidi = element.blazor__instance.selection.paragraphFormat.contextualSpacing;
        }
        return bidi;
    },
    setFirstLineIndent: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.firstLineIndent = val;
        }
    },
    getFirstLineIndent: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.firstLineIndent;
        }
        return result;
    },
    setLeftIndent: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.leftIndent = val;
        }
    },
    getLeftIndent: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.leftIndent;
        }
        return result;
    },
    setLineSpacing: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.lineSpacing = val;
        }
    },
    getLineSpacing: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.lineSpacing;
        }
        return result;
    },
    setListLevelNumber: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.listLevelNumber = val;
        }
    },
    getListLevelNumber: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.listLevelNumber;
        }
        return result;
    },
    setRightIndent: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.rightIndent = val;
        }
    },
    getRightIndent: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.rightIndent;
        }
        return result;
    },
    getListText: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.listText;
        }
    },
    setLineSpacingType: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.lineSpacingType = val;
        }
    },
    getLineSpacingType: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.lineSpacingType;
        }
        return result;
    },
    setTextAlignment: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.textAlignment = val;
        }
    },
    getTextAlignment: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.textAlignment;
        }
        return result;
    },
    setBaselineAlignment: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.baselineAlignment = val;
        }
    },
    getBaselineAlignment: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.baselineAlignment;
        }
        return result;
    },
    setBold: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.bold = val;
        }
    },
    getBold: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.bold;
        }
        return result;
    },
    setItalic: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.italic = val;
        }
    },
    getItalic: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.italic;
        }
        return result;
    },
    setFontColor: function (element, color) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.fontColor = color;
        }
    },
    getFontColor: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.fontColor;
        }
        return result;
    },
    setFontFamily: function (element, family) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.fontFamily = family;
        }
    },
    getFontFamily: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.fontFamily;
        }
        return result;
    },
    setFontSize: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.fontSize = val;
        }
    },
    getFontSize: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.fontSize;
        }
        return result;
    },
    setHighlightColor: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.highlightColor = val;
        }
    },
    getHighlightColor: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.highlightColor;
        }
        return result;
    },
    setStrikethrough: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.strikethrough = val;
        }
    },
    getStrikethrough: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.strikethrough;
        }
        return result;
    },
    setUnderline: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.underline = val;
        }
    },
    getUnderline: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.underline;
        }
        return result;
    },
    selectRow: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectRow();
        }
    },
    setAllowBreakAcrossPages: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.rowFormat.allowBreakAcrossPages = val;
        }
    },
    getAllowBreakAcrossPages: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.rowFormat.allowBreakAcrossPages;
        }
        return result;
    },
    setIsHeader: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.rowFormat.isHeader = val;
        }
    },
    getIsHeader: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.rowFormat.isHeader;
        }
        return result;
    },
    setRowHeight: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.rowFormat.height = val;
        }
    },
    getRowHeight: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.rowFormat.height;
        }
        return result;
    },
    setHeightType: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.rowFormat.heightType = val;
        }
    },
    getHeightType: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.rowFormat.heightType;
        }
        return result;
    },
    setSectionBottomMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.bottomMargin = val;
        }
    },
    getSectionBottomMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.bottomMargin;
        }
        return result;
    },
    setFooterDistance: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.footerDistance = val;
        }
    },
    getFooterDistance: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.footerDistance;
        }
        return result;
    },
    setHeaderDistance: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.headerDistance = val;
        }
    },
    getHeaderDistance: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.headerDistance;
        }
        return result;
    },
    setSectionLeftMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.leftMargin = val;
        }
    },
    getSectionLeftMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.leftMargin;
        }
        return result;
    },
    setPageHeight: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.pageHeight = val;
        }
    },
    getPageHeight: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.pageHeight;
        }
        return result;
    },
    setPageWidth: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.pageWidth = val;
        }
    },
    getPageWidth: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.pageWidth;
        }
        return result;
    },
    setSectionRightMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.rightMargin = val;
        }
    },
    getSectionRightMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.rightMargin;
        }
        return result;
    },
    setSectionTopMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.topMargin = val;
        }
    },
    getSectionTopMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.topMargin;
        }
        return result;
    },
    setDifferentFirstPage: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.differentFirstPage = val;
        }
    },
    getDifferentFirstPage: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.differentFirstPage;
        }
        return result;
    },
    setDifferentOddAndEvenPages: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.sectionFormat.differentOddAndEvenPages = val;
        }
    },
    getDifferentOddAndEvenPages: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.sectionFormat.differentOddAndEvenPages;
        }
        return result;
    },
    setTableBackground: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.background = val;
        }
    },
    getTableBackground: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.background;
        }
        return result;
    },
    setTableBottomMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.bottomMargin = val;
        }
    },
    getTableBottomMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.bottomMargin;
        }
        return result;
    },
    setTableCellSpacing: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.cellSpacing = val;
        }
    },
    getTableCellSpacing: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.cellSpacing;
        }
        return result;
    },
    setTableLeftIndent: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.leftIndent = val;
        }
    },
    getTableLeftIndent: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.leftIndent;
        }
        return result;
    },
    setTableLeftMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.leftMargin = val;
        }
    },
    getTableLeftMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.leftMargin;
        }
        return result;
    },
    setTablePreferredWidth: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.preferredWidth = val;
        }
    },
    getTablePreferredWidth: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.preferredWidth;
        }
        return result;
    },
    setTableRightMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.rightMargin = val;
        }
    },
    getTableRightMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.rightMargin;
        }
        return result;
    },
    setTableTopMargin: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.topMargin = val;
        }
    },
    getTableTopMargin: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.topMargin;
        }
        return result;
    },
    setTableBidi: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.bidi = val;
        }
    },
    getTableBidi: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.bidi;
        }
        return result;
    },
    setTablePreferredWidthType: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.preferredWidthType = val;
        }
    },
    getTablePreferredWidthType: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.preferredWidthType;
        }
        return result;
    },
    setTableAlignment: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.tableFormat.tableAlignment = val;
        }
    },
    getTableAlignment: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.tableFormat.tableAlignment;
        }
        return result;
    },
    getListFormat: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.start.paragraph.paragraphFormat.listFormat;
        }
        return result;
    },
    getList: function (element) {
        var result = {};
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.fetchList(element.blazor__instance.documentHelper.lists, element.blazor__instance.documentHelper.abstractLists);
        }
        return result;
    },
    getListLength: function (element) {
        var length = 0;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (this.documentHelper.owner.documentHelper.lists.length > 0) {
                length = this.documentHelper.owner.documentHelper.lists[this.documentHelper.owner.documentHelper.lists.length - 1].listId + 1;
            }
        }
        return length;
    },
    getAbstractListLength: function (element) {
        var length = 0;
        if (this.documentHelper.owner.documentHelper.abstractLists.length > 0) {
            length = this.documentHelper.owner.documentHelper.abstractLists[this.documentHelper.owner.documentHelper.abstractLists.length - 1].abstractListId + 1;
        }
        return length;
    },
    getListLevel: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.getListLevel(element.blazor__instance.selection.start.paragraph);
        }
        return result;
    },
    getListLevelPattern: function (element, listLevelNumber) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.documentHelper.layout.getListLevelPattern(listLevelNumber);
        }
        return result;
    },
    setListLevelPattern: function (element, listLevelNumber) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
        }
    },
    applyListProperties: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.setList(val);
        }
    },
    applyPageSetupProperties: function (element, format) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var sectionFormat = new WSectionFormat();
            if (!isNullOrUndefined(format)) {
                sectionFormat.topMargin = format.topMargin;
                sectionFormat.bottomMargin = format.bottomMargin;
                sectionFormat.leftMargin = format.leftMargin;
                sectionFormat.rightMargin = format.rightMargin;
                sectionFormat.pageHeight = format.pageHeight;
                sectionFormat.pageWidth = format.pageWidth;
                sectionFormat.footerDistance = format.footerDistance;
                sectionFormat.headerDistance = format.headerDistance;
                sectionFormat.differentFirstPage = format.differentFirstPage;
                sectionFormat.differentOddAndEvenPages = format.differentOddAndEvenPages;
            }
            element.blazor__instance.editor.onApplySectionFormat(undefined, sectionFormat);
        }
    },
    applyParagraphFormat: function (element, paragraphFormat) {
        var paraFormat = new WParagraphFormat();
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (!isNullOrUndefined(paragraphFormat)) {
                paraFormat.leftIndent = paragraphFormat.leftIndent;
                paraFormat.rightIndent = paragraphFormat.rightIndent;
                paraFormat.firstLineIndent = paragraphFormat.firstLineIndent;
                paraFormat.lineSpacing = paragraphFormat.lineSpacing;
                paraFormat.lineSpacingType = paragraphFormat.lineSpacingType;
                paraFormat.textAlignment = paragraphFormat.textAlignment;
                paraFormat.beforeSpacing = paragraphFormat.beforeSpacing;
                paraFormat.afterSpacing = paragraphFormat.afterSpacing;
                paraFormat.bidi = paragraphFormat.bidi;
                paraFormat.contextualSpacing = paragraphFormat.contextualSpacing;
            }
            element.blazor__instance.editor.onParagraphFormat(paraFormat);
        }
    },
    getStyleName: function (element, styleType) {
        var style;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            style = element.blazor__instance.getStyleNames(styleType);
        }
        return style;
    },
    getStyles: function (element, styleType) {
        var style;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            style = element.blazor__instance.getStyles(styleType);
        }
        return style;
    },
    findByName: function (element, styleType) {
        var style = {};
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            style = element.blazor__instance.documentHelper.styles.findByName(styleType);
        }
        style = element.blazor__instance.fetchStyleValue(style);
        return style;
    },
    layoutWholeDocument: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.layoutWholeDocument();
        }
    },
    shiftingEnableDisable: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.isShiftingEnabled = val;
        }
    },
    updateStyleValues: function (element, tmpStyle) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.documentHelper.styles.push(tmpStyle);
        }
    },
    setCharStyleName: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.characterFormat.styleName = val;
        }
    },
    setParaStyleName: function (element, val) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.paragraphFormat.styleName = val;
        }
    },
    getCharStyleName: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.characterFormat.styleName;
        }
        return result;
    },
    getParaStyleName: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.paragraphFormat.styleName;
        }
        return result;
    },
    gotoBookmark: function (element, name) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.selectBookmark(name);
        }
    },
    deleteBookmark: function (element, name) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editorModule.deleteBookmark(name);
        }
    },
    applyBorderAndShading: function (element, applyTo, border, shading) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (applyTo === 'Table') {
                element.blazor__instance.editorModule.applyBordersInternal(element.blazor__instance.selection.tableFormat.table.tableFormat.borders, border);
                element.blazor__instance.editorModule.applyShading(element.blazor__instance.selection.tableFormat.table.tableFormat.shading, shading);
            }
            else {
                element.blazor__instance.editorModule.applyBordersInternal(element.blazor__instance.selection.start.paragraph.associatedCell.cellFormat.borders, border);
                element.blazor__instance.editorModule.applyShading(element.blazor__instance.selection.start.paragraph.associatedCell.cellFormat.shading, shading);
            }
        }
    },
    insertFormField: function (element, Type) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.insertFormField(Type);
        }
    },
    insertTextFormField: function (element, formField) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var field = new TextFormField();
            field.type = formField.type;
            field.name = formField.name;
            field.enabled = formField.enabled;
            field.helpText = formField.helpText;
            field.statusText = formField.statusText;
            field.maxLength = formField.maxLength;
            field.defaultValue = formField.defaultValue;
            field.format = formField.format;
            element.blazor__instance.editorModule.editFormField('Text', field);
        }
    },
    insertCheckBoxFormField: function (element, formField) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var field = new CheckBoxFormField();
            field.name = formField.name;
            field.enabled = formField.enabled;
            field.helpText = formField.helpText;
            field.sizeType = formField.sizeType;
            field.size = formField.size;
            field.defaultValue = formField.defaultValue;
            element.blazor__instance.editorModule.editFormField('CheckBox', field);
        }
    },
    insertDropDownFormField: function (element, formField) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var field = new DropDownFormField();
            field.name = formField.name;
            field.enabled = formField.enabled;
            field.helpText = formField.helpText;
            field.statusText = formField.statusText;
            field.dropdownItems = formField.dropdownItems.slice();
            field.selectedIndex = formField.selectedIndex;
            element.blazor__instance.editorModule.editFormField('DropDown', field);
        }
    },
    getCurrentField: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.getCurrentFormField();
        }
        return JSON.stringify(result.formFieldData);
    },
    updateFormFieldValue: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var formField = element.blazor__instance.selection.getCurrentFormField();
            if (formField) {
                element.blazor__instance.editorModule.updateFormField(formField, value);
            }
        }
    },
    onCharacterFormat: function (element, result) {
        var format = new WCharacterFormat();
        if (!isNullOrUndefined(result)) {
            format.bold = result.bold;
            format.fontSize = result.fontSize;
            format.fontFamily = result.fontFamily;
            format.italic = result.italic;
            format.baselineAlignment = result.baselineAlignment;
            format.underline = result.underline;
            format.fontColor = result.fontColor;
            format.highlightColor = result.highlightColor;
            format.strikethrough = result.strikethrough;
            format.allCaps = result.allCaps;
        }
        element.blazor__instance.editor.initHistory('CharacterFormat');
        if (element.blazor__instance.selection.isEmpty) {
            if (element.blazor__instance.selection.start.offset === element.blazor__instance.selection.getParagraphLength(element.blazor__instance.selection.start.paragraph)) {
                element.blazor__instance.editor.applyCharFormatValueInternal(element.blazor__instance.selection, element.blazor__instance.selection.start.paragraph.characterFormat, undefined, format);
                element.blazor__instance.editor.reLayout(element.blazor__instance.selection);
            }
            return;
        }
        else {
            element.blazor__instance.editor.setOffsetValue(element.blazor__instance.selection);
            element.blazor__instance.editor.updateSelectionCharacterFormatting('CharacterFormat', format, false);
        }
    },
    applyCellOption: function (element, format) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var cellFormat = new WCellFormat();
            if (!isNullOrUndefined(format)) {
                cellFormat.topMargin = format.topMargin;
                cellFormat.bottomMargin = format.bottomMargin;
                cellFormat.leftMargin = format.leftMargin;
                cellFormat.rightMargin = format.rightMargin;
            }
            element.blazor__instance.applyCellOption(cellFormat);
        }
    },
    applyTableOption: function (element, format) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var tableFormat = new WTableFormat();
            if (!isNullOrUndefined(format)) {
                tableFormat.topMargin = format.topMargin;
                tableFormat.bottomMargin = format.bottomMargin;
                tableFormat.leftMargin = format.leftMargin;
                tableFormat.rightMargin = format.rightMargin;
            }
            element.blazor__instance.applyTableOption(tableFormat);
        }
    },
    applyTableProperties: function (element, tableFormat, rowFormat, cellFormat) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editorModule.initComplexHistory('TableProperties');
            if (tableFormat) {
                var tableProperties = new WTableFormat();
                if (tableFormat.cellSpacing) {
                    tableProperties.cellSpacing = tableFormat.cellSpacing;
                }
                if (tableFormat.leftMargin)
                    tableProperties.leftMargin = tableFormat.leftMargin;
                if (tableFormat.topMargin)
                    tableProperties.topMargin = tableFormat.topMargin;
                if (tableFormat.rightMargin)
                    tableProperties.rightMargin = tableFormat.rightMargin;
                if (tableFormat.bottomMargin)
                    tableProperties.bottomMargin = tableFormat.bottomMargin;
                if (tableFormat.leftIndent)
                    tableProperties.leftIndent = tableFormat.leftIndent;
                if (tableFormat.tableAlignment)
                    tableProperties.tableAlignment = tableFormat.tableAlignment;
                if (tableFormat.preferredWidth)
                    tableProperties.preferredWidth = tableFormat.preferredWidth;
                if (tableFormat.preferredWidthType)
                    tableProperties.preferredWidthType = tableFormat.preferredWidthType;
                if (tableFormat.bidi)
                    tableProperties.bidi = tableFormat.bidi;
                element.blazor__instance.editorModule.onTableFormat(tableProperties);
            }
            if (rowFormat) {
                var rowProperties = new WRowFormat();
                if (rowFormat.isHeader) {
                    rowProperties.isHeader = rowFormat.isHeader;
                }
                if (rowFormat.allowBreakAcrossPages) {
                    rowProperties.allowBreakAcrossPages = rowFormat.allowBreakAcrossPages;
                }
                if (rowFormat.height) {
                    rowProperties.height = rowFormat.height;
                }
                if (rowFormat.heightType) {
                    rowProperties.heightType = rowFormat.heightType;
                }
                element.blazor__instance.editorModule.onRowFormat(rowFormat);
            }
            if (cellFormat) {
                var cellProperties = new WCellFormat();
                if (cellFormat.leftMargin) {
                    cellProperties.leftMargin = cellFormat.leftMargin;
                }
                if (cellFormat.topMargin) {
                    cellProperties.topMargin = cellFormat.topMargin;
                }
                if (cellFormat.bottomMargin) {
                    cellProperties.bottomMargin = cellFormat.bottomMargin;
                }
                if (cellFormat.rightMargin) {
                    cellProperties.rightMargin = cellFormat.rightMargin;
                }
                element.blazor__instance.editorModule.onCellFormat(cellProperties);
            }
            element.blazor__instance.editorHistory.updateComplexHistory();
        }
    },
    enableRepeatHeader: function (element) {
        var val;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            val = element.blazor__instance.enableRepeatHeader();
        }
        return val;
    },
    RowFormatIsInHeader: function (element) {
        var val;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            val = element.blazor__instance.documentHelper.selection.rowFormat.isHeader;
        }
        return val;
    },
    applyShading: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.cellFormat.background = value;
        }
    },
    applyBorder: function (element, value, size, color) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.applyBorders(this.getBorder(value, size, color));
        }
    },
    getBorder: function (value, borderSize, color) {
        var linestyle = (borderSize === 0) ? 'Cleared' : 'Single';
        var borderSettings = {
            type: value,
            borderColor: color,
            lineWidth: borderSize,
            borderStyle: linestyle
        };
        return borderSettings;
    },
    initTrackChangesPane: function (element) {
        element.blazor__instance.trackChangesPane.initTrackChangePane();
    },
    sortByUser: function (element, userName) {
        element.blazor__instance.trackChangesPane.onUserSelect(userName);
    },
    sortByRevision: function (element, revisionType) {
        element.blazor__instance.trackChangesPane.onTypeSelect(revisionType);
    },
    acceptOrRejectChanges: function (element, type) {
        element.blazor__instance.trackChangesPane.onMenuSelect(type);
    },
    navigatePreviousRevision: function (element) {
        element.blazor__instance.selection.navigatePreviousRevision();
    },
    navigateNextChanges: function (element) {
        element.blazor__instance.selection.navigateNextRevision();
    },
    getHyperlinkField: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var fieldBegin = element.blazor__instance.selection.getHyperlinkField();
            var displayText = "";
            var link = "";
            if (!isNullOrUndefined(fieldBegin.fieldSeparator)) {
                var format = undefined;
                var fieldObj = element.blazor__instance.selection.getHyperlinkDisplayText(fieldBegin.fieldSeparator.line.paragraph, fieldBegin.fieldSeparator, fieldBegin.fieldEnd, false, format);
                displayText = fieldObj.displayText;
            }
            link = element.blazor__instance.selection.getLinkText(fieldBegin);
            return JSON.stringify({ 'displayText': displayText, 'link': link });
        }
        return "";
    },
    isTableSelected: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            return element.blazor__instance.selection.isTableSelected();
        }
        return false;
    },
    getPageCount: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            return element.blazor__instance.pageCount;
        }
        return 1;
    },
    getContextType: function (element) {
        var contextTypeInternal = '';
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            contextTypeInternal = element.blazor__instance.selection.contextType;
        }
        return contextTypeInternal;
    },
    copy: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.copy();
        }
    },
    cut: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editor.cut();
        }
    },
    pasteInternal: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (!element.blazor__instance.isReadOnlyMode) {
                element.blazor__instance.editorModule.pasteInternal(undefined);
            }
        }
    },
    updateField: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var isReadOnly = element.blazor__instance.isReadOnlyMode;
            if (element.blazor__instance.selection.isReferenceField() && (!isReadOnly ||
                (isReadOnly && element.blazor__instance.documentHelper.protectionType === 'FormFieldsOnly'))) {
                element.blazor__instance.selection.updateRefField();
            }
            else {
                element.blazor__instance.editorModule.updateToc();
            }
        }
    },
    navigateHyperlink: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.navigateHyperlink();
        }
    },
    copyHyperlink: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.copyHyperlink();
        }
    },
    applyContinueNumbering: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editorModule.applyContinueNumbering();
        }
    },
    applyRestartNumbering: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editorModule.applyRestartNumbering(element.blazor__instance.selection);
        }
    },
    handleAcceptReject: function (element, value) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.handleAcceptReject(value);
        }
    },
    spellCheck: function (element, value, item) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var expectedData = element.blazor__instance.element.id + value;
            if (item.substring(0, expectedData.length) === expectedData) {
                var content = item.substring(item.lastIndexOf('_') + 1);
                if (content === 'Add To Dictionary') {
                }
                else if (content === 'Ignore All') {
                    this.spellChecker.handleIgnoreAllItems();
                }
                else {
                    this.spellChecker.manageReplace(content);
                }
            }
            else {
                element.blazor__instance.fireCustomContextMenuSelect(item);
            }
        }
    },
    checkEmpty: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.selection.isEmpty;
        }
        return result;
    },
    checkReadOnly: function (element) {
        var result;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            result = element.blazor__instance.isReadOnlyMode;
        }
        return result;
    },
    hasRevision: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            return element.blazor__instance.selection.hasRevisions();
        }
        return false;
    },
    isContentProtected: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var documentEditor = element.blazor__instance;
            var isProtectedDocument = documentEditor.documentHelper.isDocumentProtected;
            var allowFormatting = isProtectedDocument && documentEditor.documentHelper.restrictFormatting;
            var isSelectionInProtectecRegion = documentEditor.editor.restrictEditing;
            var isReadOnly = documentEditor.isReadOnly;
            var protectionType = documentEditor.documentHelper.protectionType;
            var protectionInfo = {
                isDocumentProtected: isProtectedDocument,
                allowFormatting: allowFormatting,
                isInProtectecRegion: isSelectionInProtectecRegion,
                isReadOnly: isReadOnly,
                protectionType: protectionType
            };
            return JSON.stringify(protectionInfo);
        }
        return "";
    },
    clearSelectionHighlight: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.documentHelper.clearSelectionHighlight();
        }
    },
    onIgnore: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (!isNullOrUndefined(this.info.element)) {
                var instance = element.blazor__instance;
                instance.spellChecker.manageReplace('Ignore Once', this.info.element);
                this.removeErrors(element);
                instance.spellChecker.checkForNextError();
            }
        }
    },
    removeErrors: function (element) {
        var instance = element.blazor__instance;
        if (!isNullOrUndefined(this.info.text) && instance.spellChecker.errorWordCollection.containsKey(this.info.text)) {
            var textElement = instance.spellChecker.errorWordCollection.get(this.info.text);
            textElement.splice(0, 1);
            if (textElement.length === 0) {
                instance.spellChecker.errorWordCollection.remove(this.info.text);
            }
        }
        if (instance.spellChecker.errorWordCollection.length === 0) {
        }
    },
    onIgnoreAll: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var instance = element.blazor__instance;
            if (!isNullOrUndefined(this.info.element)) {
                var text = this.info.element.text;
                instance.spellChecker.handleIgnoreAllItems({ element: this.info.element, text: text });
                instance.spellChecker.checkForNextError();
            }
        }
    },
    addToDictionary: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (isNullOrUndefined(this.info.element)) {
                var instance = element.blazor__instance;
                instance.spellChecker.handleAddToDictionary({ element: this.info.element, text: (this.info.element.text) });
                if (instance.spellChecker.errorWordCollection.containsKey(this.info.text)) {
                    instance.spellChecker.errorWordCollection.remove(this.info.text);
                }
            }
        }
    },
    onChange: function (element, selectedText) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (!isNullOrUndefined(selectedText)) {
                this.isSpellChecking = true;
                var instance = element.blazor__instance;
                instance.spellChecker.manageReplace(selectedText, this.info.element);
                this.removeErrors(element);
                instance.spellChecker.checkForNextError();
            }
        }
    },
    onChangeAll: function (element, selectedText) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (!isNullOrUndefined(selectedText)) {
                this.isSpellChecking = true;
                var instance = element.blazor__instance;
                var elements = instance.spellChecker.errorWordCollection.get(this.info.text);
                for (var i = 0; i < elements.length; i++) {
                    if (elements[i] instanceof ErrorTextElementBox && !elements[i].ischangeDetected) {
                        instance.spellChecker.manageReplace(selectedText, elements[i]);
                    }
                    else if (elements[i] instanceof TextElementBox) {
                        var matchResults = instance.spellChecker.getMatchedResultsFromElement(elements[i]);
                        var results = matchResults.textResults;
                        var markIndex = (elements[i].ischangeDetected) ? elements[i].start.offset : elements[i].line.getOffset(elements[i], 0);
                        instance.searchModule.textSearch.updateMatchedTextLocation(matchResults.matches, results, matchResults.elementInfo, 0, elements[i], false, null, markIndex);
                        for (var j = 0; j < results.length; j++) {
                            var element_1 = instance.spellChecker.createErrorElementWithInfo(results.innerList[j], elements[i]);
                            instance.spellChecker.manageReplace(selectedText, element_1);
                        }
                    }
                }
                if (instance.spellChecker.errorWordCollection.containsKey(this.info.text)) {
                    instance.spellChecker.errorWordCollection.remove(this.info.text);
                }
                instance.spellChecker.checkForNextError();
            }
        }
    },
    getErrorString: function (element) {
        var error = [];
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (this.info.text) {
                error.push(this.info.text);
            }
        }
        return error;
    },
    getSuggestionsString: function (element) {
        var suggestions = [];
        var error = this.info.text;
        if (this.isSpellChecking) {
            this.isSpellChecking = false;
        }
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (this.info.text) {
                error = element.blazor__instance.spellChecker.manageSpecialCharacters(error, undefined, true);
                suggestions = element.blazor__instance.spellChecker.errorSuggestions.containsKey(error) ? element.blazor__instance.spellChecker.errorSuggestions.get(error) : [];
            }
        }
        return suggestions;
    },
    hasElementBox: function (element) {
        var isElementBox = false;
        var instance = element.blazor__instance;
        this.info = instance.spellChecker.findCurretText();
        if (this.info.element) {
            isElementBox = true;
            instance.spellChecker.currentContextInfo = this.info;
            this.info = instance.spellChecker.retriveText();
        }
        return isElementBox;
    },
    invokeMethod: function (element, methodName, moduleName, args) {
        return __awaiter(this, void 0, void 0, function () {
            var returnValue, comp, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        returnValue = null;
                        comp = element.blazor__instance;
                        if (!comp) return [3, 3];
                        if (moduleName === null) {
                            returnValue = comp[methodName].apply(comp, args);
                        }
                        else {
                            comp = element.blazor__instance;
                            comp = this.getChildModule(comp, moduleName);
                            returnValue = comp[methodName].apply(comp, args);
                        }
                        if (returnValue && typeof returnValue === "object" && !(returnValue instanceof Promise)) {
                            returnValue = this.cleanStringify(returnValue);
                        }
                        if (!(methodName == 'saveAsBlob' && returnValue instanceof Promise)) return [3, 2];
                        return [4, this.promiseHandler(returnValue)];
                    case 1:
                        returnValue = _a.sent();
                        _a.label = 2;
                    case 2: return [2, returnValue];
                    case 3: return [3, 5];
                    case 4:
                        e_1 = _a.sent();
                        return [2, this.throwError(e_1, comp)];
                    case 5: return [2, {}];
                }
            });
        });
    },
    promiseHandler: function (returnValue) {
        return __awaiter(this, void 0, void 0, function () {
            var object;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        object = this;
                        if (!(returnValue instanceof Promise)) return [3, 2];
                        return [4, returnValue.then(function (data) {
                                return __awaiter(this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, object.docEditFileReader(data).then(function (dataUrl) {
                                                    returnValue = JSON.stringify({ "data": dataUrl.substr(dataUrl.indexOf(',') + 1) });
                                                })];
                                            case 1:
                                                _a.sent();
                                                return [2];
                                        }
                                    });
                                });
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2, returnValue];
                }
            });
        });
    },
    docEditFileReader: function (file) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                        var fileReader = new FileReader();
                        fileReader.onload = function () {
                            resolve(fileReader.result);
                        };
                        fileReader.readAsDataURL(file);
                    })];
            });
        });
    },
    getMethodCall: function (element, moduleName, methodName) {
        try {
            var comp = element.blazor__instance;
            if (moduleName == null || moduleName == "null") {
                return comp[methodName];
            }
            else {
                comp = this.getChildModule(comp, moduleName);
                return comp[methodName];
            }
        }
        catch (e) {
            this.throwError(e, comp);
        }
    },
    setMethodCall: function (element, moduleName, methodName, args) {
        try {
            var comp = element.blazor__instance;
            comp = this.getChildModule(comp, moduleName);
            comp[methodName] = args[0];
        }
        catch (e) {
            this.throwError(e, comp);
        }
    },
    cleanStringify: function (object) {
        try {
            if (object && typeof object === 'object') {
            }
            return JSON.stringify(object);
        }
        catch (e) {
            console.log(e);
            return '';
        }
    },
    getChildModule: function (comp, moduleName) {
        try {
            var path = moduleName.split(',');
            for (var i = 0; i < path.length; i++) {
                comp = comp[path[i]];
            }
            return comp;
        }
        catch (e) {
        }
        return comp;
    },
    insertNotes: function (element, type) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (type === "Footnote") {
                element.blazor__instance.editor.insertFootnote();
            }
            else {
                element.blazor__instance.editor.insertEndnote();
            }
        }
    },
    pasteOptions: function (element, type) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.selection.pasteOptions(type);
        }
    },
    modifyStyle: function (element, styleName, styleData, basedOn, followStyle, type, isEdit) {
        var documentHelper = element.blazor__instance.documentHelper;
        var styleObject = styleData;
        if (styleName.length > 0) {
            var style = documentHelper.styles.findByName(styleName);
            var name_1;
            if (!isNullOrUndefined(style)) {
                style.type = type === 'Character' ? 'Character' : 'Paragraph';
                style.basedOn = documentHelper.styles.findByName(basedOn);
                if (styleObject.type === 'Paragraph' || styleObject.type.indexOf('Linked(Paragraph and Character)') !== -1) {
                    style.next = documentHelper.styles.findByName(styleObject.next);
                    element.blazor__instance.parser.parseCharacterFormat(styleObject.characterFormat, style.characterFormat, false);
                    element.blazor__instance.parser.parseParagraphFormat(styleObject.paragraphFormat, style.paragraphFormat);
                    style.link = (type.indexOf('Linked(Paragraph and Character)') !== -1) ? this.createLinkStyle(documentHelper, styleName, style, isEdit) : undefined;
                }
                documentHelper.owner.isShiftingEnabled = true;
                documentHelper.owner.editorModule.layoutWholeDocument();
                documentHelper.owner.isShiftingEnabled = false;
            }
            else {
                var tmpStyle = type === 'Character' ? new WCharacterStyle() : new WParagraphStyle();
                var format = new WCharacterFormat();
                if (!isNullOrUndefined(styleObject.characterFormat)) {
                    format.bold = styleObject.characterFormat.bold;
                    format.fontSize = styleObject.characterFormat.fontSize;
                    format.fontFamily = styleObject.characterFormat.fontFamily;
                    format.italic = styleObject.characterFormat.italic;
                    format.baselineAlignment = styleObject.characterFormat.baselineAlignment;
                    format.underline = styleObject.characterFormat.underline;
                    format.fontColor = styleObject.characterFormat.fontColor;
                    format.highlightColor = styleObject.characterFormat.highlightColor;
                    format.strikethrough = styleObject.characterFormat.strikethrough;
                    format.allCaps = styleObject.characterFormat.allCaps;
                }
                styleObject.characterFormat = format;
                var paraFormat = new WParagraphFormat();
                if (!isNullOrUndefined(styleObject.paragraphFormat)) {
                    paraFormat.leftIndent = styleObject.paragraphFormat.leftIndent;
                    paraFormat.rightIndent = styleObject.paragraphFormat.rightIndent;
                    paraFormat.firstLineIndent = styleObject.paragraphFormat.firstLineIndent;
                    paraFormat.lineSpacing = styleObject.paragraphFormat.lineSpacing;
                    paraFormat.lineSpacingType = styleObject.paragraphFormat.lineSpacingType;
                    paraFormat.textAlignment = styleObject.paragraphFormat.textAlignment;
                    paraFormat.beforeSpacing = styleObject.paragraphFormat.beforeSpacing;
                    paraFormat.afterSpacing = styleObject.paragraphFormat.afterSpacing;
                    paraFormat.bidi = styleObject.paragraphFormat.bidi;
                    paraFormat.contextualSpacing = styleObject.paragraphFormat.contextualSpacing;
                }
                styleObject.paragraphFormat = paraFormat;
                tmpStyle.copyStyle(styleObject);
                var basedOnInfo = documentHelper.styles.findByName(basedOn);
                if (type === 'Paragraph' || type === 'Linked(Paragraph and Character)') {
                    if (styleName === followStyle) {
                        tmpStyle.next = tmpStyle;
                    }
                    else {
                        tmpStyle.next = documentHelper.styles.findByName(followStyle);
                    }
                }
                tmpStyle.link = type === 'Linked(Paragraph and Character)' ? this.createLinkStyle(styleName) : undefined;
                tmpStyle.type = type === 'Character' ? 'Character' : 'Paragraph';
                tmpStyle.name = styleName;
                tmpStyle.basedOn = basedOnInfo;
                documentHelper.styles.push(tmpStyle);
                name_1 = styleName;
                documentHelper.owner.editorModule.applyStyle(name_1);
            }
            documentHelper.updateFocus();
        }
        else {
            throw new Error('Enter valid Style name');
        }
        documentHelper.updateFocus();
    },
    createLinkStyle: function (documentHelper, name, style, isEdit) {
        var charStyle;
        if (isEdit) {
            charStyle = documentHelper.styles.findByName((name + ' Char'), 'Character');
        }
        else {
            charStyle = new WCharacterStyle();
        }
        charStyle.type = 'Character';
        charStyle.name = name + ' Char';
        charStyle.characterFormat = style.characterFormat.cloneFormat();
        charStyle.basedOn = style.basedOn;
        if (!isEdit) {
            documentHelper.styles.push(charStyle);
        }
        return documentHelper.styles.findByName(charStyle.name, 'Character');
    }
};
export default DocumentEditor;
