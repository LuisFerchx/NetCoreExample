import { EventHandler } from '@syncfusion/ej2-base';
import { formatUnit } from '@syncfusion/ej2-base';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
var SfDocumentEditorContainer = (function () {
    function SfDocumentEditorContainer(element, options, editorOptions, dotnetRef) {
        this.previousContext = '';
        this.showHeaderProperties = true;
        this.element = element;
        if (isNullOrUndefined(element)) {
            return;
        }
        if (!isNullOrUndefined(element)) {
            this.element.blazor__instance = this;
        }
        this.dotNetRef = dotnetRef;
        this.element = element;
        this.options = options;
        this.editorOptions = editorOptions;
        this.updateOptions(options);
    }
    Object.defineProperty(SfDocumentEditorContainer.prototype, "documentEditor", {
        get: function () {
            return this.documentEditorInternal;
        },
        enumerable: true,
        configurable: true
    });
    SfDocumentEditorContainer.prototype.updateOptions = function (options) {
        this.showPropertiesPane = options.showPropertiesPane;
        this.currentUser = options.currentUser;
        this.enableComment = options.enableComment;
        this.enableLocalPaste = options.enableLocalPaste;
        this.enableSpellCheck = options.enableSpellCheck;
        this.enableTrackChanges = options.enableTrackChanges;
        this.height = options.height;
        this.serviceUrl = options.serviceUrl;
        this.userColor = options.userColor;
        this.width = options.width;
        this.zIndex = options.zIndex;
        this.requiredModules();
    };
    SfDocumentEditorContainer.prototype.setOptions = function (newOptions, options) {
        for (var _i = 0, _a = Object.keys(newOptions); _i < _a.length; _i++) {
            var prop = _a[_i];
            var value = newOptions[prop];
            if (!isNullOrUndefined(value)) {
                switch (prop) {
                    case "zoomFactor":
                        this.documentEditor.zoomFactor = value;
                        this.documentEditor.onPropertyChanged({ "zoomFactor": value }, null);
                        break;
                    case "layoutType":
                        this.documentEditor.layoutType = value;
                        this.documentEditor.onPropertyChanged({ "layoutType": value }, null);
                        break;
                    case "enableTrackChanges":
                        this.enableTrackChanges = value;
                        this.documentEditor.enableTrackChanges = value;
                        this.documentEditor.showRevisions = value;
                        this.documentEditor.onPropertyChanged({ "enableTrackChanges": value }, null);
                        this.documentEditor.onPropertyChanged({ "showRevisions": value }, null);
                        break;
                    case "restrictEditing":
                        this.restrictEditing = value;
                        this.documentEditor.isReadOnly = value;
                        this.documentEditor.onPropertyChanged({ "isReadOnly": value }, null);
                        break;
                    case "enableLocalPaste":
                        this.enableLocalPaste = value;
                        this.documentEditor.enableLocalPaste = value;
                        this.documentEditor.onPropertyChanged({ "enableLocalPaste": value }, null);
                        break;
                }
            }
        }
    };
    SfDocumentEditorContainer.prototype.getModuleName = function () {
        return 'DocumentEditorContainer';
    };
    SfDocumentEditorContainer.prototype.onPropertyChanged = function (newModel, oldModel) {
        for (var _i = 0, _a = Object.keys(newModel); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'restrictEditing':
                    this.documentEditor.isReadOnly = newModel.restrictEditing;
                    break;
                case 'showPropertiesPane':
                    this.showHidePropertiesPane(newModel.showPropertiesPane);
                    break;
                case 'enableTrackChanges':
                    if (this.documentEditor) {
                        this.documentEditor.enableTrackChanges = newModel.enableTrackChanges;
                        this.documentEditor.showRevisions = newModel.enableTrackChanges;
                        this.documentEditor.resize();
                    }
                    break;
                case 'enableLocalPaste':
                    if (this.documentEditor) {
                        this.documentEditor.enableLocalPaste = newModel.enableLocalPaste;
                    }
                    break;
                case 'serviceUrl':
                    if (this.documentEditor) {
                        this.documentEditor.serviceUrl = newModel.serviceUrl;
                    }
                    break;
                case 'serverActionSettings':
                    if (this.documentEditor) {
                        this.setserverActionSettings();
                    }
                    break;
                case 'zIndex':
                    if (this.documentEditor) {
                        this.documentEditor.zIndex = newModel.zIndex;
                    }
                    break;
                case 'headers':
                    break;
                case 'locale':
                case 'enableRtl':
                    break;
                case 'enableComment':
                    if (this.documentEditor) {
                        this.documentEditor.enableComment = newModel.enableComment;
                    }
                    break;
                case 'enableSpellCheck':
                    if (this.documentEditor) {
                        this.documentEditor.enableSpellCheck = newModel.enableSpellCheck;
                    }
                    break;
                case 'documentEditorSettings':
                    if (this.documentEditor) {
                        this.customizeDocumentEditorSettings();
                    }
                    break;
                case 'toolbarItems':
                    break;
                case 'currentUser':
                    if (this.documentEditor) {
                        this.documentEditor.currentUser = newModel.currentUser;
                    }
                    break;
                case 'userColor':
                    if (this.documentEditor) {
                        this.documentEditor.userColor = newModel.userColor;
                    }
                    break;
                case 'layoutType':
                    if (this.documentEditor) {
                        this.documentEditor.layoutType = newModel.layoutType;
                    }
                    break;
                case 'enableToolbar':
                    if (this.documentEditor) {
                        this.documentEditor.resize();
                    }
                    break;
                case 'height':
                    this.element.style.height = formatUnit(this.height);
                    if (this.documentEditor) {
                        this.documentEditor.resize();
                    }
                    break;
                case 'width':
                    this.element.style.width = formatUnit(this.width);
                    if (this.documentEditor) {
                        this.documentEditor.resize();
                    }
                    break;
            }
        }
    };
    SfDocumentEditorContainer.prototype.preRender = function () {
    };
    SfDocumentEditorContainer.prototype.render = function (element) {
        if (this.height !== '') {
            this.element.style.height = formatUnit(this.height);
        }
        if (this.width !== '') {
            this.element.style.width = formatUnit(this.width);
        }
        this.element.style.minHeight = '320px';
        this.initializeDocumentEditor(element);
        this.setserverActionSettings();
        this.customizeDocumentEditorSettings();
    };
    SfDocumentEditorContainer.prototype.setFormat = function () {
    };
    SfDocumentEditorContainer.prototype.setserverActionSettings = function () {
    };
    SfDocumentEditorContainer.prototype.customizeDocumentEditorSettings = function () {
    };
    SfDocumentEditorContainer.prototype.getPersistData = function () {
        return 'documenteditor-container';
    };
    SfDocumentEditorContainer.prototype.requiredModules = function () {
        var modules = [];
        if (this.enableToolbar) {
            modules.push({
                member: 'toolbar', args: [this]
            });
        }
        return modules;
    };
    SfDocumentEditorContainer.prototype.initializeDocumentEditor = function (element) {
        var documentEditorTarget = element;
        this.documentEditorInternal = element.blazor__instance;
        EventHandler.add(documentEditorTarget, 'selectionChange', this.onSelectionChange, this);
        this.documentEditor.enableAllModules();
        this.documentEditor.enableComment = this.enableComment;
        this.setFormat();
        this.documentEditor.resize();
    };
    SfDocumentEditorContainer.prototype.showHidePropertiesPane = function (show) {
        if (this.showPropertiesPane) {
            this.showPropertiesPaneOnSelection();
        }
        this.documentEditor.resize();
    };
    SfDocumentEditorContainer.prototype.onContentChange = function () {
    };
    SfDocumentEditorContainer.prototype.onDocumentChange = function () {
        this.enableTrackChanges = this.documentEditor.enableTrackChanges;
    };
    SfDocumentEditorContainer.prototype.onSelectionChange = function () {
        this.showPropertiesPaneOnSelection();
    };
    SfDocumentEditorContainer.prototype.showPropertiesPaneOnSelection = function () {
        var currentContext = this.documentEditor.selection.contextType;
        var isInHeaderFooter = currentContext.indexOf('Header') >= 0
            || currentContext.indexOf('Footer') >= 0;
        if (!isInHeaderFooter) {
            this.showHeaderProperties = true;
        }
        if (!this.showPropertiesPane) {
            this.showHidePropertiesPane(false);
        }
        else {
            if (isInHeaderFooter && this.showHeaderProperties) {
                this.showProperties('headerfooter');
            }
            else if (currentContext.indexOf('List') >= 0 || currentContext.indexOf('Text') >= 0
                && currentContext.indexOf('Table') < 0) {
                this.showProperties('text');
            }
            else if (currentContext.indexOf('Image') >= 0) {
                this.showProperties('image');
            }
            else if (currentContext.indexOf('TableOfContents') >= 0) {
                this.showProperties('toc');
            }
            else if (currentContext.indexOf('Table') >= 0) {
                this.showProperties('table');
            }
        }
        this.previousContext = this.documentEditor.selection.contextType;
    };
    SfDocumentEditorContainer.prototype.showProperties = function (property) {
        this.textProperties.showTextProperties(property === 'text');
        this.tableProperties.showTableProperties(property === 'table');
        this.imageProperties.showImageProperties(property === 'image');
        this.headerFooterProperties.showHeaderFooterPane(property === 'headerfooter');
        this.tocProperties.showTocPane(property === 'toc');
    };
    SfDocumentEditorContainer.prototype.destroy = function () {
        if (this.propertiesPaneContainer && this.editorContainer.parentElement) {
            this.propertiesPaneContainer.innerHTML = '';
            this.propertiesPaneContainer.parentElement.removeChild(this.propertiesPaneContainer);
        }
        this.propertiesPaneContainer = undefined;
        if (this.editorContainer && this.editorContainer.parentElement) {
            this.editorContainer.innerHTML = '';
            this.editorContainer.parentElement.removeChild(this.editorContainer);
        }
        if (this.statusBarElement && this.statusBarElement.parentElement) {
            this.statusBarElement.innerHTML = '';
            this.statusBarElement.parentElement.removeChild(this.statusBarElement);
        }
        if (this.containerTarget && this.containerTarget.parentElement) {
            this.containerTarget.innerHTML = '';
            this.containerTarget.parentElement.removeChild(this.containerTarget);
        }
        this.containerTarget = undefined;
        this.statusBarElement = undefined;
        this.editorContainer = undefined;
    };
    return SfDocumentEditorContainer;
}());
export { SfDocumentEditorContainer };
