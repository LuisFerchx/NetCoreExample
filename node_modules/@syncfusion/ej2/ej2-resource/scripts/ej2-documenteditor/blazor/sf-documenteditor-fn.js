import { isBlazor, formatUnit } from '@syncfusion/ej2-base';
import { isNullOrUndefined, Browser, EventHandler } from '@syncfusion/ej2-base';
import { Save } from '@syncfusion/ej2-file-utils';
import { LayoutViewer, PageLayoutViewer, WebLayoutViewer } from './index';
import { Print } from './index';
import { BodyWidget, ParagraphWidget } from './index';
import { WSectionFormat, WParagraphFormat, WCharacterFormat } from './index';
import { SfdtReader } from './index';
import { Selection } from './index';
import { Editor, EditorHistory } from './index';
import { WStyles } from './document-editor/index';
import { Search } from './index';
import { OptionsPane } from './index';
import { WordExport } from './index';
import { TextExport } from './index';
import { ImageResizer } from './index';
import { SfdtExport } from './index';
import { DocumentHelper } from './index';
import { DropDownFormField, TextFormField, CheckBoxFormField, FieldElementBox } from './index';
import { RevisionCollection } from './index';
var SfDocumentEditor = (function () {
    function SfDocumentEditor(element, dotnetRef, options) {
        this.enableHeaderFooterIn = false;
        this.isShiftingEnabled = false;
        this.isLayoutEnabled = true;
        this.isPastingContent = false;
        this.parser = undefined;
        this.disableHistoryIn = false;
        this.findResultsList = undefined;
        this.defaultLocale = {};
        this.imageResizerModule = undefined;
        this.zoomFactor = 1;
        this.dotNetRef = dotnetRef;
        if (!isNullOrUndefined(element)) {
            element.blazor__instance = this;
        }
        this.element = element;
        this.documentHelper = new DocumentHelper(this);
        if (!isNullOrUndefined(options)) {
            this.options = options;
            this.updateOptions(options);
        }
        if (this.layoutType === 'Pages') {
            this.viewer = new PageLayoutViewer(this);
        }
        else {
            this.viewer = new WebLayoutViewer(this);
        }
    }
    Object.defineProperty(SfDocumentEditor.prototype, "enableHeaderAndFooter", {
        get: function () {
            return this.enableHeaderFooterIn;
        },
        set: function (value) {
            this.enableHeaderFooterIn = value;
            if (!value && this.selection && this.selection.isWebLayout) {
                this.selection.isWebLayout = false;
            }
            this.viewer.updateScrollBars();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "pageCount", {
        get: function () {
            if (!this.isDocumentLoaded || isNullOrUndefined(this.viewer) || this.viewer instanceof WebLayoutViewer) {
                return 1;
            }
            return this.documentHelper.pages.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "selection", {
        get: function () {
            return this.selectionModule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "editor", {
        get: function () {
            return this.editorModule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "editorHistory", {
        get: function () {
            return this.editorHistoryModule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "search", {
        get: function () {
            return this.searchModule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "spellChecker", {
        get: function () {
            return this.spellCheckerModule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "containerId", {
        get: function () {
            return this.element.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "isDocumentLoaded", {
        get: function () {
            return this.isDocumentLoadedIn;
        },
        set: function (value) {
            this.isDocumentLoadedIn = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "revisions", {
        get: function () {
            if (isNullOrUndefined(this.revisionsInternal)) {
                this.revisionsInternal = new RevisionCollection(this);
            }
            return this.revisionsInternal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "enableHistoryMode", {
        get: function () {
            return this.enableEditorHistory && !isNullOrUndefined(this.editorHistoryModule);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "documentStart", {
        get: function () {
            if (!isNullOrUndefined(this.selectionModule)) {
                return this.selection.getDocumentStart();
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "documentEnd", {
        get: function () {
            if (!isNullOrUndefined(this.selectionModule)) {
                return this.selection.getDocumentEnd();
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "isReadOnlyMode", {
        get: function () {
            return this.isReadOnly || isNullOrUndefined(this.editorModule)
                || isNullOrUndefined(this.selectionModule) || !isNullOrUndefined(this.editor) && this.editor.restrictEditing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "isSpellCheck", {
        get: function () {
            return this.enableSpellCheck && this.spellChecker.enableSpellCheck;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SfDocumentEditor.prototype, "enableImageResizerMode", {
        get: function () {
            return this.enableImageResizer && !isNullOrUndefined(this.imageResizerModule);
        },
        enumerable: true,
        configurable: true
    });
    SfDocumentEditor.prototype.updateOptions = function (options) {
        this.acceptTab = options.acceptTab;
        this.currentUser = options.currentUser;
        this.documentName = options.documentName;
        this.enableBookmarkDialog = options.enableBookmarkDialog;
        this.enableBordersAndShadingDialog = options.enableBordersAndShadingDialog;
        this.enableComment = options.enableComment;
        this.enableContextMenu = options.enableContextMenu;
        this.enableCursorOnReadOnly = options.enableCursorOnReadOnly;
        this.enableEditor = options.enableEditor;
        this.enableEditorHistory = options.enableEditorHistory;
        this.enableFontDialog = options.enableFontDialog;
        this.enableFormField = options.enableFormField;
        this.enableHyperlinkDialog = options.enableHyperlinkDialog;
        this.enableImageResizer = options.enableImageResizer;
        this.enableListDialog = options.enableListDialog;
        this.enableLocalPaste = options.enableLocalPaste;
        this.enableOptionsPane = options.enableOptionsPane;
        this.enablePageSetupDialog = options.enablePageSetupDialog;
        this.enableParagraphDialog = options.enableParagraphDialog;
        this.enablePrint = options.enablePrint;
        this.enableSearch = options.enableSearch;
        this.enableSelection = options.enableSelection;
        this.enableSfdtExport = options.enableSfdtExport;
        this.enableSpellCheck = options.enableSpellCheck;
        this.enableStyleDialog = options.enableStyleDialog;
        this.enableTableDialog = options.enableTableDialog;
        this.enableTableOfContentsDialog = options.enableTableOfContentsDialog;
        this.enableTableOptionsDialog = options.enableTableOptionsDialog;
        this.enableTextExport = options.enableTextExport;
        this.enableTrackChanges = options.enableTrackChanges;
        this.enableWordExport = options.enableWordExport;
        this.headers = options.headers ? options.headers : [];
        this.height = options.height;
        this.isReadOnly = options.isReadOnly;
        this.pageGap = options.pageGap;
        this.pageOutline = options.pageOutline;
        this.serviceUrl = options.serviceUrl;
        this.showComments = options.showComments;
        this.showRevisions = options.showRevisions;
        this.useCtrlClickToFollowHyperlink = options.useCtrlClickToFollowHyperlink;
        this.userColor = options.userColor;
        this.width = options.width;
        this.zIndex = options.zIndex;
        this.zoomFactor = options.zoomFactor;
        this.layoutType = options.layoutType;
        this.defaultPasteOption = options.defaultPasteOption;
        this.requiredModules();
    };
    SfDocumentEditor.prototype.setOptions = function (model, options, update) {
        var _this = this;
        for (var _i = 0, _a = Object.keys(model); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'zoomFactor':
                    if (options.zoomFactor != model.zoomFactor) {
                        this.zoomFactor = model.zoomFactor;
                        if (this.documentHelper) {
                            this.documentHelper.zoomFactor = model.zoomFactor;
                        }
                    }
                    break;
                case 'layoutType':
                    if (this.selection && this.selection.isWebLayout) {
                        break;
                    }
                    if (options.layoutType != model.layoutType) {
                        this.layoutType = model.layoutType;
                        this.viewer.destroy();
                        if (this.layoutType === 'Pages') {
                            this.viewer = new PageLayoutViewer(this);
                        }
                        else {
                            if (this.enableHeaderAndFooter === true) {
                                this.selection.closeHeaderFooter();
                            }
                            this.viewer = new WebLayoutViewer(this);
                        }
                        this.editor.layoutWholeDocument(true);
                        setTimeout(function () { _this.fireViewChange(); }, 200);
                    }
                    break;
                case 'locale':
                    break;
                case 'isReadOnly':
                    this.isReadOnly = model.isReadOnly;
                    break;
                case 'currentUser':
                    if (options.currentUser != model.currentUser) {
                        this.currentUser = model.currentUser;
                        if (this.selection && this.documentHelper.isDocumentProtected) {
                            this.selection.highlightEditRegion();
                        }
                    }
                    break;
                case 'userColor':
                    if (options.userColor != model.userColor) {
                        this.userColor = model.userColor;
                        if (this.selection && this.documentHelper.isDocumentProtected) {
                            this.selection.highlightEditRegion();
                        }
                    }
                    break;
                case 'pageGap':
                    if (options.pageGap != model.pageGap) {
                        this.pageGap = model.pageGap;
                        this.viewer.updateScrollBars();
                    }
                    break;
                case 'pageOutline':
                    if (options.pageOutline != model.pageOutline) {
                        this.pageOutline = model.pageOutline;
                        this.viewer.updateScrollBars();
                    }
                    break;
                case 'zIndex':
                    break;
                case 'showComments':
                    break;
                case 'enableRtl':
                    break;
                case 'enableComment':
                    break;
                case 'showRevisions':
                    break;
                case 'documentEditorSettings':
                    this.viewer.updateScrollBars();
                    break;
                case 'height':
                    if (options.height != model.height) {
                        this.height = model.height;
                        this.element.style.height = formatUnit(this.height);
                        this.resize();
                    }
                    break;
                case 'width':
                    if (options.width != model.width) {
                        this.width = model.width;
                        this.element.style.width = formatUnit(this.width);
                        this.resize();
                    }
                    break;
            }
        }
        if (update) {
            this.updateOptions(model);
        }
    };
    SfDocumentEditor.prototype.preRender = function () {
        this.findResultsList = [];
    };
    SfDocumentEditor.prototype.render = function () {
        if (!isNullOrUndefined(this.element)) {
            var container = this.element;
            container.style.minHeight = '200px';
            container.style.minWidth = '200px';
            if (this.height !== '') {
                this.element.style.height = formatUnit(this.height);
            }
            if (this.width !== '') {
                this.element.style.width = formatUnit(this.width);
            }
        }
        this.documentHelper.initializeComponents();
        this.openBlank();
    };
    SfDocumentEditor.prototype.onPropertyChanged = function (model, oldProp) {
        var _this = this;
        for (var _i = 0, _a = Object.keys(model); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'zoomFactor':
                    if (this.viewer) {
                        this.documentHelper.zoomFactor = model.zoomFactor;
                    }
                    break;
                case 'layoutType':
                    if (this.selection && this.selection.isWebLayout) {
                        break;
                    }
                    this.viewer.destroy();
                    if (this.layoutType === 'Pages') {
                        this.viewer = new PageLayoutViewer(this);
                    }
                    else {
                        if (this.enableHeaderAndFooter === true) {
                            this.selection.closeHeaderFooter();
                        }
                        this.viewer = new WebLayoutViewer(this);
                    }
                    this.editor.layoutWholeDocument(true);
                    setTimeout(function () { _this.fireViewChange(); }, 200);
                    break;
                case 'locale':
                    break;
                case 'isReadOnly':
                    this.isReadOnly = model.isReadOnly;
                    break;
                case 'currentUser':
                case 'userColor':
                    if (this.selection && this.documentHelper.isDocumentProtected) {
                        this.selection.highlightEditRegion();
                    }
                    break;
                case 'pageGap':
                case 'pageOutline':
                    this.viewer.updateScrollBars();
                    break;
                case 'zIndex':
                    break;
                case 'showComments':
                    if (this.viewer) {
                        this.documentHelper.showComments(model.showComments);
                    }
                    break;
                case 'enableRtl':
                    break;
                case 'enableComment':
                    if (this.viewer && this.showComments) {
                        this.showComments = this.showComments ? this.enableComment : false;
                        this.documentHelper.showComments(model.enableComment);
                    }
                    this.viewer.updateScrollBars();
                    break;
                case 'showRevisions':
                    if (this.viewer) {
                        this.documentHelper.showRevisions(model.showRevisions);
                    }
                    this.viewer.updateScrollBars();
                    break;
                case 'documentEditorSettings':
                    this.viewer.updateScrollBars();
                    break;
                case 'height':
                    this.element.style.height = formatUnit(this.height);
                    this.resize();
                    break;
                case 'width':
                    this.element.style.width = formatUnit(this.width);
                    this.resize();
                    break;
            }
        }
    };
    SfDocumentEditor.prototype.setDefaultCharacterFormat = function (characterFormat) {
        this.characterFormat = characterFormat;
    };
    SfDocumentEditor.prototype.setDefaultParagraphFormat = function (paragraphFormat) {
        this.paragraphFormat = paragraphFormat;
    };
    SfDocumentEditor.prototype.setDefaultSectionFormat = function (sectionFormat) {
        this.sectionFormat = sectionFormat;
    };
    SfDocumentEditor.prototype.getPersistData = function () {
        return 'documenteditor';
    };
    SfDocumentEditor.prototype.clearPreservedCollectionsInViewer = function () {
        if (this.viewer instanceof LayoutViewer) {
            this.documentHelper.clearDocumentItems();
        }
    };
    SfDocumentEditor.prototype.getDocumentEditorElement = function () {
        return this.element;
    };
    SfDocumentEditor.prototype.fireContentChange = function () {
        var _this = this;
        if (this.contentChangeTimer) {
            clearTimeout(this.contentChangeTimer);
        }
        this.contentChangeTimer = setTimeout(function () {
            var eventArgs = {
                canUndo: _this.editorHistory.canUndo(),
                canRedo: _this.editorHistory.canRedo(),
                pageCount: _this.pageCount
            };
            _this.dotNetRef.invokeMethodAsync('ContentChangeInternal', eventArgs);
        }, 200);
        this.dotNetRef.invokeMethodAsync('ContentChange');
    };
    SfDocumentEditor.prototype.fireDocumentChange = function () {
        var args = { enableTrackChanges: this.enableTrackChanges };
        this.dotNetRef.invokeMethodAsync('DocumentChange', args);
        this.dotNetRef.invokeMethodAsync('UpdateCommentsCollection', this.fetchComments());
    };
    SfDocumentEditor.prototype.showFormFieldPopup = function (formFieldInfo) {
        this.dotNetRef.invokeMethodAsync('ShowFormFieldPopup', formFieldInfo.type, JSON.stringify(formFieldInfo), true);
    };
    SfDocumentEditor.prototype.hideFormFieldPopup = function () {
        this.dotNetRef.invokeMethodAsync('ShowFormFieldPopup', "", "", false);
    };
    SfDocumentEditor.prototype.fireSelectionChange = function () {
        var _this = this;
        if (!this.documentHelper.isCompositionStart && Browser.isDevice && this.editorModule) {
            this.editorModule.predictText();
        }
        if (this.editor && this.editor.isInsertingTOC) {
            return;
        }
        var eventArgs = { source: isBlazor() ? null : this };
        EventHandler.trigger(this.element, 'selectionChange', eventArgs);
        if (this.selectionTimer) {
            clearTimeout(this.selectionTimer);
        }
        this.selectionTimer = setTimeout(function () {
            _this.fireSelectionChangeInternal();
        }, 200);
        this.dotNetRef.invokeMethodAsync("SelectionChange");
    };
    SfDocumentEditor.prototype.fireSelectionChangeInternal = function () {
        this.dotNetRef.invokeMethodAsync("SelectionChangeInternal", this.getCurrentContext());
    };
    SfDocumentEditor.prototype.isContentProtected = function () {
        var isProtectedDocument = this.documentHelper.isDocumentProtected;
        var allowFormatting = false;
        var isSelectionInProtectecRegion = false;
        var protectionType = "NoProtection";
        if (isProtectedDocument) {
            allowFormatting = isProtectedDocument && this.documentHelper.restrictFormatting;
            isSelectionInProtectecRegion = this.editor.restrictEditing;
            protectionType = this.documentHelper.protectionType;
        }
        var isReadOnly = this.isReadOnly;
        var protectionInfo = {
            isDocumentProtected: isProtectedDocument,
            allowFormatting: allowFormatting,
            isInProtectecRegion: isSelectionInProtectecRegion,
            isReadOnly: isReadOnly,
            protectionType: protectionType
        };
        return protectionInfo;
    };
    SfDocumentEditor.prototype.getCurrentContext = function () {
        var context = {};
        context.characterFormat = this.fetchCharacterFormat(this.selection.characterFormat);
        context.paragraphFormat = this.fetchParagraphFormat(this.selection.paragraphFormat);
        context.sectionFormat = this.fetchSectionFormat(this.selection.sectionFormat);
        if (this.selection.contextType.indexOf('Table') >= 0) {
            context.tableFormat = this.fetchTableFormat(this.selection.tableFormat);
            context.rowFormat = this.fetchRowFormat(this.selection.rowFormat);
            context.cellFormat = this.fetchCellFormat(this.selection.cellFormat);
        }
        if (this.selection.contextType.indexOf('Image') >= 0) {
            context.imageFormat = this.fetchImageFormat();
        }
        var data = {};
        var contextTypeInternal = this.selection.contextType;
        var selection = this.documentHelper.selection;
        var isCrossRefField = false;
        var field = selection.getHyperlinkField();
        data.isHideComment = this.documentHelper.owner.isReadOnlyMode || this.documentHelper.owner.enableHeaderAndFooter || !this.documentHelper.owner.enableComment;
        if (field instanceof FieldElementBox && selection.isReferenceField(field)) {
            isCrossRefField = true;
            if ((this.documentHelper.protectionType === 'FormFieldsOnly' || !this.documentHelper.owner.isReadOnlyMode)) {
                data.canUpdateField = true;
            }
        }
        data.contextType = contextTypeInternal;
        data.isReadOnly = this.documentHelper.owner.isReadOnlyMode;
        var isEmpty = this.selection.isEmpty;
        data.isEmpty = isEmpty;
        if (contextTypeInternal === 'TableOfContents') {
            data.isTableOfContents = true;
        }
        else {
            var start = selection.start;
            var end = selection.end;
            if (selection.contextType === 'List' && selection.getListLevel(start.paragraph).listLevelPattern !== 'Bullet') {
                data.isList = true;
            }
            var isCellOrRowSelected = start.paragraph.isInsideTable && (!end.paragraph.isInsideTable
                || start.paragraph.associatedCell !== end.paragraph.associatedCell
                || this.documentHelper.selection.isCellSelected(start.paragraph.associatedCell, start, end));
            if (isCellOrRowSelected) {
                data.isHyperlinkEnabled = true;
            }
            else {
                data.isHyperlinkEnabled = false;
            }
            if (field instanceof FieldElementBox && !selection.isImageField() && !isCrossRefField) {
                data.editHyperLink = true;
            }
            else {
                data.editHyperLink = false;
            }
            data.formFieldType = "";
            if (selection.isFormField()) {
                var inline = this.documentHelper.selection.getCurrentFormField();
                if (inline instanceof FieldElementBox) {
                    if (inline.formFieldData instanceof TextFormField) {
                        data.formFieldType = "Text";
                    }
                    else if (inline.formFieldData instanceof CheckBoxFormField) {
                        data.formFieldType = "CheckBox";
                    }
                    else if (inline.formFieldData instanceof DropDownFormField) {
                        data.formFieldType = "DropDown";
                    }
                }
            }
            if (field instanceof FieldElementBox && isCrossRefField) {
                data.canUpdateField = true;
            }
        }
        if (this.documentHelper.owner.selection.start.paragraph.isInsideTable
            && this.documentHelper.owner.selection.end.paragraph.isInsideTable) {
            data.isTable = true;
            if (this.editor.canMergeCells()) {
                data.canMergeCells = true;
            }
            data.isTableSelected = this.documentHelper.selection.isTableSelected();
        }
        else {
            data.isFont = contextTypeInternal !== 'Image' ? true : false;
        }
        if (this.enableTrackChanges && this.documentHelper.selection.hasRevisions()) {
            data.canAcceptChange = true;
        }
        data.isElementBox = this.isSpellCheck && this.hasElementBox();
        context.selectionContext = data;
        context.protectionInfo = this.isContentProtected();
        return context;
    };
    SfDocumentEditor.prototype.fetchImageFormat = function () {
        var imageFormat = {};
        imageFormat.width = this.selection.imageFormat.width;
        imageFormat.height = this.selection.imageFormat.height;
        return imageFormat;
    };
    SfDocumentEditor.prototype.fetchCharacterFormat = function (format) {
        var select = {};
        select.bold = format.bold;
        select.fontSize = format.fontSize;
        select.fontFamily = format.fontFamily;
        select.italic = format.italic;
        select.baselineAlignment = format.baselineAlignment;
        select.underline = format.underline;
        select.fontColor = format.fontColor;
        select.highlightColor = format.highlightColor;
        select.strikethrough = format.strikethrough;
        select.allCaps = format.allCaps;
        return select;
    };
    SfDocumentEditor.prototype.fetchParagraphFormat = function (format) {
        var select = {};
        select.leftIndent = format.leftIndent;
        select.rightIndent = format.rightIndent;
        select.firstLineIndent = format.firstLineIndent;
        select.lineSpacing = format.lineSpacing;
        select.lineSpacingType = format.lineSpacingType;
        select.textAlignment = format.textAlignment;
        select.beforeSpacing = format.beforeSpacing;
        select.afterSpacing = format.afterSpacing;
        select.bidi = format.bidi;
        select.contextualSpacing = format.contextualSpacing;
        select.styleName = format.styleName;
        if (!isNullOrUndefined(format.listFormat)) {
            select.listFormat = this.fetchListFormat(format.listFormat);
        }
        return select;
    };
    SfDocumentEditor.prototype.fetchListFormat = function (format) {
        var listFormat = {};
        var listIdValue = format.getValue('listId');
        if (!isNullOrUndefined(listIdValue)) {
            listFormat.listId = listIdValue;
        }
        var listLevelNumber = format.getValue('listLevelNumber');
        if (!isNullOrUndefined(listLevelNumber)) {
            listFormat.listLevelNumber = listLevelNumber;
        }
        return listFormat;
    };
    SfDocumentEditor.prototype.fetchTableFormat = function (format) {
        var select = {};
        select.topMargin = format.topMargin;
        select.bottomMargin = format.bottomMargin;
        select.leftMargin = format.leftMargin;
        select.rightMargin = format.rightMargin;
        select.leftIndent = format.leftIndent;
        select.background = format.background;
        select.tableAlignment = format.tableAlignment;
        select.cellSpacing = format.cellSpacing;
        select.bidi = format.bidi;
        select.preferredWidth = format.preferredWidth;
        select.preferredWidthType = format.preferredWidthType;
        select.borders = this.getTableBorder();
        select.shading = this.getTableShading();
        return select;
    };
    SfDocumentEditor.prototype.fetchCellFormat = function (format) {
        var select = {};
        select.topMargin = format.topMargin;
        select.bottomMargin = format.bottomMargin;
        select.leftMargin = format.leftMargin;
        select.rightMargin = format.rightMargin;
        select.verticalAlignment = format.verticalAlignment;
        select.background = format.background;
        select.preferredWidth = format.preferredWidth;
        select.preferredWidthType = format.preferredWidthType;
        select.canMerge = this.editor.canMergeCells();
        select.borders = this.getCellBorder();
        select.shading = this.getCellShading();
        return select;
    };
    SfDocumentEditor.prototype.fetchRowFormat = function (format) {
        var select = {};
        select.allowBreakAcrossPages = format.allowBreakAcrossPages;
        select.height = format.height;
        select.heightType = format.heightType;
        select.isHeader = format.isHeader;
        return select;
    };
    SfDocumentEditor.prototype.fetchList = function (lists, abstractList) {
        var list = {};
        list.listId = lists.listId;
        list.sourceListId = lists.sourceListId;
        list.abstractListId = lists.abstractListId;
        list.listLength = this.documentHelper.lists.length;
        list.abstractLength = this.documentHelper.abstractLists.length;
        return JSON.stringify(list);
    };
    SfDocumentEditor.prototype.hasElementBox = function () {
        var isElementBox = false;
        this.errorElementInfo = this.spellChecker.findCurretText();
        if (this.errorElementInfo.element) {
            isElementBox = true;
            this.spellChecker.currentContextInfo = this.errorElementInfo;
            this.errorElementInfo = this.spellChecker.retriveText();
        }
        return isElementBox;
    };
    SfDocumentEditor.prototype.fetchSectionFormat = function (format) {
        var select = {};
        select.topMargin = format.topMargin;
        select.bottomMargin = format.bottomMargin;
        select.leftMargin = format.leftMargin;
        select.rightMargin = format.rightMargin;
        select.pageHeight = format.pageHeight;
        select.pageWidth = format.pageWidth;
        select.footerDistance = format.footerDistance;
        select.headerDistance = format.headerDistance;
        select.differentFirstPage = format.differentFirstPage;
        select.differentOddAndEvenPages = format.differentOddAndEvenPages;
        return select;
    };
    SfDocumentEditor.prototype.fetchStyleValue = function (styleValues) {
        var style = {};
        style.name = styleValues.name;
        style.type = styleValues.type;
        style.paragraphFormat = this.fetchParagraphFormat(styleValues.paragraphFormat);
        style.characterFormat = this.fetchCharacterFormat(styleValues.characterFormat);
        style.next = styleValues.next.name;
        style.basedOn = styleValues.basedOn.name;
        style.link = styleValues.link.name;
        return JSON.stringify(style);
    };
    SfDocumentEditor.prototype.fetchComments = function () {
        var commentCollec = this.getComments();
        if (!isNullOrUndefined(commentCollec) && commentCollec.length > 0) {
            return JSON.stringify(commentCollec);
        }
        return "";
    };
    SfDocumentEditor.prototype.getComments = function (replyComments) {
        var commentObj = [];
        var commentCollec = replyComments ? replyComments : this.documentHelper.comments;
        if (!isNullOrUndefined(commentCollec) && commentCollec.length > 0) {
            for (var i = 0; i < commentCollec.length; i++) {
                var comment = {};
                var currentComment = commentCollec[i];
                comment.date = currentComment.date;
                comment.text = currentComment.text;
                comment.isReply = currentComment.isReply;
                comment.isResolved = currentComment.isResolved;
                comment.author = currentComment.author;
                comment.initial = currentComment.initial;
                comment.commentId = currentComment.commentId;
                comment.userColor = this.documentHelper.getAuthorColor(currentComment.author);
                if (currentComment.ownerComment && currentComment.ownerComment.commentId) {
                    comment.ownerCommentId = currentComment.ownerComment.commentId;
                }
                if (!replyComments) {
                    var reply = this.getComments(currentComment.replyComments);
                    if (reply && reply.length > 0) {
                        comment.replyComments = reply;
                    }
                }
                commentObj.push(comment);
            }
            return commentObj;
        }
        return undefined;
    };
    SfDocumentEditor.prototype.getCellBorder = function () {
        var cellBorder = {};
        if (!isNullOrUndefined(this.selection.start.paragraph.associatedCell)) {
            var border = this.selection.start.paragraph.associatedCell.cellFormat.borders;
            return this.sfdtExportModule.writeBorders(border);
        }
        return cellBorder;
    };
    SfDocumentEditor.prototype.getTableBorder = function () {
        var tableBorder = {};
        if (!isNullOrUndefined(this.selection.tableFormat.table)) {
            var border = this.selection.tableFormat.table.tableFormat.borders;
            return this.sfdtExportModule.writeBorders(border);
        }
        return tableBorder;
    };
    SfDocumentEditor.prototype.getCellShading = function () {
        var cellShading = {};
        if (!isNullOrUndefined(this.selection.tableFormat.table)) {
            var shading = this.selection.start.paragraph.associatedCell.cellFormat.shading;
            cellShading.backgroundColor = shading.backgroundColor;
            cellShading.foregroundColor = shading.foregroundColor;
            cellShading.textureStyle = shading.textureStyle;
        }
        return cellShading;
    };
    SfDocumentEditor.prototype.getTableShading = function () {
        var tableShading = {};
        if (!isNullOrUndefined(this.selection.start.paragraph.associatedCell)) {
            var shading = this.selection.start.paragraph.associatedCell.cellFormat.shading;
            tableShading.backgroundColor = shading.backgroundColor;
            tableShading.foregroundColor = shading.foregroundColor;
            tableShading.textureStyle = shading.textureStyle;
        }
        return tableShading;
    };
    SfDocumentEditor.prototype.applyCellOption = function (cellFormat) {
        this.documentHelper.owner.editorHistory.initComplexHistory(this.documentHelper.selection, 'CellMarginsSelection');
        this.documentHelper.owner.editorModule.initHistory('CellOptions');
        if (!isNullOrUndefined(this.documentHelper.selection.start.paragraph.associatedCell)) {
            var startTable = this.documentHelper.selection.start.paragraph.associatedCell.ownerTable;
            startTable = startTable.combineWidget(this.viewer);
            this.applyCellmarginsValue(this.documentHelper.selection.start.paragraph.associatedCell.ownerRow.combineWidget(this.viewer), this.documentHelper.selection.start, this.documentHelper.selection.end, cellFormat);
            this.documentHelper.owner.editorModule.reLayout(this.documentHelper.selection, false);
            if (!isNullOrUndefined(this.documentHelper.owner.editorHistory.currentHistoryInfo)) {
                this.documentHelper.owner.editorHistory.updateComplexHistory();
            }
        }
    };
    SfDocumentEditor.prototype.applyCellmarginsValue = function (row, start, end, cellFormat) {
        this.applyCellMarginsInternal(row, cellFormat);
        if (end.paragraph.associatedCell.ownerRow === row) {
            return;
        }
        var newRow = row.nextWidget;
        if (!isNullOrUndefined(newRow)) {
            this.applyCellmarginsValue(newRow, start, end, cellFormat);
        }
    };
    SfDocumentEditor.prototype.applyCellMarginsInternal = function (row, cellFormat) {
        if (!isNullOrUndefined(this.documentHelper.owner.editorHistory.currentBaseHistoryInfo)) {
            var currentFormat = row.childWidgets[0].cellFormat;
            cellFormat = this.documentHelper.owner.editorHistory.currentBaseHistoryInfo.addModifiedCellOptions(currentFormat, cellFormat, row.ownerTable);
        }
        if (!isNullOrUndefined(cellFormat)) {
            this.applyCellMarginsForCells(row, cellFormat);
        }
    };
    SfDocumentEditor.prototype.applyCellMarginsForCells = function (row, cellFormat) {
        var cells = row.childWidgets;
        for (var i = 0; i < cells.length; i++) {
            this.applySubCellMargins(cells[i].cellFormat, cellFormat);
        }
        this.calculateGridValue(cells[0].ownerTable);
    };
    SfDocumentEditor.prototype.applySubCellMargins = function (sourceFormat, cellFormat) {
        sourceFormat.leftMargin = cellFormat.leftMargin;
        sourceFormat.topMargin = cellFormat.topMargin;
        sourceFormat.rightMargin = cellFormat.rightMargin;
        sourceFormat.bottomMargin = cellFormat.bottomMargin;
    };
    SfDocumentEditor.prototype.calculateGridValue = function (table) {
        table.calculateGrid();
        table.isGridUpdated = false;
        table.buildTableColumns();
        table.isGridUpdated = true;
        this.documentHelper.selection.owner.isLayoutEnabled = true;
        this.documentHelper.layout.reLayoutTable(table);
        this.documentHelper.owner.editorModule.reLayout(this.documentHelper.selection);
        this.documentHelper.owner.editorModule.updateSelectionTextPosition(true);
        var history = this.documentHelper.owner.editorHistory;
        if (history && history.currentBaseHistoryInfo) {
            if (history.currentBaseHistoryInfo.modifiedProperties.length > 0) {
                history.currentBaseHistoryInfo.updateSelection();
            }
            history.updateHistory();
        }
        this.documentHelper.owner.editorModule.fireContentChange();
    };
    SfDocumentEditor.prototype.applyTableOption = function (tableFormat) {
        this.documentHelper.owner.editorHistory.initComplexHistory(this.documentHelper.selection, 'TableMarginsSelection');
        this.documentHelper.owner.editorModule.initHistory('TableOptions');
        if (!isNullOrUndefined(this.documentHelper.selection.start.currentWidget.paragraph.associatedCell)) {
            var ownerTable = this.documentHelper.selection.start.currentWidget.paragraph.associatedCell.ownerTable;
            ownerTable = ownerTable.combineWidget(this.viewer);
            var currentTableFormat = ownerTable.tableFormat;
            if (!isNullOrUndefined(this.documentHelper.owner.editorHistory.currentBaseHistoryInfo)) {
                this.documentHelper.owner.editorHistory.currentBaseHistoryInfo.addModifiedTableOptions(currentTableFormat);
            }
            currentTableFormat.cellSpacing = tableFormat.cellSpacing;
            currentTableFormat.leftMargin = tableFormat.leftMargin;
            currentTableFormat.topMargin = tableFormat.topMargin;
            currentTableFormat.rightMargin = tableFormat.rightMargin;
            currentTableFormat.bottomMargin = tableFormat.bottomMargin;
            this.calculateGridValue(ownerTable);
            if (!isNullOrUndefined(this.documentHelper.owner.editorHistory.currentHistoryInfo)) {
                this.documentHelper.owner.editorHistory.updateComplexHistory();
            }
        }
    };
    SfDocumentEditor.prototype.applyTableProperties = function (tableFormat, rowFormat, cellFormat) {
        this.documentHelper.owner.editorModule.initComplexHistory('TableProperties');
        this.documentHelper.owner.editorModule.onTableFormat(tableFormat);
        this.documentHelper.owner.editorModule.onRowFormat(rowFormat);
        this.documentHelper.owner.editorModule.onCellFormat(cellFormat);
        this.documentHelper.owner.editorHistory.updateComplexHistory();
    };
    SfDocumentEditor.prototype.enableRepeatHeader = function () {
        var selection = this.documentHelper.selection;
        var start = selection.start;
        var end = selection.end;
        if (!selection.isForward) {
            start = selection.end;
            end = selection.start;
        }
        var startCell = start.paragraph.associatedCell;
        var endCell = end.paragraph.associatedCell;
        return startCell.ownerRow.index === 0 && endCell.ownerTable.equals(startCell.ownerTable);
    };
    SfDocumentEditor.prototype.fireZoomFactorChange = function () {
        this.dotNetRef.invokeMethodAsync('ZoomFactorChange', this.documentHelper.zoomFactor);
    };
    SfDocumentEditor.prototype.fireBeformFieldFill = function () {
    };
    SfDocumentEditor.prototype.fireAfterFormFieldFill = function () {
    };
    SfDocumentEditor.prototype.fireServiceFailure = function (eventArgs) {
    };
    SfDocumentEditor.prototype.fireViewChange = function () {
        if (this.viewer && this.documentHelper.pages.length > 0) {
            if (this.viewer.visiblePages.length > 0) {
                var pages = this.viewer.visiblePages;
                var eventArgs = {
                    startPage: pages[0].index + 1,
                    endPage: pages[pages.length - 1].index + 1,
                };
                this.dotNetRef.invokeMethodAsync('ViewChange', JSON.stringify(eventArgs));
            }
        }
    };
    SfDocumentEditor.prototype.fireCustomContextMenuSelect = function (item) {
    };
    SfDocumentEditor.prototype.fireCustomContextMenuBeforeOpen = function (item) {
    };
    SfDocumentEditor.prototype.showParagraphDialog = function (paragraphFormat) {
    };
    SfDocumentEditor.prototype.showPageSetupDialog = function () {
    };
    SfDocumentEditor.prototype.showFontDialog = function (characterFormat) {
    };
    SfDocumentEditor.prototype.showCellOptionsDialog = function () {
    };
    SfDocumentEditor.prototype.showTableOptionsDialog = function () {
    };
    SfDocumentEditor.prototype.showTableDialog = function () {
    };
    SfDocumentEditor.prototype.showTableOfContentsDialog = function () {
    };
    SfDocumentEditor.prototype.showStyleDialog = function () {
    };
    SfDocumentEditor.prototype.showHyperlinkDialog = function () {
    };
    SfDocumentEditor.prototype.showBookmarkDialog = function () {
    };
    SfDocumentEditor.prototype.showStylesDialog = function () {
    };
    SfDocumentEditor.prototype.showListDialog = function () {
    };
    SfDocumentEditor.prototype.showTablePropertiesDialog = function () {
    };
    SfDocumentEditor.prototype.showBordersAndShadingDialog = function () {
    };
    SfDocumentEditor.prototype.requiredModules = function () {
        this.parser = new SfdtReader(this.documentHelper);
        if (this.enablePrint) {
            if (isNullOrUndefined(this.printModule)) {
                this.printModule = new Print();
            }
        }
        if (this.enableSfdtExport || this.enableWordExport || this.enableTextExport || this.enableSelection || this.enableEditor) {
            if (isNullOrUndefined(this.sfdtExportModule)) {
                this.sfdtExportModule = new SfdtExport(this.documentHelper);
            }
        }
        if (this.enableWordExport) {
            if (isNullOrUndefined(this.wordExportModule)) {
                this.wordExportModule = new WordExport();
            }
        }
        if (this.enableTextExport) {
            if (isNullOrUndefined(this.textExportModule)) {
                this.textExportModule = new TextExport();
            }
        }
        if (this.enableSelection || this.enableSearch || this.enableEditor) {
            if (isNullOrUndefined(this.selectionModule)) {
                this.selectionModule = new Selection(this);
            }
            if (this.enableContextMenu) {
            }
        }
        if (this.enableSearch) {
            if (isNullOrUndefined(this.searchModule)) {
                this.searchModule = new Search(this);
            }
            if (this.enableOptionsPane) {
                if (isNullOrUndefined(this.optionsPaneModule)) {
                    this.optionsPaneModule = new OptionsPane();
                }
            }
        }
        if (this.enableEditor) {
            if (isNullOrUndefined(this.editorModule)) {
                this.editorModule = new Editor(this.documentHelper);
            }
            if (this.enableImageResizer) {
                if (isNullOrUndefined(this.imageResizerModule)) {
                    this.imageResizerModule = new ImageResizer(this, this.documentHelper);
                }
            }
            if (this.enableEditorHistory) {
                if (isNullOrUndefined(this.editorHistoryModule)) {
                    this.editorHistoryModule = new EditorHistory(this);
                }
            }
            if (this.enableHyperlinkDialog) {
            }
            if (this.enableTableDialog) {
            }
            if (this.enableBookmarkDialog) {
            }
            if (this.enableTableOfContentsDialog) {
            }
            if (this.enablePageSetupDialog) {
            }
            if (this.enableStyleDialog) {
            }
            if (this.enableListDialog) {
            }
            if (this.enableParagraphDialog) {
            }
            if (this.enableFontDialog) {
            }
            if (this.enableTablePropertiesDialog) {
            }
            if (this.enableBordersAndShadingDialog) {
            }
            if (this.enableTableOptionsDialog) {
            }
            if (this.enableSpellCheck) {
            }
            if (this.enableFormField) {
            }
        }
    };
    SfDocumentEditor.prototype.open = function (sfdtText) {
        if (!isNullOrUndefined(this.viewer)) {
            this.showComments = false;
            this.clearPreservedCollectionsInViewer();
            this.documentHelper.userCollection.push('Everyone');
            this.documentHelper.lists = [];
            this.documentHelper.abstractLists = [];
            this.documentHelper.styles = new WStyles();
            this.documentHelper.cachedPages = [];
            this.showRevisions = false;
            if (this.isSpellCheck && !this.spellChecker.enableOptimizedSpellCheck) {
                this.documentHelper.triggerElementsOnLoading = true;
                this.documentHelper.triggerSpellCheck = true;
            }
            if (!isNullOrUndefined(sfdtText) && this.viewer) {
                this.documentHelper.onDocumentChanged(this.parser.convertJsonToDocument(sfdtText));
                if (this.editorModule) {
                    this.editorModule.intializeDefaultStyles();
                }
            }
            if (this.isSpellCheck && !this.spellChecker.enableOptimizedSpellCheck) {
                this.documentHelper.triggerElementsOnLoading = false;
                this.documentHelper.triggerSpellCheck = false;
            }
        }
    };
    SfDocumentEditor.prototype.scrollToPage = function (pageNumber) {
        if (isNullOrUndefined(this.viewer) || pageNumber < 1 || pageNumber > this.documentHelper.pages.length) {
            return false;
        }
        this.viewer.scrollToPage(pageNumber - 1);
        return true;
    };
    SfDocumentEditor.prototype.enableAllModules = function () {
        this.enablePrint = this.enableSfdtExport = this.enableWordExport = this.enableTextExport
            = this.enableSelection = this.enableContextMenu = this.enableSearch = this.enableOptionsPane
                = this.enableEditor = this.enableImageResizer = this.enableEditorHistory
                    = this.enableHyperlinkDialog = this.enableTableDialog = this.enableBookmarkDialog
                        = this.enableTableOfContentsDialog = this.enablePageSetupDialog = this.enableStyleDialog
                            = this.enableListDialog = this.enableParagraphDialog = this.enableFontDialog
                                = this.enableTablePropertiesDialog = this.enableBordersAndShadingDialog
                                    = this.enableTableOptionsDialog = this.enableComment = this.enableFormField = true;
        this.requiredModules();
    };
    SfDocumentEditor.prototype.resize = function (width, height) {
        if (this.documentHelper) {
            this.documentHelper.updateViewerSize();
        }
    };
    SfDocumentEditor.prototype.getFormFieldNames = function () {
        var formFieldNames = [];
        var formFields = this.documentHelper.formFields;
        for (var i = 0; i < formFields.length; i++) {
            if (formFields[i].formFieldData.name !== '') {
                formFieldNames.push(formFields[i].formFieldData.name);
            }
        }
        return formFieldNames;
    };
    SfDocumentEditor.prototype.getFormFieldInfo = function (name) {
        var formFields = this.documentHelper.formFields;
        for (var i = 0; i < formFields.length; i++) {
            if ((formFields[i].formFieldData.name === name) && (formFields[i].formFieldData.name !== '')) {
                return formFields[i].formFieldData.getFormFieldInfo();
            }
        }
        return undefined;
    };
    SfDocumentEditor.prototype.setFormFieldInfo = function (name, formFieldInfo) {
        var formFields = this.documentHelper.formFields;
        for (var i = 0; i < formFields.length; i++) {
            if ((formFields[i].formFieldData.name === name) && (formFields[i].formFieldData.name !== '')) {
                var currentField = formFields[i];
                if (this.selection) {
                    this.selection.selectFieldInternal(currentField);
                    if (this.editor) {
                        this.editor.setFormField(currentField, formFieldInfo);
                    }
                }
                return;
            }
        }
    };
    SfDocumentEditor.prototype.resetFormFields = function (name) {
        var formFields = this.documentHelper.formFields;
        for (var i = 0; i < formFields.length; i++) {
            if (isNullOrUndefined(name) || name === formFields[i].formFieldData.name) {
                if (formFields[i].formFieldData instanceof TextFormField) {
                    this.editor.updateFormField(formFields[i], formFields[i].formFieldData.defaultValue, true);
                }
                else if (formFields[i].formFieldData instanceof CheckBoxFormField) {
                    this.editor.toggleCheckBoxFormField(formFields[i], true, formFields[i].formFieldData.defaultValue);
                }
                else if (formFields[i].formFieldData instanceof DropDownFormField) {
                    this.editor.updateFormField(formFields[i], 0, true);
                }
            }
        }
    };
    SfDocumentEditor.prototype.importFormData = function (formData) {
        var formField = this.documentHelper.formFields;
        for (var i = 0; i < formData.length; i++) {
            var formFieldData = formData[i];
            var fieldName = formFieldData.fieldName;
            for (var j = 0; j < formField.length; j++) {
                if (formField[j].formFieldData.name === fieldName) {
                    if (formField[j].formFieldData instanceof CheckBoxFormField) {
                        this.editor.toggleCheckBoxFormField(formField[j], true, formFieldData.value);
                    }
                    else if (formField[j].formFieldData instanceof TextFormField) {
                        this.editor.updateFormField(formField[j], formFieldData.value);
                    }
                    else if (formField[j].formFieldData instanceof DropDownFormField) {
                        this.editor.updateFormField(formField[j], formFieldData.value);
                    }
                }
            }
        }
    };
    SfDocumentEditor.prototype.exportFormData = function () {
        var data = [];
        var formField = this.documentHelper.formFields;
        for (var i = 0; i < formField.length; i++) {
            if (formField[i].formFieldData.name !== '') {
                var formData = { fieldName: '', value: '' };
                formData.fieldName = formField[i].formFieldData.name;
                if (formField[i].formFieldData instanceof CheckBoxFormField) {
                    formData.value = formField[i].formFieldData.checked;
                }
                else if (formField[i].formFieldData instanceof TextFormField) {
                    var resultText = '';
                    var rex = new RegExp(this.documentHelper.textHelper.getEnSpaceCharacter(), 'gi');
                    if (resultText.replace(rex, '') === '') {
                        resultText = '';
                    }
                    formData.value = resultText;
                }
                else if (formField[i].formFieldData instanceof DropDownFormField) {
                    formData.value = formField[i].formFieldData.selectedIndex;
                }
                data.push(formData);
            }
        }
        return data;
    };
    SfDocumentEditor.prototype.updateFields = function () {
        for (var i = 0; i < this.documentHelper.fields.length; i++) {
            var field = this.documentHelper.fields[i];
            var code = this.selection.getFieldCode(field);
            if (code.toLowerCase().trim().indexOf('ref ') === 0) {
                this.selection.updateRefField(field);
            }
        }
    };
    SfDocumentEditor.prototype.focusIn = function () {
        if (this.viewer) {
            this.documentHelper.updateFocus();
        }
    };
    SfDocumentEditor.prototype.fitPage = function (pageFitType) {
        if (isNullOrUndefined(pageFitType)) {
            pageFitType = 'None';
        }
        if (this.viewer) {
            this.viewer.pageFitType = pageFitType;
        }
    };
    SfDocumentEditor.prototype.print = function (printWindow) {
        if (isNullOrUndefined(this.viewer)) {
            throw new Error('Invalid operation.');
        }
        if (this.printModule) {
            if (this.layoutType === 'Continuous') {
                this.documentHelper.isWebPrinting = true;
                this.viewer = new PageLayoutViewer(this);
                this.editor.layoutWholeDocument();
                this.printModule.print(this.documentHelper, printWindow);
                this.viewer = new WebLayoutViewer(this);
                this.editor.layoutWholeDocument();
                this.documentHelper.isWebPrinting = false;
            }
            else {
                this.printModule.print(this.documentHelper, printWindow);
            }
        }
        else {
            throw new Error('Invalid operation. Print is not enabled.');
        }
    };
    SfDocumentEditor.prototype.serialize = function () {
        var json = '';
        if (this.enableSfdtExport && this.sfdtExportModule instanceof SfdtExport) {
            json = this.sfdtExportModule.serialize();
        }
        else {
            throw new Error('Invalid operation. Sfdt export is not enabled.');
        }
        return json;
    };
    SfDocumentEditor.prototype.save = function (fileName, formatType) {
        fileName = fileName || 'Untitled';
        if (isNullOrUndefined(this.documentHelper)) {
            throw new Error('Invalid operation.');
        }
        if (formatType === 'Docx' && this.wordExportModule) {
            if (this.wordExportModule) {
                this.wordExportModule.save(this.documentHelper, fileName);
            }
        }
        else if (formatType === 'Txt' && this.textExportModule) {
            this.textExportModule.save(this.documentHelper, fileName);
        }
        else if (formatType === 'Sfdt' && this.enableSfdtExport && this.sfdtExportModule) {
            var jsonString = this.serialize();
            var blob = new Blob([jsonString], {
                type: 'application/json'
            });
            Save.save(fileName + '.sfdt', blob);
        }
        else {
            throw new Error('Invalid operation. Specified export is not enabled.');
        }
    };
    SfDocumentEditor.prototype.saveAsBlob = function (formatType) {
        var _this = this;
        if (isNullOrUndefined(this.viewer)) {
            throw new Error('Invalid operation');
        }
        return new Promise(function (resolve, reject) {
            if (formatType === 'Docx' && _this.wordExportModule) {
                resolve(_this.wordExportModule.saveAsBlob(_this.documentHelper));
            }
            else if (formatType === 'Txt' && _this.textExportModule) {
                resolve(_this.textExportModule.saveAsBlob(_this.documentHelper));
            }
            else if (formatType === 'Sfdt' && _this.enableSfdtExport && _this.sfdtExportModule) {
                resolve(_this.sfdtExportModule.saveAsBlob(_this.documentHelper));
            }
        });
    };
    SfDocumentEditor.prototype.openBlank = function () {
        var section = new BodyWidget();
        section.index = 0;
        section.sectionFormat = new WSectionFormat(section);
        if (this.sectionFormat) {
            this.parser.parseSectionFormat(this.sectionFormat, section.sectionFormat);
        }
        var paragraph = new ParagraphWidget();
        paragraph.index = 0;
        paragraph.paragraphFormat = new WParagraphFormat(paragraph);
        paragraph.characterFormat = new WCharacterFormat(paragraph);
        section.childWidgets.push(paragraph);
        paragraph.containerWidget = section;
        var sections = [];
        sections.push(section);
        var hfs = this.parser.parseHeaderFooter({ header: {}, footer: {}, evenHeader: {}, evenFooter: {}, firstPageHeader: {}, firstPageFooter: {} }, undefined);
        if (this.viewer) {
            this.clearPreservedCollectionsInViewer();
            this.documentHelper.userCollection.push('Everyone');
            this.documentHelper.cachedPages = [];
            this.documentHelper.setDefaultDocumentFormat();
            this.documentHelper.headersFooters.push(hfs);
            if (this.editorModule) {
                this.editorModule.intializeDefaultStyles();
                var style = this.documentHelper.styles.findByName('Normal');
                paragraph.paragraphFormat.baseStyle = style;
                paragraph.paragraphFormat.listFormat.baseStyle = style;
            }
            this.documentHelper.onDocumentChanged(sections);
        }
    };
    SfDocumentEditor.prototype.getStyleNames = function (styleType) {
        if (this.viewer) {
            return this.documentHelper.styles.getStyleNames(styleType);
        }
        return [];
    };
    SfDocumentEditor.prototype.getStyles = function (styleType) {
        if (this.viewer) {
            return this.documentHelper.styles.getStyles(styleType);
        }
        return [];
    };
    SfDocumentEditor.prototype.getBookmarks = function () {
        var bookmarks = [];
        if (this.viewer) {
            bookmarks = this.documentHelper.getBookmarks(true);
        }
        return bookmarks;
    };
    SfDocumentEditor.prototype.showDialog = function (dialogType) {
        this.dotNetRef.invokeMethodAsync("ShowDialog", dialogType);
    };
    SfDocumentEditor.prototype.showOptionsPane = function () {
    };
    SfDocumentEditor.prototype.showRestrictEditingPane = function () {
    };
    SfDocumentEditor.prototype.destroy = function () {
        this.destroyDependentModules();
        if (!isNullOrUndefined(this.documentHelper)) {
            this.documentHelper.destroy();
        }
        this.viewer = undefined;
        this.findResultsList = [];
        this.findResultsList = undefined;
    };
    SfDocumentEditor.prototype.destroyDependentModules = function () {
        if (this.printModule) {
            this.printModule.destroy();
            this.printModule = undefined;
        }
        if (this.sfdtExportModule) {
            this.sfdtExportModule.destroy();
            this.sfdtExportModule = undefined;
        }
        if (this.optionsPaneModule) {
            this.optionsPaneModule = undefined;
        }
        if (this.trackChangesPane) {
            this.trackChangesPane.destroy();
            this.trackChangesPane = undefined;
        }
        if (this.searchModule) {
            this.searchModule.destroy();
            this.searchModule = undefined;
        }
        if (this.editorModule) {
            this.editorModule.destroy();
            this.editorModule = undefined;
        }
        if (this.selectionModule) {
            this.selectionModule.destroy();
            this.selectionModule = undefined;
        }
        if (this.editorHistoryModule) {
            this.editorHistoryModule.destroy();
            this.editorHistoryModule = undefined;
        }
        if (this.textExportModule) {
            this.textExportModule.destroy();
            this.textExportModule = undefined;
        }
        if (this.wordExportModule) {
            this.wordExportModule.destroy();
            this.wordExportModule = undefined;
        }
        if (this.spellCheckerModule) {
            this.spellCheckerModule.destroy();
            this.spellCheckerModule = undefined;
        }
    };
    return SfDocumentEditor;
}());
export { SfDocumentEditor };
