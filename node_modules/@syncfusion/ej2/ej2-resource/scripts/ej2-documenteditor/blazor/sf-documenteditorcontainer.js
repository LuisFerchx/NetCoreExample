var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { isNullOrUndefined, enableBlazorMode } from '@syncfusion/ej2-base';
import { SfDocumentEditorContainer } from './sf-documenteditorcontainer-fn';
import { HeaderFooterProperties, TableProperties, TextProperties } from './document-editor-container';
import { ImageProperties } from './document-editor-container/image-properties';
import { TocProperties } from './document-editor-container/toc-properties';
var DocumentEditorContainer = {
    dotnetRef: null,
    filePicker: null,
    imagePicker: null,
    docEditElement: null,
    initialize: function (element, docEditElement, containerOptions, editorOptions, dotnetRef, elements) {
        enableBlazorMode();
        var docEdit = new SfDocumentEditorContainer(element, containerOptions, editorOptions, dotnetRef);
        docEdit.textProperties = new TextProperties(elements[0]);
        docEdit.tableProperties = new TableProperties(elements[1]);
        docEdit.imageProperties = new ImageProperties(elements[2]);
        docEdit.headerFooterProperties = new HeaderFooterProperties(elements[3]);
        docEdit.tocProperties = new TocProperties(elements[4]);
        docEdit.preRender();
        docEdit.render(docEditElement);
        this.dotnetRef = dotnetRef;
        this.docEditElement = docEditElement;
        if (docEditElement.parentElement) {
            var filePickerElement = docEditElement.parentElement.getElementsByClassName('e-de-ctnr-file-picker');
            var imagePicker = docEditElement.parentElement.getElementsByClassName('e-de-ctnr-image-picker');
            if (filePickerElement.length > 0) {
                this.filePicker = filePickerElement[0];
                this.filePicker.addEventListener('change', this.fileReader.bind(this));
            }
            if (imagePicker.length > 0) {
                this.imagePicker = imagePicker[0];
                this.imagePicker.addEventListener('change', this.imageReader.bind(this));
            }
        }
    },
    updateOptions: function (element, options, dotnetRef) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var instance = element.blazor__instance;
            instance.setOptions(options, instance.options);
            instance.options = options;
        }
    },
    imageReader: function () {
        return __awaiter(this, void 0, void 0, function () {
            var obj, file, fileReader;
            return __generator(this, function (_a) {
                obj = this;
                file = obj.imagePicker.files[0];
                fileReader = new FileReader();
                fileReader.onload = function () {
                    var data = fileReader.result;
                    var image = document.createElement('img');
                    image.addEventListener('load', function () {
                        obj.docEditElement.blazor__instance.editor.insertImage(data, this.width, this.height);
                    });
                    image.src = data;
                };
                fileReader.readAsDataURL(file);
                return [2];
            });
        });
    },
    fileReader: function () {
        return __awaiter(this, void 0, void 0, function () {
            var obj, file, documentName_1, format, fileReader_1;
            return __generator(this, function (_a) {
                this.dotnetRef.invokeMethodAsync('ShowSpinner');
                obj = this;
                file = obj.filePicker.files[0];
                if (file) {
                    documentName_1 = file.name;
                    format = documentName_1.substr(documentName_1.lastIndexOf('.'));
                    fileReader_1 = new FileReader();
                    fileReader_1.onload = function () {
                        var content = fileReader_1.result;
                        obj.dotnetRef.invokeMethodAsync('LoadDocument', content, documentName_1);
                    };
                    if (format === '.sfdt') {
                        fileReader_1.readAsText(file);
                    }
                    else {
                        fileReader_1.readAsDataURL(file);
                    }
                }
                return [2];
            });
        });
    },
    openDocument: function (element, type) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            if (type == 'File') {
                if (this.filePicker) {
                    this.filePicker.value = '';
                    this.filePicker.click();
                }
            }
            else if (type == 'Image') {
                if (this.imagePicker) {
                    this.imagePicker.value = '';
                    this.imagePicker.click();
                }
            }
        }
    },
    showProperties: function (element, property) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.showProperties(property);
        }
    },
    navigateToUrl: function (link) {
        window.open(link);
    }
};
export default DocumentEditorContainer;
