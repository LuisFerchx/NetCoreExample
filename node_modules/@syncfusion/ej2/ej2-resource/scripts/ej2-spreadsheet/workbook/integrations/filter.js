import { getData } from '../base/index';
import { DataManager, Query, Deferred, Predicate } from '@syncfusion/ej2-data';
import { getCellIndexes, getIndexesFromAddress, getSwapRange, getRangeAddress } from '../common/index';
import { initiateFilter, clearAllFilter, dataRefresh } from '../common/event';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
var WorkbookFilter = (function () {
    function WorkbookFilter(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookFilter.prototype.destroy = function () {
        this.removeEventListener();
        this.filterRange = null;
        this.parent = null;
    };
    WorkbookFilter.prototype.addEventListener = function () {
        this.parent.on(initiateFilter, this.initiateFilterHandler, this);
        this.parent.on(clearAllFilter, this.clearAllFilterHandler, this);
    };
    WorkbookFilter.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateFilter, this.initiateFilterHandler);
            this.parent.off(clearAllFilter, this.clearAllFilterHandler);
        }
    };
    WorkbookFilter.prototype.initiateFilterHandler = function (eventArgs) {
        var _this = this;
        var args = eventArgs.args;
        var deferred = new Deferred();
        var sheet = this.parent.getActiveSheet();
        var filterOptions = args.filterOptions || {};
        eventArgs.promise = deferred.promise;
        this.filterRange = args.range;
        if (filterOptions.datasource) {
            this.setFilter(filterOptions.datasource, filterOptions.predicates);
            var filterEventArgs = { range: args.range, filterOptions: filterOptions };
            deferred.resolve(filterEventArgs);
        }
        else {
            var range = getSwapRange(getIndexesFromAddress(args.range));
            if (range[0] > sheet.usedRange.rowIndex || range[1] > sheet.usedRange.colIndex) {
                deferred.reject('Select a cell or range inside the used range and try again.');
                return;
            }
            if (range[0] === range[2] && (range[2] - range[0]) === 0) {
                range[0] = 0;
                range[1] = 0;
                range[3] = sheet.usedRange.colIndex;
            }
            range[2] = sheet.usedRange.rowIndex;
            range[0] = range[0] + 1;
            var address_1 = getRangeAddress(range);
            getData(this.parent, sheet.name + "!" + address_1, true, true).then(function (jsonData) {
                var dataManager = new DataManager(jsonData);
                _this.setFilter(dataManager, filterOptions.predicates);
                var filterEventArgs = { range: address_1, filterOptions: filterOptions };
                deferred.resolve(filterEventArgs);
            });
        }
    };
    WorkbookFilter.prototype.setFilter = function (dataManager, predicates) {
        var _this = this;
        if (dataManager && predicates) {
            var jsonData = dataManager.dataSource.json;
            var query = new Query();
            if (predicates.length) {
                query.where(Predicate.and(predicates));
            }
            var result_1 = dataManager.executeLocal(query);
            var rowKey_1 = '__rowIndex';
            jsonData.forEach(function (data) {
                if (!data) {
                    return;
                }
                var rowIdx = parseInt(data[rowKey_1], 10);
                _this.parent.hideRow(rowIdx - 1, undefined, result_1.indexOf(data) < 0);
                if (isNullOrUndefined(_this.parent.filteredRows)) {
                    _this.parent.filteredRows = {};
                    _this.parent.filteredRows.rowIdxColl = [];
                    _this.parent.filteredRows.sheetIdxColl = [];
                }
                var filterRows = _this.parent.filteredRows.rowIdxColl;
                var filterSheet = _this.parent.filteredRows.sheetIdxColl;
                if (result_1.indexOf(data) < 0) {
                    if (filterRows && filterSheet) {
                        for (var i = 0, len = filterSheet.length; i < len; i++) {
                            if (_this.parent.activeSheetIndex === filterSheet[i] && filterRows[i] === rowIdx - 1) {
                                filterRows.splice(i, 1);
                                filterSheet.splice(i, 1);
                            }
                        }
                    }
                    filterRows.push(rowIdx - 1);
                    filterSheet.push(_this.parent.activeSheetIndex);
                }
                else {
                    if (filterRows && filterSheet) {
                        for (var i = 0, length_1 = filterSheet.length; i < length_1; i++) {
                            if (_this.parent.activeSheetIndex === filterSheet[i] && filterRows[i] === rowIdx - 1) {
                                filterRows.splice(i, 1);
                                filterSheet.splice(i, 1);
                            }
                        }
                    }
                }
            });
            var sheet = this.parent.getActiveSheet();
            if (sheet.frozenColumns || sheet.frozenRows) {
                this.parent.notify(dataRefresh, null);
            }
        }
    };
    WorkbookFilter.prototype.clearAllFilterHandler = function () {
        if (this.filterRange) {
            var range = getCellIndexes(this.filterRange);
            var sheet = this.parent.getActiveSheet();
            this.parent.hideRow(range[0], sheet.usedRange.rowIndex - 1, false);
        }
    };
    WorkbookFilter.prototype.getModuleName = function () {
        return 'workbookFilter';
    };
    return WorkbookFilter;
}());
export { WorkbookFilter };
