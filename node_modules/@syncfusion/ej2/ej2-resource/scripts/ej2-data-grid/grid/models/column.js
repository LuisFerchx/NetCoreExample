import { merge, isNullOrUndefined, extend } from '@syncfusion/ej2-base';
import { Query, DataUtil } from '@syncfusion/ej2-data';
import { ValueFormatter } from '../services/value-formatter';
import { getUid, templateCompiler, getForeignData, getObject } from '../base/util';
var Column = (function () {
    function Column(options) {
        var _this = this;
        this.allowSorting = true;
        this.allowResizing = true;
        this.allowFiltering = true;
        this.allowGrouping = true;
        this.allowReordering = true;
        this.showColumnMenu = true;
        this.enableGroupByFormat = false;
        this.allowEditing = true;
        this.filter = {};
        this.showInColumnChooser = true;
        this.edit = {};
        this.sortDirection = 'Descending';
        this.getEditTemplate = function () { return _this.editTemplateFn; };
        this.getFilterTemplate = function () { return _this.filterTemplateFn; };
        merge(this, options);
        this.uid = getUid('grid-column');
        var valueFormatter = new ValueFormatter();
        if (options.format && (options.format.skeleton || options.format.format)) {
            this.setFormatter(valueFormatter.getFormatFunction(options.format));
            this.setParser(valueFormatter.getParserFunction(options.format));
        }
        if (!this.field) {
            this.allowFiltering = false;
            this.allowGrouping = false;
            this.allowSorting = false;
        }
        if (this.commands && !this.textAlign) {
            this.textAlign = 'Right';
        }
        if (this.template || this.commandsTemplate) {
            this.templateFn = templateCompiler(this.template || this.commandsTemplate);
        }
        if (this.headerTemplate) {
            this.headerTemplateFn = templateCompiler(this.headerTemplate);
        }
        if (this.filter.itemTemplate) {
            this.fltrTemplateFn = templateCompiler(this.filter.itemTemplate);
        }
        if (this.editTemplate) {
            this.editTemplateFn = templateCompiler(this.editTemplate);
        }
        if (this.filterTemplate) {
            this.filterTemplateFn = templateCompiler(this.filterTemplate);
        }
        if (this.isForeignColumn() && (isNullOrUndefined(this.editType) || this.editType === 'dropdownedit')) {
            this.editType = 'dropdownedit';
            this.edit.params = extend({
                dataSource: this.dataSource,
                query: new Query(), fields: { value: this.foreignKeyField || this.field, text: this.foreignKeyValue }
            }, this.edit.params);
        }
        if (this.sortComparer) {
            var a_1 = this.sortComparer;
            this.sortComparer = function comparer(x, y) {
                if (typeof a_1 === 'string') {
                    a_1 = getObject(a_1, window);
                }
                if (this.sortDirection === 'Descending') {
                    var z = x;
                    x = y;
                    y = z;
                }
                return a_1(x, y);
            };
        }
        if (!this.sortComparer && this.isForeignColumn()) {
            this.sortComparer = function (x, y) {
                x = getObject(_this.foreignKeyValue, getForeignData(_this, {}, x)[0]);
                y = getObject(_this.foreignKeyValue, getForeignData(_this, {}, y)[0]);
                return _this.sortDirection === 'Descending' ? DataUtil.fnDescending(x, y) : DataUtil.fnAscending(x, y);
            };
        }
    }
    Column.prototype.getSortDirection = function () {
        return this.sortDirection;
    };
    Column.prototype.setSortDirection = function (direction) {
        this.sortDirection = direction;
    };
    Column.prototype.setProperties = function (column) {
        var keys = Object.keys(column);
        for (var i = 0; i < keys.length; i++) {
            this[keys[i]] = column[keys[i]];
        }
    };
    Column.prototype.isForeignColumn = function () {
        return !!(this.dataSource && this.foreignKeyValue);
    };
    Column.prototype.getFormatter = function () {
        return this.formatFn;
    };
    Column.prototype.setFormatter = function (value) {
        this.formatFn = value;
    };
    Column.prototype.getParser = function () {
        return this.parserFn;
    };
    Column.prototype.setParser = function (value) {
        this.parserFn = value;
    };
    Column.prototype.getColumnTemplate = function () {
        return this.templateFn;
    };
    Column.prototype.getHeaderTemplate = function () {
        return this.headerTemplateFn;
    };
    Column.prototype.getFilterItemTemplate = function () {
        return this.fltrTemplateFn;
    };
    Column.prototype.getDomSetter = function () {
        return this.disableHtmlEncode ? 'textContent' : 'innerHTML';
    };
    return Column;
}());
export { Column };
