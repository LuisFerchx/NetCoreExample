import { extend } from '@syncfusion/ej2-base';
import { DatePicker, DateTimePicker } from '@syncfusion/ej2-calendars';
import { isEditable, isComplexField, getComplexFieldID, getObject } from '../base/util';
var DatePickerEditCell = (function () {
    function DatePickerEditCell(parent) {
        this.parent = parent;
    }
    DatePickerEditCell.prototype.create = function (args) {
        var complexFieldName = getComplexFieldID(args.column.field);
        return this.parent.createElement('input', {
            className: 'e-field', attrs: {
                id: this.parent.element.id + complexFieldName,
                name: complexFieldName, type: 'text', 'e-mappinguid': args.column.uid
            }
        });
    };
    DatePickerEditCell.prototype.read = function (element) {
        return element.ej2_instances[0].value;
    };
    DatePickerEditCell.prototype.write = function (args) {
        var isInline = this.parent.editSettings.mode !== 'Dialog';
        var isComplex = isComplexField(args.column.field);
        var isAddRow = args.requestType === 'add' || args.row.classList.contains('e-addedrow');
        var value = getObject(args.column.field, args.rowData);
        value = value ? new Date(value) : null;
        if (args.column.editType === 'datepickeredit') {
            this.obj = new DatePicker(extend({
                floatLabelType: isInline ? 'Never' : 'Always',
                value: value,
                placeholder: isInline ?
                    '' : args.column.headerText, enableRtl: this.parent.enableRtl,
                enabled: isEditable(args.column, args.type, args.element),
            }, args.column.edit.params));
        }
        else if (args.column.editType === 'datetimepickeredit') {
            this.obj = new DateTimePicker(extend({
                floatLabelType: isInline ? 'Never' : 'Always',
                value: value,
                placeholder: isInline ?
                    '' : args.column.headerText, enableRtl: this.parent.enableRtl,
                enabled: isEditable(args.column, args.type, args.element),
            }, args.column.edit.params));
        }
        this.obj.appendTo(args.element);
    };
    DatePickerEditCell.prototype.destroy = function () {
        if (this.obj) {
            this.obj.destroy();
        }
    };
    return DatePickerEditCell;
}());
export { DatePickerEditCell };
