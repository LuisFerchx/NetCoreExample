import { Transform, ElementAction } from '../../enum/enum';
import { Size } from '../../primitives/size';
import { Rect } from '../../primitives/rect';
import { getBounds } from '../../utility/base-util';
var DiagramElement = (function () {
    function DiagramElement() {
        this.pivot = { x: 0.5, y: 0.5 };
        this.isDirt = true;
        this.isExport = false;
        this.exportScaleValue = { x: 0, y: 0 };
        this.exportScaleOffset = { x: 0, y: 0 };
        this.canApplyStyle = true;
        this.visible = true;
        this.offsetX = 0;
        this.offsetY = 0;
        this.cornerRadius = 0;
        this.minHeight = undefined;
        this.minWidth = undefined;
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.width = undefined;
        this.height = undefined;
        this.rotateAngle = 0;
        this.margin = { left: 0, right: 0, top: 0, bottom: 0 };
        this.horizontalAlignment = 'Auto';
        this.verticalAlignment = 'Auto';
        this.flip = 'None';
        this.relativeMode = 'Point';
        this.transform = Transform.Self | Transform.Parent;
        this.style = { fill: 'white', strokeColor: 'black', opacity: 1, strokeWidth: 1 };
        this.desiredSize = new Size();
        this.actualSize = new Size();
        this.parentTransform = 0;
        this.preventContainer = false;
        this.isSvgRender = false;
        this.bounds = new Rect(0, 0, 0, 0);
        this.shadow = null;
        this.description = '';
        this.staticSize = false;
        this.isRectElement = false;
        this.isCalculateDesiredSize = true;
        this.flipOffset = { x: 0, y: 0 };
        this.elementActions = ElementAction.None;
        this.inversedAlignment = true;
        this.position = undefined;
        this.unitMode = undefined;
        this.float = false;
        this.floatingBounds = undefined;
    }
    DiagramElement.prototype.setOffsetWithRespectToBounds = function (x, y, mode) {
        this.unitMode = mode;
        this.position = { x: x, y: y };
    };
    DiagramElement.prototype.getAbsolutePosition = function (size) {
        if (this.position !== undefined) {
            if (this.unitMode === 'Absolute') {
                return this.position;
            }
            else {
                return {
                    x: this.position.x * size.width, y: this.position.y * size.height
                };
            }
        }
        return undefined;
    };
    Object.defineProperty(DiagramElement.prototype, "outerBounds", {
        get: function () {
            return this.floatingBounds || this.bounds;
        },
        set: function (bounds) {
            this.floatingBounds = bounds;
        },
        enumerable: true,
        configurable: true
    });
    DiagramElement.prototype.measure = function (availableSize, obj, callback) {
        var width = this.width !== undefined ? this.width : (availableSize.width || 0) - this.margin.left - this.margin.right;
        var height = this.height !== undefined ? this.height : (availableSize.height || 0) - this.margin.top - this.margin.bottom;
        if (this.id) {
            if (height === 0 && (this.elementActions & ElementAction.HorizontalLaneHeader)) {
                height = this.actualSize.height;
            }
        }
        this.desiredSize = new Size(width, height);
        if (this.isCalculateDesiredSize) {
            this.desiredSize = this.validateDesiredSize(this.desiredSize, availableSize);
        }
        return this.desiredSize;
    };
    DiagramElement.prototype.arrange = function (desiredSize) {
        this.actualSize = desiredSize;
        this.updateBounds();
        return this.actualSize;
    };
    DiagramElement.prototype.updateBounds = function () {
        this.bounds = getBounds(this);
    };
    DiagramElement.prototype.validateDesiredSize = function (desiredSize, availableSize) {
        if (this.isRectElement && !this.width && !this.minWidth && !this.maxWidth) {
            desiredSize.width = 50;
        }
        if (this.isRectElement && !this.height && !this.minHeight && !this.maxHeight) {
            desiredSize.height = 50;
        }
        if (desiredSize === undefined || this.width !== undefined &&
            this.height !== undefined) {
            desiredSize = desiredSize || new Size();
            desiredSize.width = this.width === undefined ? (availableSize.width || 0)
                - this.margin.left - this.margin.right : this.width;
            desiredSize.height = this.height === undefined ? (availableSize.height || 0)
                - this.margin.top - this.margin.bottom : this.height;
        }
        if (this.minWidth !== undefined) {
            desiredSize.width = Math.max(desiredSize.width, this.minWidth);
        }
        if (this.minHeight !== undefined) {
            desiredSize.height = Math.max(desiredSize.height, this.minHeight);
        }
        if (this.maxWidth !== undefined && this.maxWidth !== 0) {
            desiredSize.width = Math.min(desiredSize.width, this.maxWidth);
        }
        if (this.maxHeight !== undefined && this.maxHeight !== 0) {
            desiredSize.height = Math.min(desiredSize.height, this.maxHeight);
        }
        return desiredSize;
    };
    return DiagramElement;
}());
export { DiagramElement };
