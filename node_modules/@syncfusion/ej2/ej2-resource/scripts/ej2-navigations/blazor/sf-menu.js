import { closest, EventHandler, select, selectAll, createElement, getInstance } from '@syncfusion/ej2-base';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
import { getZindexPartial } from '@syncfusion/ej2-popups';
import { keyActionHandler } from './menu-base';
import { addScrolling, destroyScroll } from '../src/common/menu-scroll';
import { VScroll } from '../src/common/v-scroll';
import { HScroll } from '../src/common/h-scroll';
var CONTAINER = 'e-menu-container';
var MENUCLASS = '.e-menu';
var MENUITEM = 'e-menu-item';
var FOCUSED = '.e-focused';
var SELECTED = '.e-selected';
var MENU = '.e-ul';
var MOUSEDOWNHANDLER = 'DocumentMouseDown';
var PIXEL = 'px';
var MOUSEDOWN = 'mousedown touchstart';
var MOUSEOVER = 'mouseover';
var CLICK = 'click';
var RESIZE = 'resize';
var HASH = '#';
var EMPTY = '';
var DOT = '.';
var MENUPARENT = 'e-menu-parent';
var MENUCARET = 'e-menu-caret-icon';
var KEYDOWN = 'keydown';
var HAMBURGER = 'e-hamburger';
var VERTICAL = 'e-vertical';
var VSCROLL = 'vscroll';
var HSCROLL = 'hscroll';
var SCROLLMENU = 'e-menu-';
var SCROLLNAV = '.e-scroll-nav';
var NONE = 'none';
var LEFT = 37;
var RIGHT = 39;
var UP = 38;
var DOWN = 40;
var SfMenu = (function () {
    function SfMenu(options, dotnetRef) {
        this.element = options.element;
        this.dotnetRef = dotnetRef;
        this.enableScroller = options.enableScrolling;
        this.element.blazor__instance = this;
        this.addEventListener();
        this.updateScroll(options.enableScrolling, options.isRtl, false);
    }
    SfMenu.prototype.calculatePosition = function (args) {
        var left;
        var top;
        var parent = args.element.getElementsByClassName(MENUITEM)[args.itemIndex];
        var offset = parent.getBoundingClientRect();
        var menu = args.popup.blazor__instance.hideMenu(true);
        if (!menu) {
            return;
        }
        this.popup = args.popup;
        if (args.enableScrolling) {
            this.destroyScroll(null, menu);
            if (args.scrollHeight) {
                menu = addScrolling(createElement, args.popup, menu, VSCROLL, args.isRtl, args.scrollHeight);
            }
        }
        var ul = menu.classList.contains(MENUPARENT) ? menu : select(DOT + MENUPARENT, menu);
        args.popup.blazor__instance.setBlankIconStyle(ul, args.isRtl);
        var menuOffset = ul.getBoundingClientRect();
        var width = args.popup.blazor__instance.getMenuWidth(ul, menuOffset.width, args.isRtl);
        if (args.isVertical) {
            top = offset.top;
            if (args.isRtl) {
                left = offset.left;
                if (left - width < document.documentElement.clientLeft) {
                    var newLeft = offset.right + width;
                    if (newLeft < document.documentElement.clientWidth) {
                        left = newLeft;
                    }
                }
            }
            else {
                left = offset.right;
                if (left + width > document.documentElement.clientWidth) {
                    var newLeft = offset.left - width;
                    if (newLeft > document.documentElement.clientLeft) {
                        left = newLeft;
                    }
                }
            }
        }
        else {
            top = offset.bottom;
            if (args.isRtl) {
                left = offset.right;
                if (offset.right - width < document.documentElement.clientLeft) {
                    var newLeft = offset.left + width;
                    if (newLeft < document.documentElement.clientWidth) {
                        left = newLeft;
                    }
                }
            }
            else {
                left = offset.left;
                if (left + width > document.documentElement.clientWidth) {
                    var newLeft = offset.right - width;
                    if (newLeft > document.documentElement.clientLeft) {
                        left = newLeft;
                    }
                }
            }
        }
        var height = args.scrollHeight || menuOffset.height;
        if (top + height > document.documentElement.clientHeight) {
            var newTop = document.documentElement.clientHeight - height - 20;
            if (newTop > document.documentElement.clientTop) {
                top = newTop;
            }
        }
        args.popup.blazor__instance.updateProperty(args.showItemOnClick, args.element);
        this.popup.style.zIndex = getZindexPartial(this.popup).toString();
        menu.style.width = Math.ceil(width) + PIXEL;
        this.popup.style.left = Math.ceil(left) + PIXEL;
        this.popup.style.top = Math.ceil(top) + PIXEL;
        ul.style.visibility = EMPTY;
        ul.focus();
    };
    SfMenu.prototype.subMenuPosition = function (args) {
        var menu = args.popup.blazor__instance.hideMenu();
        if (args.enableScrolling && menu) {
            this.destroyScroll(null, menu);
            if (args.scrollHeight) {
                menu = addScrolling(createElement, args.popup, menu, VSCROLL, args.isRtl, args.scrollHeight);
            }
        }
        args.popup.blazor__instance.subMenuPosition(menu, args.isRtl, args.showItemOnClick, false, args.scrollHeight);
    };
    SfMenu.prototype.clickHandler = function (e) {
        var target = e.target;
        if (!isNullOrUndefined(this.popup) && closest(target, HASH + this.popup.id)) {
            var li = closest(target, DOT + MENUITEM);
            if (li && !li.classList.contains(MENUCARET)) {
                if (!closest(target, DOT + MENUITEM + SELECTED)) {
                    this.destroyScroll(NONE);
                }
                var selectedLi = select(SELECTED, this.element);
                if (selectedLi) {
                    selectedLi.focus();
                }
            }
        }
        else if (closest(target, HASH + this.element.id + DOT + HAMBURGER) && !target.classList.contains(MENUPARENT) &&
            !target.classList.contains(CONTAINER)) {
            var li = target.classList.contains(MENUITEM) ? target : closest(target, DOT + MENUITEM + FOCUSED);
            if (li && !li.classList.contains(MENUCARET)) {
                this.focusMenu(true);
            }
        }
    };
    SfMenu.prototype.resizeMenu = function () {
        if (this.enableScroller) {
            var menuElement = this.element.parentElement.querySelectorAll('.e-menu-container')[0];
            var ulElement = menuElement.getElementsByClassName('e-menu-parent')[0];
            var scrollElement = select('.e-menu-hscroll', menuElement);
            var menuWidth = ulElement && ulElement.offsetWidth;
            var leftWidth = window.innerWidth - ulElement.getBoundingClientRect().left;
            if (menuWidth > leftWidth) {
                menuElement.style.width = Math.ceil(leftWidth) + 'px';
                if (!scrollElement) {
                    var menu = select('.e-menu', menuElement);
                    if (menu) {
                        addScrolling(createElement, menuElement, menu, 'hscroll', false);
                    }
                }
            }
        }
    };
    SfMenu.prototype.keyDownHandler = function (e) {
        e.preventDefault();
        if (this.element.classList.contains(HAMBURGER)) {
            keyActionHandler(this.element, e.target, e.keyCode);
        }
        else {
            var isVertical = select(MENUCLASS, this.element).classList.contains(VERTICAL);
            if (isVertical) {
                if (e.keyCode === UP || e.keyCode === DOWN) {
                    keyActionHandler(this.element, e.target, e.keyCode);
                }
            }
            else {
                if (e.keyCode === LEFT || e.keyCode === RIGHT) {
                    keyActionHandler(this.element, e.target, e.keyCode === LEFT ? UP : DOWN);
                }
            }
        }
    };
    SfMenu.prototype.focusMenu = function (first) {
        if (select(DOT + SCROLLMENU + VSCROLL, this.popup)) {
            this.destroyScroll(EMPTY);
            var menu = this.popup.blazor__instance.getLastMenu();
            if (menu) {
                menu.focus();
            }
            return;
        }
        var menuCollections = selectAll(DOT + MENUPARENT, this.element);
        if (menuCollections.length) {
            if (first) {
                menuCollections[0].focus();
            }
            else {
                var focusedEle = select(DOT + MENUITEM + FOCUSED, menuCollections[menuCollections.length - 1]);
                (focusedEle ? focusedEle : menuCollections[menuCollections.length - 1]).focus();
            }
        }
    };
    SfMenu.prototype.destroyScroll = function (display, curMenu) {
        var scrollElements = selectAll(DOT + SCROLLMENU + VSCROLL, this.popup);
        var menus = [].slice.call(selectAll(DOT + MENUPARENT, this.popup));
        var menu;
        var index = -1;
        if (!isNullOrUndefined(display) && curMenu) {
            index = menus.indexOf(curMenu);
        }
        scrollElements.forEach(function (element) {
            menu = null;
            menu = select(MENU, element);
            if (menu && !isNullOrUndefined(display)) {
                if (curMenu) {
                    if (menus.indexOf(menu) > index) {
                        element.style.display = display;
                    }
                }
                else {
                    element.style.display = display;
                }
            }
            else {
                destroyScroll(getInstance(element, VScroll), element, curMenu);
            }
        });
    };
    SfMenu.prototype.mouseDownHandler = function (e) {
        var target = e.target;
        var isEleAvailable = !document.body.contains(this.element);
        if (isNullOrUndefined(this.element) || isEleAvailable) {
            this.removeEventListener(false);
        }
        var scrollNav = closest(target, SCROLLNAV);
        if (isNullOrUndefined(this.popup) || (!closest(target, HASH + this.popup.id) || scrollNav)) {
            var menuLength = selectAll(MENU, this.element).length;
            if (!isEleAvailable && (select(FOCUSED, this.element) || select(SELECTED, this.element)) &&
                !closest(e.target, HASH + this.element.id) && (!scrollNav || menuLength > 1)) {
                this.dotnetRef.invokeMethodAsync(MOUSEDOWNHANDLER, true, false, !isNullOrUndefined(scrollNav), false, false);
            }
            if (!isNullOrUndefined(this.popup) && !isNullOrUndefined(this.popup.blazor__instance) &&
                (!closest(e.target, DOT + MENUITEM + SELECTED) || !this.popup.blazor__instance.subMenuOpen) && !scrollNav) {
                if (!this.popup.blazor__instance.subMenuOpen) {
                    var menu = closest(e.target, MENU);
                    if (select(DOT + SCROLLMENU + VSCROLL, this.popup)) {
                        this.destroyScroll(NONE, menu);
                    }
                }
                else {
                    this.destroyScroll(NONE);
                }
            }
        }
    };
    SfMenu.prototype.mouseOverHandler = function (e) {
        var isEleAvailable = document.body.contains(this.element);
        if (isNullOrUndefined(this.element) || !isEleAvailable) {
            this.removeEventListener(false);
        }
        if (isEleAvailable && select(FOCUSED, this.element) && !closest(e.target, HASH + this.element.id)) {
            this.dotnetRef.invokeMethodAsync(MOUSEDOWNHANDLER, false, false, false, true, true);
        }
    };
    SfMenu.prototype.updateScroll = function (enableScrolling, isRtl, destroy) {
        if (enableScrolling) {
            EventHandler.add(window, RESIZE, this.resizeMenu, this);
            var menu = select(MENUCLASS, this.element);
            if (menu) {
                addScrolling(createElement, this.element, menu, menu.classList.contains(VERTICAL) ? VSCROLL : HSCROLL, isRtl);
            }
        }
        else if (destroy) {
            var scrollElement = select(DOT + SCROLLMENU + (this.element.classList.contains(VERTICAL) ? VSCROLL : HSCROLL), this.element);
            if (scrollElement) {
                EventHandler.remove(window, RESIZE, this.resizeMenu);
                var scrollInstance = (this.element.classList.contains(VERTICAL) ? getInstance(scrollElement, VScroll) :
                    getInstance(scrollElement, HScroll));
                destroyScroll(scrollInstance, scrollElement);
            }
        }
    };
    SfMenu.prototype.addEventListener = function () {
        EventHandler.add(document, MOUSEDOWN, this.mouseDownHandler, this);
        EventHandler.add(document, MOUSEOVER, this.mouseOverHandler, this);
        EventHandler.add(this.element, KEYDOWN, this.keyDownHandler, this);
        EventHandler.add(document, CLICK, this.clickHandler, this);
    };
    SfMenu.prototype.removeEventListener = function (isEleAvailable) {
        EventHandler.remove(document, MOUSEDOWN, this.mouseDownHandler);
        EventHandler.remove(document, MOUSEOVER, this.mouseOverHandler);
        if (isEleAvailable) {
            EventHandler.remove(this.element, KEYDOWN, this.keyDownHandler);
        }
        EventHandler.remove(document, CLICK, this.clickHandler);
    };
    return SfMenu;
}());
var Menu = {
    initialize: function (args, dotnetRef) {
        if (!isNullOrUndefined(args.element)) {
            new SfMenu(args, dotnetRef);
        }
    },
    calculatePosition: function (args) {
        if (!isNullOrUndefined(args.element) && !isNullOrUndefined(args.element.blazor__instance) && !isNullOrUndefined(args.popup) &&
            !isNullOrUndefined(args.popup.blazor__instance)) {
            args.element.blazor__instance.calculatePosition(args);
        }
    },
    subMenuPosition: function (args) {
        if (!isNullOrUndefined(args.element) && !isNullOrUndefined(args.element.blazor__instance) && !isNullOrUndefined(args.popup) &&
            !isNullOrUndefined(args.popup.blazor__instance)) {
            args.element.blazor__instance.subMenuPosition(args);
        }
    },
    focusMenu: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.focusMenu(false);
        }
    },
    updateScroll: function (element, enableScrolling, isRtl) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.updateScroll(enableScrolling, isRtl, true);
        }
    },
    destroy: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.removeEventListener(true);
        }
    }
};
export default Menu;
