import { closest, EventHandler, Browser, Touch } from '@syncfusion/ej2-base';
import { isNullOrUndefined, getInstance, select, selectAll } from '@syncfusion/ej2-base';
import { getZindexPartial, getScrollableParent } from '@syncfusion/ej2-popups';
import { keyActionHandler } from './menu-base';
var TRANSPARENT = 'e-transparent';
var MENU = 'e-menu-parent';
var MENUITEM = 'e-menu-item';
var FOCUSED = 'e-focused';
var SELECTED = 'e-selected';
var CLOSE = 'CloseMenu';
var KEYDOWN = 'keydown';
var CONTEXTMENU = 'contextmenu';
var SCROLLMENU = '.e-menu-vscroll';
var SCROLLNAV = '.e-scroll-nav';
var SPACE = ' ';
var HIDDEN = 'hidden';
var OPENMENU = 'OpenContextMenu';
var PIXEL = 'px';
var MOUSEDOWN = 'mousedown touchstart';
var MOUSEOVER = 'mouseover';
var SCROLL = 'scroll';
var NONE = 'none';
var HASH = '#';
var EMPTY = '';
var DOT = '.';
var TARGET = 'Target';
var FILTER = 'Filter';
var CARET = 'e-caret';
var SfContextMenu = (function () {
    function SfContextMenu(element, target, filter, dotnetRef) {
        this.element = element;
        this.target = target;
        this.filter = filter;
        this.dotnetRef = dotnetRef;
        this.element.blazor__instance = this;
        this.addContextMenuEvent();
        this.addEventListener();
    }
    SfContextMenu.prototype.addContextMenuEvent = function (add) {
        if (add === void 0) { add = true; }
        var target;
        if (this.target) {
            var targetElems = selectAll(this.target);
            if (targetElems.length) {
                for (var i = 0, len = targetElems.length; i < len; i++) {
                    target = targetElems[i];
                    if (add) {
                        if (Browser.isIos) {
                            new Touch(target, { tapHold: this.touchHandler.bind(this) });
                        }
                        else {
                            EventHandler.add(target, CONTEXTMENU, this.cmenuHandler, this);
                        }
                    }
                    else {
                        if (Browser.isIos) {
                            var touchModule = getInstance(target, Touch);
                            if (touchModule) {
                                touchModule.destroy();
                            }
                        }
                        else {
                            EventHandler.remove(target, CONTEXTMENU, this.cmenuHandler);
                        }
                    }
                }
                if (isNullOrUndefined(this.targetElement)) {
                    this.targetElement = target;
                }
                if (add) {
                    EventHandler.add(this.targetElement, SCROLL, this.scrollHandler, this);
                    for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
                        var parent_1 = _a[_i];
                        EventHandler.add(parent_1, SCROLL, this.scrollHandler, this);
                    }
                }
                else {
                    var scrollableParents = void 0;
                    if (this.targetElement.parentElement) {
                        EventHandler.remove(this.targetElement, SCROLL, this.scrollHandler);
                        scrollableParents = getScrollableParent(this.targetElement);
                    }
                    else {
                        scrollableParents = getScrollableParent(target);
                    }
                    for (var _b = 0, scrollableParents_1 = scrollableParents; _b < scrollableParents_1.length; _b++) {
                        var parent_2 = scrollableParents_1[_b];
                        EventHandler.remove(parent_2, SCROLL, this.scrollHandler);
                    }
                    this.targetElement = null;
                }
            }
        }
    };
    SfContextMenu.prototype.scrollHandler = function () {
        if (select(DOT + MENU, this.element)) {
            this.dotnetRef.invokeMethodAsync(CLOSE, 0, false, true, false);
        }
    };
    SfContextMenu.prototype.touchHandler = function (e) {
        this.cmenuHandler(e.originalEvent);
    };
    SfContextMenu.prototype.keyDownHandler = function (e) {
        e.preventDefault();
        keyActionHandler(this.element, e.target, e.keyCode, this.menuId);
    };
    SfContextMenu.prototype.cmenuHandler = function (e) {
        if (this.filter) {
            var canOpen = false;
            var filter = this.filter.split(SPACE);
            for (var i = 0, len = filter.length; i < len; i++) {
                if (closest(e.target, filter[i])) {
                    canOpen = true;
                    break;
                }
            }
            if (!canOpen) {
                return;
            }
        }
        e.preventDefault();
        var left = e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
        var top = e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
        this.dotnetRef.invokeMethodAsync(OPENMENU, Math.ceil(left), Math.ceil(top));
    };
    SfContextMenu.prototype.contextMenuPosition = function (left, top, rtl, subMenu, manualOpen) {
        var cmenu = this.hideMenu(true);
        if (!cmenu) {
            return;
        }
        this.subMenuOpen = false;
        this.setBlankIconStyle(cmenu, rtl);
        var cmenuOffset = cmenu.getBoundingClientRect();
        var cmenuWidth = this.getMenuWidth(cmenu, cmenuOffset.width, rtl);
        if (subMenu && Browser.isDevice) {
            cmenu.style.width = Math.ceil(cmenuWidth) + PIXEL;
            cmenu.style.visibility = EMPTY;
            return;
        }
        if (!manualOpen) {
            if (top + cmenuOffset.height > document.documentElement.clientHeight) {
                var newTop = document.documentElement.clientHeight - cmenuOffset.height - 20;
                if (newTop > document.documentElement.clientTop) {
                    top = newTop;
                }
            }
            if (left + cmenuWidth > document.documentElement.clientWidth) {
                var newLeft = document.documentElement.clientWidth - cmenuWidth - 20;
                if (newLeft > document.documentElement.clientLeft) {
                    left = newLeft;
                }
            }
        }
        this.element.style.top = Math.ceil(top + 1) + PIXEL;
        this.element.style.left = Math.ceil(left + 1) + PIXEL;
        cmenu.style.width = Math.ceil(cmenuWidth) + PIXEL;
        this.element.style.zIndex = getZindexPartial(this.element).toString();
        cmenu.style.visibility = EMPTY;
        cmenu.focus();
    };
    SfContextMenu.prototype.setBlankIconStyle = function (menu, isRtl) {
        var blankIconList = [].slice.call(menu.getElementsByClassName('e-blankicon'));
        var cssProp = isRtl ? { padding: 'paddingRight', cssSelector: 'padding-right', margin: 'marginLeft' } : { padding: 'paddingLeft', cssSelector: 'padding-left', margin: 'marginRight' };
        [].slice.call(menu.querySelectorAll('.e-menu-item[style*="' + cssProp.cssSelector + '"]:not(.e-blankicon)')).forEach(function (li) {
            li.style[cssProp.padding] = EMPTY;
        });
        if (!blankIconList.length) {
            return;
        }
        var iconLi = menu.querySelector('.e-menu-item:not(.e-blankicon):not(.e-separator)');
        var icon = iconLi.querySelector('.e-menu-icon');
        if (!icon) {
            return;
        }
        var iconCssProps = getComputedStyle(icon);
        var iconSize = parseInt(iconCssProps.fontSize, 10);
        if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {
            iconSize = parseInt(iconCssProps.width, 10);
        }
        var size = iconSize + parseInt(iconCssProps[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10) + "px";
        blankIconList.forEach(function (li) {
            li.style[cssProp.padding] = size;
        });
    };
    SfContextMenu.prototype.getMenuWidth = function (cmenu, width, isRtl) {
        var caretIcon = cmenu.getElementsByClassName(CARET)[0];
        if (caretIcon) {
            width += parseInt(getComputedStyle(caretIcon)[isRtl ? 'marginRight' : 'marginLeft'], 10);
        }
        return width < 120 ? 120 : width;
    };
    SfContextMenu.prototype.addEventListener = function () {
        this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);
        this.delegateMouseOverHandler = this.mouseOverHandler.bind(this);
        EventHandler.add(document, MOUSEDOWN, this.delegateMouseDownHandler, this);
        EventHandler.add(document, MOUSEOVER, this.delegateMouseOverHandler, this);
        EventHandler.add(this.element, KEYDOWN, this.keyDownHandler, this);
    };
    SfContextMenu.prototype.removeEventListener = function () {
        EventHandler.remove(document, MOUSEDOWN, this.delegateMouseDownHandler);
        EventHandler.remove(document, MOUSEOVER, this.delegateMouseOverHandler);
        EventHandler.remove(this.element, KEYDOWN, this.keyDownHandler);
    };
    SfContextMenu.prototype.mouseDownHandler = function (e) {
        if (!document.getElementById(this.element.id)) {
            this.removeEventListener();
            return;
        }
        if (!closest(e.target, HASH + this.element.id) && (isNullOrUndefined(this.menuId) ||
            !closest(e.target, this.menuId)) && select(DOT + MENU, this.element)) {
            this.dotnetRef.invokeMethodAsync(CLOSE, 0, false, true, false);
        }
    };
    SfContextMenu.prototype.mouseOverHandler = function (e) {
        if (!document.getElementById(this.element.id)) {
            this.removeEventListener();
            return;
        }
        var target = e.target;
        var menus = [].slice.call(selectAll(DOT + MENU, this.element));
        if (!menus.length) {
            return;
        }
        var scrollNav = closest(target, SCROLLNAV);
        if (this.subMenuOpen && (menus.length > 1 || (!isNullOrUndefined(this.menuId) && !scrollNav))) {
            if ((!closest(target, HASH + this.element.id) && (isNullOrUndefined(this.menuId) || !closest(target, this.menuId))) ||
                scrollNav) {
                var index = 1;
                if (!isNullOrUndefined(this.menuId)) {
                    index = 0;
                    if (scrollNav) {
                        index = menus.indexOf(select(DOT + MENU, scrollNav.parentElement)) + 1;
                        if (index === menus.length) {
                            return;
                        }
                    }
                }
                this.dotnetRef.invokeMethodAsync(CLOSE, index, false, true, false);
                if (!isNullOrUndefined(this.menuId) && !closest(target, SCROLLNAV)) {
                    this.destroyMenuScroll(null);
                }
            }
            if (!isNullOrUndefined(this.menuId) && (closest(target, HASH + this.element.id) || closest(target, this.menuId)) &&
                closest(target, DOT + MENUITEM) && !closest(target, DOT + SELECTED)) {
                this.destroyMenuScroll(closest(target, DOT + MENU));
            }
        }
        if (!this.openAsMenu) {
            var activeEle = document.activeElement;
            if (!closest(activeEle, "" + HASH + this.element.id) && menus.length && activeEle.tagName == "BODY") {
                var lastChild = this.getLastMenu();
                if (lastChild) {
                    lastChild.focus();
                }
            }
        }
    };
    SfContextMenu.prototype.destroyMenuScroll = function (menu) {
        if (!select(SCROLLMENU, this.element)) {
            return;
        }
        var menuElement = select(this.menuId);
        if (menuElement) {
            var menuInstance = menuElement.blazor__instance;
            if (!isNullOrUndefined(menuInstance)) {
                menuInstance.destroyScroll(NONE, menu);
            }
        }
    };
    SfContextMenu.prototype.hideMenu = function (first) {
        var cMenu;
        if (first) {
            cMenu = select(DOT + MENU, this.element);
            if (!cMenu || isNullOrUndefined(this.element.parentElement)) {
                return null;
            }
            if (this.element.parentElement !== document.body) {
                document.body.appendChild(this.element);
            }
        }
        else {
            var menus = selectAll(DOT + MENU, this.element);
            if (menus.length < 2) {
                return null;
            }
            cMenu = menus[menus.length - 1];
        }
        cMenu.style.width = EMPTY;
        cMenu.style.visibility = HIDDEN;
        cMenu.classList.remove(TRANSPARENT);
        return cMenu;
    };
    SfContextMenu.prototype.subMenuPosition = function (cmenu, isRtl, showOnClick, isNull, scrollHeight) {
        if (!cmenu) {
            return;
        }
        var menus = selectAll(DOT + MENU, this.element);
        var parentLi = menus[menus.length - 2].querySelector("." + MENUITEM + "." + SELECTED);
        var parentOffset = parentLi.getBoundingClientRect();
        var containerOffset = this.element.getBoundingClientRect();
        var menu = cmenu.classList.contains(MENU) ? cmenu : select(DOT + MENU, cmenu);
        this.setBlankIconStyle(menu, isRtl);
        var curUlOffset = menu.getBoundingClientRect();
        var cmenuWidth = this.getMenuWidth(menu, curUlOffset.width, isRtl);
        var left;
        var borderLeft;
        if (isRtl) {
            borderLeft = parseInt(getComputedStyle(menu).borderWidth, 10);
            left = parentOffset.left - cmenuWidth - containerOffset.left;
        }
        else {
            left = parentOffset.right - containerOffset.left;
        }
        var top = parentOffset.top - containerOffset.top;
        if (isRtl) {
            if (parentOffset.left - borderLeft - cmenuWidth < document.documentElement.clientLeft) {
                if (parentOffset.right + cmenuWidth < document.documentElement.clientWidth) {
                    left = parentOffset.right - containerOffset.left;
                }
            }
        }
        else if (parentOffset.right + cmenuWidth > document.documentElement.clientWidth) {
            var newLeft = parentOffset.left - cmenuWidth;
            if (newLeft > document.documentElement.clientLeft) {
                left = newLeft - containerOffset.left;
            }
        }
        var height = scrollHeight || curUlOffset.height;
        if (parentOffset.top + height > document.documentElement.clientHeight) {
            var newTop = document.documentElement.clientHeight - height - 20;
            if (newTop > document.documentElement.clientTop) {
                top = newTop - containerOffset.top;
            }
        }
        this.subMenuOpen = !showOnClick;
        cmenu.style.left = Math.ceil(left) + PIXEL;
        cmenu.style.top = Math.ceil(top) + PIXEL;
        cmenu.style.width = Math.ceil(cmenuWidth) + PIXEL;
        menu.style.visibility = EMPTY;
        var focusedLi = menu.querySelector("" + DOT + MENUITEM + DOT + FOCUSED);
        focusedLi ? focusedLi.focus() : menu.focus();
        if (isNull) {
            this.openAsMenu = true;
        }
    };
    SfContextMenu.prototype.getLastMenu = function () {
        var menus = selectAll(DOT + MENU, this.element);
        return menus.length ? menus[menus.length - 1] : null;
    };
    SfContextMenu.prototype.onPropertyChanged = function (key, result) {
        switch (key) {
            case TARGET:
                this.addContextMenuEvent(false);
                this.target = result;
                this.addContextMenuEvent();
                break;
            case FILTER:
                this.filter = result;
                break;
        }
    };
    SfContextMenu.prototype.destroy = function (refElement) {
        this.removeEventListener();
        this.addContextMenuEvent(false);
        if (refElement && refElement.parentElement && refElement.previousElementSibling !== this.element) {
            refElement.parentElement.insertBefore(this.element, refElement);
        }
        if ((!refElement || !refElement.parentElement) && this.element.parentElement && this.element.parentElement === document.body) {
            document.body.removeChild(this.element);
        }
    };
    SfContextMenu.prototype.updateProperty = function (showItemOnClick, menu) {
        if (menu) {
            this.menuId = HASH + menu.id;
        }
        this.subMenuOpen = !showItemOnClick;
    };
    return SfContextMenu;
}());
var ContextMenu = {
    initialize: function (element, target, filter, dotnetRef) {
        if (!isNullOrUndefined(element)) {
            new SfContextMenu(element, target, filter, dotnetRef);
        }
    },
    contextMenuPosition: function (element, left, top, isRtl, subMenu, isOpen) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.contextMenuPosition(left, top, isRtl, subMenu, isOpen);
        }
    },
    subMenuPosition: function (element, isRtl, showOnClick, isNull) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var cmenu = element.blazor__instance.hideMenu();
            element.blazor__instance.subMenuPosition(cmenu, isRtl, showOnClick, isNull);
        }
    },
    onPropertyChanged: function (element, key, result) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.onPropertyChanged(key, result);
        }
    },
    destroy: function (element, refElement) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.destroy(refElement);
        }
    }
};
export default ContextMenu;
