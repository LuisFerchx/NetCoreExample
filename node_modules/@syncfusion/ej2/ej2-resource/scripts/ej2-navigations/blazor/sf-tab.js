import { closest, attributes, detach, formatUnit } from '@syncfusion/ej2-base';
import { KeyboardEvents, Browser, select, isVisible, remove } from '@syncfusion/ej2-base';
import { setStyleAttribute as setStyle, isNullOrUndefined as isNOU, selectAll, addClass, removeClass } from '@syncfusion/ej2-base';
import { EventHandler, rippleEffect, Touch, Animation, getRandomId } from '@syncfusion/ej2-base';
import { getElement, Draggable } from '@syncfusion/ej2-base';
var CLS_TAB = 'e-tab';
var CLS_HEADER = 'e-tab-header';
var CLS_BLA_TEM = 'blazor-template';
var CLS_CONTENT = 'e-content';
var CLS_NEST = 'e-nested';
var CLS_ITEM = 'e-item';
var CLS_RTL = 'e-rtl';
var CLS_ACTIVE = 'e-active';
var CLS_DISABLE = 'e-disable';
var CLS_HIDDEN = 'e-hidden';
var CLS_FOCUS = 'e-focused';
var CLS_INDICATOR = 'e-indicator';
var CLS_WRAP = 'e-tab-wrap';
var CLS_TB_ITEMS = 'e-toolbar-items';
var CLS_TB_ITEM = 'e-toolbar-item';
var CLS_TB_POP = 'e-toolbar-pop';
var CLS_TB_POPUP = 'e-toolbar-popup';
var CLS_POPUP_OPEN = 'e-popup-open';
var CLS_POPUP_CLOSE = 'e-popup-close';
var CLS_PROGRESS = 'e-progress';
var CLS_IGNORE = 'e-ignore';
var CLS_OVERLAY = 'e-overlay';
var CLS_HSCRCNT = 'e-hscroll-content';
var CLS_VSCRCNT = 'e-vscroll-content';
var CLS_VTAB = 'e-vertical-tab';
var CLS_HBOTTOM = 'e-horizontal-bottom';
var CLS_VERTICAL_ICON = 'e-vertical-icon';
var CLS_VLEFT = 'e-vertical-left';
var CLS_VRIGHT = 'e-vertical-right';
var SPACEBAR = 32;
var END = 35;
var SfTab = (function () {
    function SfTab(element, options, dotnetRef) {
        this.show = {};
        this.hide = {};
        this.draggableItems = [{}];
        this.resizeContext = this.refreshActElePosition.bind(this);
        this.keyConfigs = {
            tab: 'tab',
            home: 'home',
            end: 'end',
            enter: 'enter',
            space: 'space',
            delete: 'delete',
            moveLeft: 'leftarrow',
            moveRight: 'rightarrow',
            moveUp: 'uparrow',
            moveDown: 'downarrow'
        };
        this.element = element;
        this.element.blazor__instance = this;
        this.dotNetRef = dotnetRef;
        this.options = options;
    }
    SfTab.prototype.render = function () {
        var nested = closest(this.element, '.' + CLS_CONTENT);
        this.prevIndex = 0;
        this.isPopup = false;
        this.initRender = true;
        this.isSwipeed = false;
        if (!isNOU(nested)) {
            nested.parentElement.classList.add(CLS_NEST);
        }
        var name = Browser.info.name;
        var css = (name === 'msie') ? 'e-ie' : (name === 'edge') ? 'e-edge' : (name === 'safari') ? 'e-safari' : '';
        setStyle(this.element, { 'width': formatUnit(this.options.width), 'height': formatUnit(this.options.height) });
        attributes(this.element, { 'aria-disabled': 'false', 'aria-activedescendant': '' });
        this.setCssClass(this.element, css, true);
        this.updatePopAnimationConfig();
        this.tabId = this.element.id.length > 0 ? ('-' + this.element.id) : getRandomId();
        this.wireEvents();
        this.initRender = false;
    };
    SfTab.prototype.serverItemsChanged = function () {
        this.enableAnimation = false;
        this.setActive(this.options.selectedItem);
        if (this.options.loadOn !== 'Dynamic' && !isNOU(this.cntEle)) {
            var itemCollection = [].slice.call(this.cntEle.children);
            var content_1 = CLS_CONTENT + this.tabId + '_' + this.options.selectedItem;
            itemCollection.forEach(function (item) {
                if (item.classList.contains(CLS_ACTIVE) && item.id !== content_1) {
                    item.classList.remove(CLS_ACTIVE);
                }
                if (item.id === content_1) {
                    item.classList.add(CLS_ACTIVE);
                }
            });
            this.prevIndex = this.options.selectedItem;
            this.triggerAnimation(CLS_ITEM + this.tabId + '_' + this.options.selectedItem, false);
        }
        this.enableAnimation = true;
    };
    SfTab.prototype.headerReady = function () {
        this.initRender = true;
        this.hdrEle = this.getTabHeader();
        this.setOrientation(this.options.headerPlacement, this.hdrEle);
        this.tbItems = select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
        if (!isNOU(this.tbItems)) {
            rippleEffect(this.tbItems, { selector: '.e-tab-wrap' });
        }
        if (selectAll('.' + CLS_TB_ITEM, this.element).length > 0) {
            this.bdrLine = select('.' + CLS_INDICATOR + '.' + CLS_IGNORE, this.element);
            var scrollCnt = select('.' + this.scrCntClass, this.tbItems);
            if (!isNOU(scrollCnt)) {
                scrollCnt.insertBefore(this.bdrLine, scrollCnt.firstElementChild);
            }
            else {
                this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstElementChild);
            }
            this.select(this.options.selectedItem);
        }
        this.cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);
        if (!isNOU(this.cntEle)) {
            this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
            if (this.options.height !== 'auto' && !this.isVertical()) {
                this.cntEle.style.height = 'calc(100% - ' + this.hdrEle.offsetHeight + 'px)';
            }
        }
        if (this.options.loadOn === 'Demand') {
            var id = this.setActiveContent();
            this.triggerAnimation(id, false);
        }
        this.initRender = false;
    };
    SfTab.prototype.setActiveContent = function () {
        var id = CLS_ITEM + this.tabId + '_' + this.options.selectedItem;
        var item = this.getTrgContent(this.cntEle, this.extIndex(id));
        if (!isNOU(item)) {
            item.classList.add(CLS_ACTIVE);
        }
        return id;
    };
    SfTab.prototype.removeActiveClass = function () {
        var tabHeader = this.getTabHeader();
        if (tabHeader) {
            var tabItems = selectAll('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, tabHeader);
            removeClass(tabItems, CLS_ACTIVE);
        }
    };
    SfTab.prototype.checkPopupOverflow = function (ele) {
        this.tbPop = select('.' + CLS_TB_POP, this.element);
        var popIcon = select('.e-hor-nav', this.element);
        var tbrItems = select('.' + CLS_TB_ITEMS, this.element);
        var lastChild = tbrItems.lastChild;
        if ((!this.isVertical() && ((this.options.enableRtl && ((popIcon.offsetLeft + popIcon.offsetWidth) > tbrItems.offsetLeft))
            || (!this.options.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth))) ||
            (this.isVertical() && (popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight))) {
            ele.classList.add(CLS_TB_POPUP);
            this.tbPop.insertBefore(ele, selectAll('.' + CLS_TB_POPUP, this.tbPop)[0]);
        }
        return true;
    };
    SfTab.prototype.popupHandler = function (target) {
        var ripEle = target.querySelector('.e-ripple-element');
        if (!isNOU(ripEle)) {
            ripEle.outerHTML = '';
            target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');
        }
        this.tbItem = selectAll('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);
        var lastChild = this.tbItem[this.tbItem.length - 1];
        if (this.tbItem.length !== 0) {
            target.classList.remove(CLS_TB_POPUP);
            target.removeAttribute('style');
            this.tbItems.appendChild(target);
            if (this.checkPopupOverflow(lastChild)) {
                var prevEle = this.tbItems.lastChild.previousElementSibling;
                this.checkPopupOverflow(prevEle);
            }
            this.isPopup = true;
        }
        return selectAll('.' + CLS_TB_ITEM, this.tbItems).length - 1;
    };
    SfTab.prototype.previousContentAnimation = function (prev, current) {
        var animation;
        if (this.isPopup || prev <= current) {
            if (this.options.animation.previous.effect === 'SlideLeftIn') {
                animation = {
                    name: 'SlideLeftOut',
                    duration: this.options.animation.previous.duration, timingFunction: this.options.animation.previous.easing
                };
            }
            else {
                animation = null;
            }
        }
        else {
            if (this.options.animation.next.effect === 'SlideRightIn') {
                animation = {
                    name: 'SlideRightOut',
                    duration: this.options.animation.next.duration, timingFunction: this.options.animation.next.easing
                };
            }
            else {
                animation = null;
            }
        }
        return animation;
    };
    SfTab.prototype.triggerPreviousAnimation = function (oldCnt, prevIndex) {
        var animateObj = this.previousContentAnimation(prevIndex, this.options.selectedItem);
        if (!isNOU(animateObj)) {
            animateObj.begin = function () {
                setStyle(oldCnt, { 'position': 'absolute' });
                addClass([oldCnt], [CLS_PROGRESS, 'e-view']);
            };
            animateObj.end = function () {
                oldCnt.style.display = 'none';
                removeClass([oldCnt], [CLS_ACTIVE, CLS_PROGRESS, 'e-view']);
                setStyle(oldCnt, { 'display': '', 'position': '' });
                if (oldCnt.childNodes.length === 0) {
                    detach(oldCnt);
                }
            };
            new Animation(animateObj).animate(oldCnt);
        }
        else {
            oldCnt.classList.remove(CLS_ACTIVE);
        }
    };
    SfTab.prototype.triggerAnimation = function (id, value) {
        var _this = this;
        var prevIndex = this.prevIndex;
        var oldCnt;
        var newCnt;
        if (this.options.loadOn !== 'Dynamic') {
            var itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT).children);
            itemCollection.forEach(function (item) {
                if (item.id === _this.prevActiveEle) {
                    oldCnt = item;
                }
            });
            var prevEle = this.tbItem[prevIndex];
            newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));
            if (isNOU(oldCnt) && !isNOU(prevEle)) {
                var idNo = this.extIndex(prevEle.id);
                oldCnt = this.getTrgContent(this.cntEle, idNo);
            }
        }
        else {
            newCnt = this.cntEle.firstElementChild;
        }
        if (!isNOU(newCnt)) {
            this.prevActiveEle = newCnt.id;
        }
        if (this.initRender || value === false || this.options.animation === {} || isNOU(this.options.animation)) {
            if (oldCnt && oldCnt !== newCnt) {
                oldCnt.classList.remove(CLS_ACTIVE);
            }
            return;
        }
        var cnt = select('.' + CLS_CONTENT, this.element);
        var animateObj;
        if (this.prevIndex > this.options.selectedItem && !this.isPopup) {
            var openEff = this.options.animation.previous.effect;
            animateObj = {
                name: ((openEff === 'None') ? '' : ((openEff !== 'SlideLeftIn') ? openEff : 'SlideLeftIn')),
                duration: this.options.animation.previous.duration,
                timingFunction: this.options.animation.previous.easing
            };
        }
        else if (this.isPopup || this.prevIndex < this.options.selectedItem || this.prevIndex === this.options.selectedItem) {
            var clsEff = this.options.animation.next.effect;
            animateObj = {
                name: ((clsEff === 'None') ? '' : ((clsEff !== 'SlideRightIn') ? clsEff : 'SlideRightIn')),
                duration: this.options.animation.next.duration,
                timingFunction: this.options.animation.next.easing
            };
        }
        animateObj.progress = function () {
            cnt.classList.add(CLS_PROGRESS);
            _this.setActiveBorder();
        };
        animateObj.end = function () {
            cnt.classList.remove(CLS_PROGRESS);
            newCnt.classList.add(CLS_ACTIVE);
        };
        if (!this.initRender && !isNOU(oldCnt)) {
            this.triggerPreviousAnimation(oldCnt, prevIndex);
        }
        this.isPopup = false;
        if (animateObj.name === '') {
            newCnt.classList.add(CLS_ACTIVE);
        }
        else {
            new Animation(animateObj).animate(newCnt);
        }
    };
    SfTab.prototype.keyPressed = function (trg) {
        var trgParent = closest(trg, '.' + CLS_HEADER + ' .' + CLS_TB_ITEM);
        var trgIndex = this.getEleIndex(trgParent);
        if (!isNOU(this.popEle) && trg.classList.contains('e-hor-nav')) {
            if (this.popEle.classList.contains(CLS_POPUP_OPEN)) {
                this.popObj.hide(this.hide);
            }
            else {
                this.popObj.show(this.show);
            }
        }
        else if (trg.classList.contains('e-scroll-nav')) {
            trg.click();
        }
        else {
            if (!isNOU(trgParent) && trgParent.classList.contains(CLS_ACTIVE) === false) {
                this.select(trgIndex);
                if (!isNOU(this.popEle)) {
                    this.popObj.hide(this.hide);
                }
            }
        }
    };
    SfTab.prototype.getTabHeader = function () {
        var headers = [].slice.call(this.element.children).filter(function (e) { return e.classList.contains(CLS_HEADER); });
        if (headers.length > 0) {
            return headers[0];
        }
        else {
            var wrap = [].slice.call(this.element.children).filter(function (e) { return !e.classList.contains(CLS_BLA_TEM); })[0];
            if (!wrap) {
                return undefined;
            }
            return [].slice.call(wrap.children).filter(function (e) { return e.classList.contains(CLS_HEADER); })[0];
        }
    };
    SfTab.prototype.getEleIndex = function (item) {
        return Array.prototype.indexOf.call(selectAll('.' + CLS_TB_ITEM, this.getTabHeader()), item);
    };
    SfTab.prototype.extIndex = function (id) {
        return id.replace(CLS_ITEM + this.tabId + '_', '');
    };
    SfTab.prototype.getTrgContent = function (cntEle, no) {
        var ele;
        if (this.element.classList.contains(CLS_NEST)) {
            ele = select('.' + CLS_NEST + '> .' + CLS_CONTENT + ' > #' + CLS_CONTENT + this.tabId + '_' + no, this.element);
        }
        else {
            ele = this.findEle(cntEle.children, CLS_CONTENT + this.tabId + '_' + no);
        }
        return ele;
    };
    SfTab.prototype.findEle = function (items, key) {
        var ele;
        for (var i = 0; i < items.length; i++) {
            if (items[i].id === key) {
                ele = items[i];
                break;
            }
        }
        return ele;
    };
    SfTab.prototype.isVertical = function () {
        var isVertical = (this.options.headerPlacement === 'Left' || this.options.headerPlacement === 'Right') ? true : false;
        this.scrCntClass = (isVertical) ? CLS_VSCRCNT : CLS_HSCRCNT;
        return isVertical;
    };
    SfTab.prototype.updatePopAnimationConfig = function () {
        this.show = { name: (this.isVertical() ? 'FadeIn' : 'SlideDown'), duration: 100 };
        this.hide = { name: (this.isVertical() ? 'FadeOut' : 'SlideUp'), duration: 100 };
    };
    SfTab.prototype.focusItem = function () {
        var curActItem = select(' #' + CLS_ITEM + this.tabId + '_' + this.options.selectedItem, this.hdrEle);
        if (!isNOU(curActItem)) {
            curActItem.firstElementChild.focus();
        }
    };
    SfTab.prototype.serverChangeOrientation = function (newProp, tbarEle, isVertical, isChange) {
        this.setOrientation(newProp, this.hdrEle);
        removeClass([this.element], [CLS_VTAB, CLS_VLEFT, CLS_VRIGHT]);
        if (isChange) {
            this.changeToolbarOrientation(tbarEle, isVertical);
        }
        if (this.isVertical()) {
            var tbPos = (this.options.headerPlacement === 'Left') ? CLS_VLEFT : CLS_VRIGHT;
            if (!this.element.classList.contains(CLS_NEST)) {
                addClass([this.element], [CLS_VTAB, tbPos]);
            }
            else {
                addClass([this.hdrEle], [CLS_VTAB, tbPos]);
            }
        }
        this.setActiveBorder();
        this.focusItem();
    };
    SfTab.prototype.changeToolbarOrientation = function (toolbarEle, isVertical) {
        if (!isNOU(toolbarEle) && !isNOU(toolbarEle.blazor__instance)) {
            toolbarEle.blazor__instance.options.width = (isVertical ? 'auto' : '100%');
            toolbarEle.blazor__instance.options.height = (isVertical ? '100%' : 'auto');
            toolbarEle.blazor__instance.options.isVertical = isVertical;
            toolbarEle.blazor__instance.changeOrientation();
        }
        this.updatePopAnimationConfig();
    };
    SfTab.prototype.setOrientation = function (place, ele) {
        var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
        var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector('.' + CLS_CONTENT));
        if (place === 'Bottom' && (contentPos > headerPos)) {
            this.element.appendChild(ele);
        }
        else {
            removeClass([ele], [CLS_HBOTTOM]);
            this.element.insertBefore(ele, select('.' + CLS_CONTENT, this.element));
        }
    };
    SfTab.prototype.setCssClass = function (ele, cls, val) {
        if (cls === '') {
            return;
        }
        if (val) {
            addClass([ele], cls.split(' '));
        }
        else {
            removeClass([ele], cls.split(' '));
        }
    };
    SfTab.prototype.setActiveBorder = function () {
        var trgHdrEle = this.getTabHeader();
        var trg = select('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, trgHdrEle);
        if (trg === null) {
            return;
        }
        if (trg.classList.contains(CLS_TB_POPUP)) {
            this.popupHandler(trg);
        }
        var root = closest(trg, '.' + CLS_TAB);
        if (this.element !== root) {
            return;
        }
        this.tbItems = select('.' + CLS_TB_ITEMS, trgHdrEle);
        var bar = select('.' + CLS_INDICATOR, trgHdrEle);
        var scrollCnt = select('.' + CLS_TB_ITEMS + ' .' + this.scrCntClass, trgHdrEle);
        if (this.isVertical()) {
            setStyle(bar, { 'left': '', 'right': '' });
            var tbHeight = (isNOU(scrollCnt)) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;
            if (tbHeight !== 0) {
                setStyle(bar, { 'top': trg.offsetTop + 'px', 'height': trg.offsetHeight + 'px' });
            }
            else {
                setStyle(bar, { 'top': 0, 'height': 0 });
            }
        }
        else {
            setStyle(bar, { 'top': '', 'height': '' });
            var tbWidth = (isNOU(scrollCnt)) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;
            if (tbWidth !== 0) {
                setStyle(bar, { 'left': trg.offsetLeft + 'px', 'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px' });
            }
            else {
                setStyle(bar, { 'left': 'auto', 'right': 'auto' });
            }
        }
        if (!isNOU(this.bdrLine)) {
            this.bdrLine.classList.remove(CLS_HIDDEN);
        }
    };
    SfTab.prototype.setActive = function (value) {
        this.tbItem = selectAll('.' + CLS_TB_ITEM, this.getTabHeader());
        if (isNOU(this.hdrEle)) {
            this.hdrEle = this.getTabHeader();
        }
        var trg = this.hdrEle.querySelector('.' + CLS_TB_ITEM + '[data-index="' + value + '"]');
        if (!trg || value < 0 || isNaN(value) || this.tbItem.length === 0) {
            return;
        }
        this.options.selectedItem = value;
        if (trg.classList.contains(CLS_ACTIVE)) {
            this.setActiveBorder();
            return;
        }
        var prev = this.tbItem[this.prevIndex];
        if (!isNOU(prev)) {
            prev.removeAttribute('aria-controls');
        }
        attributes(trg, { 'aria-controls': CLS_CONTENT + this.tabId + '_' + value });
        var id = trg.id;
        this.removeActiveClass();
        trg.classList.add(CLS_ACTIVE);
        trg.setAttribute('aria-selected', 'true');
        var no = Number(this.extIndex(id));
        if (isNOU(this.prevActiveEle)) {
            this.prevActiveEle = CLS_CONTENT + this.tabId + '_' + no;
        }
        attributes(this.element, { 'aria-activedescendant': id });
        if (this.options.loadOn === 'Init') {
            this.cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);
            var item = this.getTrgContent(this.cntEle, this.extIndex(id));
            if (!isNOU(item)) {
                item.classList.add(CLS_ACTIVE);
            }
            this.triggerAnimation(id, this.enableAnimation);
        }
        this.setActiveBorder();
        this.refreshItemVisibility(trg);
        if (!this.initRender) {
            trg.firstElementChild.focus();
        }
    };
    SfTab.prototype.contentReady = function () {
        var id = this.setActiveContent();
        this.triggerAnimation(id, this.enableAnimation);
    };
    SfTab.prototype.setRTL = function (value) {
        this.setCssClass(this.element, CLS_RTL, value);
        this.refreshActiveBorder();
    };
    SfTab.prototype.refreshActiveBorder = function () {
        if (!isNOU(this.bdrLine)) {
            this.bdrLine.classList.add(CLS_HIDDEN);
        }
        this.setActiveBorder();
    };
    SfTab.prototype.setDragAndDrop = function (isDragAndDrop) {
        if (isDragAndDrop) {
            this.bindDraggable();
        }
        else {
            if (this.draggableItems) {
                this.draggableItems.forEach(function (item) {
                    if (item && Object.keys(item).length !== 0) {
                        item.destroy();
                    }
                });
            }
        }
    };
    SfTab.prototype.showPopup = function (config) {
        var tbPop = select('.e-popup.e-toolbar-pop', this.hdrEle);
        if (tbPop.classList.contains('e-popup-close')) {
            var tbPopObj = (tbPop && tbPop.ej2_instances[0]);
            tbPopObj.position.X = (this.options.headerPlacement === 'Left') ? 'left' : 'right';
            tbPopObj.dataBind();
            tbPopObj.show(config);
        }
    };
    SfTab.prototype.initializeDrag = function (target) {
        var _this = this;
        this.options.dragArea = !isNOU(this.options.dragArea) ? this.options.dragArea : '#' + this.element.id + ' ' + ('.' + CLS_HEADER);
        var dragObj = new Draggable(target, {
            dragArea: this.options.dragArea,
            dragTarget: '.' + CLS_TB_ITEM,
            clone: true,
            helper: this.helper.bind(this),
            dragStart: this.itemDragStart.bind(this),
            drag: function (e) {
                var dragIndex = _this.getEleIndex(_this.dragItem);
                var dropIndex;
                if (!isNOU(e.target.closest('.' + CLS_TAB)) && !e.target.closest('.' + CLS_TAB).isEqualNode(_this.element) && _this.options.dragArea !== '.' + CLS_HEADER) {
                    return;
                }
                if (!(e.target.closest(_this.options.dragArea)) && _this.options.overflowMode !== 'Popup') {
                    document.body.style.cursor = 'not-allowed';
                    addClass([_this.cloneElement], CLS_HIDDEN);
                    if (_this.dragItem.classList.contains(CLS_HIDDEN)) {
                        removeClass([_this.dragItem], CLS_HIDDEN);
                    }
                    _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';
                }
                else {
                    document.body.style.cursor = '';
                    _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';
                    if (_this.cloneElement.classList.contains(CLS_HIDDEN)) {
                        removeClass([_this.cloneElement], CLS_HIDDEN);
                    }
                }
                if (_this.options.overflowMode === 'Scrollable' && !isNOU(_this.element.querySelector('.e-hscroll'))) {
                    var scrollRightNavEle = _this.element.querySelector('.e-scroll-right-nav');
                    var scrollLeftNavEle = _this.element.querySelector('.e-scroll-left-nav');
                    var hscrollBar = _this.element.querySelector('.e-hscroll-bar');
                    if (!isNOU(scrollRightNavEle) && Math.abs((scrollRightNavEle.offsetWidth / 2) +
                        scrollRightNavEle.offsetLeft) > _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                        hscrollBar.scrollLeft -= 10;
                    }
                    if (!isNOU(scrollLeftNavEle) && Math.abs((scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth) -
                        _this.cloneElement.offsetLeft) > (scrollLeftNavEle.offsetWidth / 2)) {
                        hscrollBar.scrollLeft += 10;
                    }
                }
                _this.cloneElement.style.pointerEvents = 'none';
                var x = _this.cloneElement.getBoundingClientRect().left;
                var y = _this.cloneElement.getBoundingClientRect().top;
                var ele = document.elementFromPoint(x, y);
                var dropItem = closest(ele, '.' + CLS_TB_ITEM);
                var scrollContentWidth = 0;
                if (_this.options.overflowMode === 'Scrollable' && !isNOU(_this.element.querySelector('.e-hscroll'))) {
                    scrollContentWidth = _this.element.querySelector('.e-hscroll-content').offsetWidth;
                }
                if (dropItem != null && !dropItem.isSameNode(_this.dragItem) &&
                    dropItem.closest('.' + CLS_TAB).isSameNode(_this.dragItem.closest('.' + CLS_TAB))) {
                    dropIndex = _this.getEleIndex(dropItem);
                    if (dropIndex < dragIndex &&
                        (Math.abs((dropItem.offsetLeft + dropItem.offsetWidth) -
                            _this.cloneElement.offsetLeft) > (dropItem.offsetWidth / 2))) {
                        _this.dragAction(dropItem, dragIndex, dropIndex);
                    }
                    if (dropIndex > dragIndex &&
                        (Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft -
                            scrollContentWidth) < _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                        _this.dragAction(dropItem, dragIndex, dropIndex);
                    }
                }
                _this.droppedIndex = _this.getEleIndex(_this.dragItem);
            },
            dragStop: this.itemDragStop.bind(this)
        });
        this.draggableItems.push(dragObj);
    };
    SfTab.prototype.helper = function (e) {
        if (e.element) {
            this.cloneElement = (e.element.cloneNode(true));
            addClass([this.cloneElement], ['e-tab-clone-element', CLS_TAB]);
            removeClass([this.cloneElement.querySelector('.' + CLS_WRAP)], 'e-ripple');
            if (!isNOU(this.cloneElement.querySelector('.e-ripple-element'))) {
                remove(this.cloneElement.querySelector('.e-ripple-element'));
            }
            document.body.appendChild(this.cloneElement);
        }
        return this.cloneElement;
    };
    SfTab.prototype.itemDragStart = function (e) {
        var _this = this;
        this.dragItem = e.element;
        this.dragStartIndex = this.getEleIndex(this.dragItem);
        var toolbarEle = this.element.querySelector('.e-toolbar');
        this.dotNetRef.invokeMethodAsync('OnDragStart', this.dragStartIndex).then(function (isCancel) {
            if (isCancel) {
                detach(_this.cloneElement);
            }
            else {
                _this.removeActiveClass();
                addClass([_this.tbItems.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN);
                _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';
                e.bindEvents(getElement(e.dragElement));
            }
        });
    };
    SfTab.prototype.dragAction = function (dropItem, dragsIndex, dropIndex) {
        if (this.options.overflowMode === 'MultiRow') {
            dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
        }
        if (dragsIndex > dropIndex) {
            if (!(this.dragItem.parentElement).isSameNode(dropItem.parentElement)) {
                if (this.options.overflowMode === 'Extended') {
                    if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {
                        var popupContainer = this.dragItem.parentNode;
                        dropItem.parentNode.insertBefore(this.dragItem, dropItem);
                        popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);
                    }
                    else {
                        this.dragItem.parentNode.insertBefore((dropItem.parentElement.lastChild), this.dragItem.parentElement.childNodes[0]);
                        dropItem.parentNode.insertBefore(this.dragItem, dropItem);
                    }
                }
                else {
                    var lastEle = (dropItem.parentElement).lastChild;
                    if (dropItem.isSameNode(lastEle)) {
                        var popupContainer = this.dragItem.parentNode;
                        dropItem.parentNode.insertBefore(this.dragItem, dropItem);
                        popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);
                    }
                    else {
                        this.dragItem.parentNode.insertBefore((dropItem.parentElement).lastChild, this.dragItem.parentElement.childNodes[0]);
                        dropItem.parentNode.insertBefore(this.dragItem, dropItem);
                    }
                }
            }
            else {
                this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
        }
        if (dragsIndex < dropIndex) {
            if (!(this.dragItem.parentElement).isSameNode(dropItem.parentElement)) {
                if (this.options.overflowMode === 'Extended') {
                    this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);
                    dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);
                }
                else {
                    this.dragItem.parentNode.insertBefore((dropItem.parentElement).lastChild, this.dragItem.parentElement.childNodes[0]);
                    dropItem.parentNode.insertBefore(this.dragItem, dropItem);
                }
            }
            else {
                this.dragItem.parentNode.insertBefore(dropItem, this.dragItem);
            }
        }
    };
    SfTab.prototype.itemDragStop = function (e) {
        detach(this.cloneElement);
        var toolbarEle = this.element.querySelector('.e-toolbar');
        this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';
        addClass([toolbarEle], 'e-drag-action');
        document.body.style.cursor = '';
        var left = this.getXYValue(e.event, 'X');
        var top = this.getXYValue(e.event, 'Y');
        this.dotNetRef.invokeMethodAsync('Dragged', this.droppedIndex, this.dragStartIndex, left, top);
    };
    SfTab.prototype.getXYValue = function (e, direction) {
        var touchList = e.changedTouches;
        var value;
        if (direction === 'X') {
            value = touchList ? touchList[0].clientX : e.clientX;
        }
        else {
            value = touchList ? touchList[0].clientY : e.clientY;
        }
        return Math.ceil(value);
    };
    SfTab.prototype.bindDraggable = function () {
        var _this = this;
        if (this.options.allowDragAndDrop) {
            var items = this.element.querySelectorAll('.' + CLS_TB_ITEM);
            items.forEach(function (element) {
                if (isNOU(_this.options.dragArea)) {
                    _this.options.dragArea = '#' + _this.element.id + ' ' + ('.' + CLS_HEADER);
                }
                if (!element.classList.contains('e-draggable')) {
                    _this.initializeDrag(element);
                }
            });
        }
    };
    SfTab.prototype.wireEvents = function () {
        this.bindDraggable();
        window.addEventListener('resize', this.resizeContext);
        EventHandler.add(this.element, 'keydown', this.spaceKeyDown, this);
        if (!isNOU(this.cntEle)) {
            this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
        }
        this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
        this.tabKeyModule = new KeyboardEvents(this.element, {
            keyAction: this.keyHandler.bind(this),
            keyConfigs: { openPopup: 'shift+f10', tab: 'tab', shiftTab: 'shift+tab' },
            eventName: 'keydown'
        });
    };
    SfTab.prototype.unWireEvents = function () {
        this.keyModule.destroy();
        this.tabKeyModule.destroy();
        if (!isNOU(this.cntEle)) {
            this.touchModule.destroy();
        }
        window.removeEventListener('resize', this.resizeContext);
        EventHandler.remove(this.element, 'keydown', this.spaceKeyDown);
        removeClass([this.element], [CLS_RTL, CLS_FOCUS]);
    };
    SfTab.prototype.swipeHandler = function (e) {
        if (e.velocity < 3 && isNOU(e.originalEvent.changedTouches)) {
            return;
        }
        if (e.originalEvent) {
            e.originalEvent.stopPropagation();
        }
        this.isSwipeed = true;
        if (e.swipeDirection === 'Right' && this.options.selectedItem !== 0) {
            for (var k = this.options.selectedItem - 1; k >= 0; k--) {
                if (!this.tbItem[k].classList.contains(CLS_HIDDEN) && !this.tbItem[k].classList.contains(CLS_DISABLE)) {
                    this.select(k);
                    break;
                }
            }
        }
        else if (e.swipeDirection === 'Left' && (this.options.selectedItem !== selectAll('.' + CLS_TB_ITEM, this.element).length - 1)) {
            for (var i = this.options.selectedItem + 1; i < this.tbItem.length; i++) {
                if (!this.tbItem[i].classList.contains(CLS_HIDDEN) && !this.tbItem[i].classList.contains(CLS_DISABLE)) {
                    this.select(i);
                    break;
                }
            }
        }
        this.isSwipeed = false;
    };
    SfTab.prototype.spaceKeyDown = function (e) {
        if ((e.keyCode === SPACEBAR && e.which === SPACEBAR) || (e.keyCode === END && e.which === END)) {
            var clstHead = closest(e.target, '.' + CLS_HEADER);
            if (!isNOU(clstHead)) {
                e.preventDefault();
            }
        }
    };
    SfTab.prototype.keyHandler = function (e) {
        if (this.element.classList.contains(CLS_DISABLE)) {
            return;
        }
        this.element.classList.add(CLS_FOCUS);
        var trg = e.target;
        var tabHeader = this.getTabHeader();
        var actEle = select('.' + CLS_ACTIVE, tabHeader);
        this.popEle = select('.' + CLS_TB_POP, tabHeader);
        if (!isNOU(this.popEle)) {
            this.popObj = this.popEle.ej2_instances[0];
        }
        var item;
        var trgParent;
        switch (e.action) {
            case 'space':
            case 'enter':
                if (trg.parentElement.classList.contains(CLS_DISABLE)) {
                    return;
                }
                if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {
                    this.showPopup(this.show);
                    break;
                }
                this.keyPressed(trg);
                break;
            case 'tab':
            case 'shiftTab':
                if (trg.classList.contains(CLS_WRAP)
                    && closest(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE) === false) {
                    trg.setAttribute('tabindex', '-1');
                }
                if (this.popObj && isVisible(this.popObj.element)) {
                    this.popObj.hide(this.hide);
                }
                actEle.children.item(0).setAttribute('tabindex', '0');
                break;
            case 'moveLeft':
            case 'moveRight':
                item = closest(document.activeElement, '.' + CLS_TB_ITEM);
                if (!isNOU(item)) {
                    this.refreshItemVisibility(item);
                }
                break;
            case 'openPopup':
                e.preventDefault();
                if (!isNOU(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
                    this.popObj.show(this.show);
                }
                break;
            case 'delete':
                trgParent = closest(trg, '.' + CLS_TB_ITEM);
                if (this.options.showCloseButton === true && !isNOU(trgParent)) {
                    if (this.getEleIndex(trgParent) === -1) {
                        return;
                    }
                    var nxtSib = trgParent.nextSibling;
                    if (!isNOU(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
                        nxtSib.firstElementChild.focus();
                    }
                    this.dotNetRef.invokeMethodAsync('RemoveTab', parseInt(trgParent.getAttribute('data-index'), 10));
                }
                this.setActiveBorder();
                break;
        }
    };
    SfTab.prototype.refreshActElePosition = function () {
        var activeEle = select('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE, this.element);
        if (!isNOU(activeEle)) {
            this.select(this.getEleIndex(activeEle));
        }
        this.refreshActiveBorder();
    };
    SfTab.prototype.refreshItemVisibility = function (target) {
        var scrCnt = select('.' + this.scrCntClass, this.tbItems);
        if (!this.isVertical() && !isNOU(scrCnt)) {
            var scrBar = select('.e-hscroll-bar', this.tbItems);
            var scrStart = scrBar.scrollLeft;
            var scrEnd = scrStart + scrBar.offsetWidth;
            var eleStart = target.offsetLeft;
            var eleWidth = target.offsetWidth;
            var eleEnd = target.offsetLeft + target.offsetWidth;
            if ((scrStart < eleStart) && (scrEnd < eleEnd)) {
                var eleViewRange = scrEnd - eleStart;
                scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
            }
            else {
                if ((scrStart > eleStart) && (scrEnd > eleEnd)) {
                    var eleViewRange = eleEnd - scrStart;
                    scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
                }
            }
        }
        else {
            return;
        }
    };
    SfTab.prototype.enableTab = function (index, value) {
        var tbItems = selectAll('.' + CLS_TB_ITEM, this.element)[index];
        if (isNOU(tbItems)) {
            return;
        }
        if (value === true) {
            tbItems.classList.remove(CLS_DISABLE, CLS_OVERLAY);
            tbItems.firstElementChild.setAttribute('tabindex', '-1');
        }
        else {
            tbItems.classList.add(CLS_DISABLE, CLS_OVERLAY);
            tbItems.firstElementChild.removeAttribute('tabindex');
            if (tbItems.classList.contains(CLS_ACTIVE)) {
                this.select(index + 1);
            }
        }
        tbItems.setAttribute('aria-disabled', (value === true) ? 'false' : 'true');
    };
    SfTab.prototype.hideTab = function (index, value) {
        if (value === void 0) { value = true; }
        var items;
        var item = selectAll('.' + CLS_TB_ITEM, this.element)[index];
        if (isNOU(item)) {
            return;
        }
        this.bdrLine.classList.add(CLS_HIDDEN);
        if (value) {
            item.classList.add(CLS_HIDDEN);
            items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN + ')', this.tbItems);
            if (items.length !== 0 && item.classList.contains(CLS_ACTIVE)) {
                if (index !== 0) {
                    for (var i = index - 1; i >= 0; i--) {
                        if (!this.tbItem[i].classList.contains(CLS_HIDDEN)) {
                            this.select(i);
                            break;
                        }
                        else if (i === 0) {
                            for (var k = index + 1; k < this.tbItem.length; k++) {
                                if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
                                    this.select(k);
                                    break;
                                }
                            }
                        }
                    }
                }
                else {
                    for (var k = index + 1; k < this.tbItem.length; k++) {
                        if (!this.tbItem[k].classList.contains(CLS_HIDDEN)) {
                            this.select(k);
                            break;
                        }
                    }
                }
            }
            else if (items.length === 0) {
                this.element.classList.add(CLS_HIDDEN);
            }
        }
        else {
            this.element.classList.remove(CLS_HIDDEN);
            items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN + ')', this.tbItems);
            item.classList.remove(CLS_HIDDEN);
            if (items.length === 0) {
                this.select(index);
            }
        }
        this.setActiveBorder();
        item.setAttribute('aria-hidden', '' + value);
    };
    SfTab.prototype.select = function (args) {
        var tabHeader = this.getTabHeader();
        this.tbItems = select('.' + CLS_TB_ITEMS, tabHeader);
        this.tbItem = selectAll('.' + CLS_TB_ITEM, tabHeader);
        this.prevItem = this.tbItem[this.prevIndex];
        var value;
        var selectedItem = this.options.selectedItem;
        if (isNOU(selectedItem) || (selectedItem < 0) || (this.tbItem.length <= selectedItem) || isNaN(selectedItem)) {
            this.options.selectedItem = 0;
        }
        var trg = this.tbItem[args];
        if (!isNOU(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE)) {
            this.prevItem.children.item(0).setAttribute('tabindex', '-1');
        }
        if (!this.initRender) {
            if (trg) {
                value = parseInt(trg.getAttribute('data-index'), 10);
            }
            var eventArg = {
                previousItem: this.prevItem,
                previousIndex: this.prevIndex,
                selectedItem: this.tbItem[this.options.selectedItem],
                selectedIndex: this.options.selectedItem,
                selectedContent: null,
                selectingItem: trg,
                selectingIndex: value,
                selectingContent: null,
                isSwiped: this.isSwipeed,
                cancel: false
            };
            this.dotNetRef.invokeMethodAsync('SelectingEvent', eventArg, value);
        }
        else {
            this.selectingContent(args);
        }
    };
    SfTab.prototype.setPersistence = function (elementId, selectedItem) {
        if (this.options.enablePersistence) {
            window.localStorage.setItem(elementId, selectedItem);
        }
    };
    SfTab.prototype.selectingContent = function (args) {
        this.tbItem = selectAll('.' + CLS_TB_ITEM, this.hdrEle);
        if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
            this.prevIndex = this.options.selectedItem;
            var item = this.hdrEle.querySelector('.' + CLS_TB_ITEM + '[data-index="' + args + '"]');
            if (item && item.classList.contains(CLS_TB_POPUP)) {
                this.popupHandler(item);
            }
            this.setActive(args);
        }
        else {
            this.setActive(0);
        }
    };
    SfTab.prototype.disable = function (value) {
        this.setCssClass(this.element, CLS_DISABLE, value);
        this.element.setAttribute('aria-disabled', '' + value);
    };
    SfTab.prototype.headerItemsUpdate = function (args) {
        var tabHeader = this.getTabHeader();
        this.tbItems = select('.' + CLS_TB_ITEMS, tabHeader);
        this.tbItem = selectAll('.' + CLS_TB_ITEM, tabHeader);
        this.prevItem = this.tbItem[this.prevIndex];
        if (!isNOU(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE)) {
            this.prevItem.children.item(0).setAttribute('tabindex', '-1');
        }
        this.selectingContent(args);
    };
    SfTab.prototype.destroy = function () {
        var _this = this;
        this.unWireEvents();
        ['aria-disabled', 'aria-activedescendant', 'tabindex'].forEach(function (val) {
            _this.element.removeAttribute(val);
        });
    };
    SfTab.prototype.getContentElement = function (index) {
        return select('.' + CLS_CONTENT + ' #' + CLS_CONTENT + this.tabId + '_' + index, this.element);
    };
    return SfTab;
}());
var Tab = {
    initialize: function (element, options, dotnetRef, isLoaded, isCreatedEvent) {
        if (element) {
            var instance = new SfTab(element, options, dotnetRef);
            instance.render();
            if (isLoaded) {
                instance.headerReady();
                if (!isCreatedEvent) {
                    instance.dotNetRef.invokeMethodAsync('CreatedEvent', null);
                }
            }
        }
    },
    headerReady: function (element, isCreatedEvent) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.headerReady();
            if (!isCreatedEvent) {
                element.blazor__instance.dotNetRef.invokeMethodAsync('CreatedEvent', null);
            }
        }
    },
    contentReady: function (element, selectingIndex, isPopup) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.classList.remove(CLS_FOCUS);
            element.blazor__instance.isPopup = isPopup;
            element.blazor__instance.headerItemsUpdate(selectingIndex);
            element.blazor__instance.setPersistence('tab' + element.id, selectingIndex.toString());
            if (element.blazor__instance.options.loadOn !== 'Init') {
                element.blazor__instance.contentReady();
            }
        }
    },
    selectingContent: function (element, selectingIndex) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.selectingContent(selectingIndex);
            element.blazor__instance.setPersistence('tab' + element.id, selectingIndex.toString());
            if (element.blazor__instance.options.loadOn !== 'Init') {
                element.blazor__instance.contentReady();
            }
        }
    },
    serverItemsChanged: function (element, selectedItem, animation, isVerticalIcon) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.options.selectedItem = selectedItem;
            element.blazor__instance.options.animation = animation;
            if (!isNOU(element.querySelector('.e-toolbar'))) {
                removeClass([element.querySelector('.e-toolbar')], 'e-drag-action');
                removeClass([element.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN);
            }
            if (isVerticalIcon) {
                addClass([element], CLS_VERTICAL_ICON);
            }
            else {
                removeClass([element], CLS_VERTICAL_ICON);
            }
            element.blazor__instance.serverItemsChanged();
            if (this.options.allowDragAndDrop) {
                element.blazor__instance.bindDraggable();
            }
        }
    },
    enableTab: function (element, index, value) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.enableTab(index, value);
        }
    },
    hideTab: function (element, index, value) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.hideTab(index, value);
        }
    },
    select: function (element, index) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.select(index);
        }
    },
    disable: function (element, value) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.disable(value);
        }
    },
    setCssClass: function (element, cssClass) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            if (element.blazor__instance.options.cssClass !== '') {
                element.blazor__instance.setCssClass(element, element.blazor__instance.options.cssClass, false);
            }
            element.blazor__instance.setCssClass(element, cssClass, true);
            element.blazor__instance.options.cssClass = cssClass;
        }
    },
    showCloseButton: function (element, showCloseButton) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.options.showCloseButton = showCloseButton;
            element.blazor__instance.refreshActElePosition();
        }
    },
    headerPlacement: function (element, headerPlacement, selectedItem, toolbarEle, toolbarCssClass, isVertical, isOrientationChange) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.options.headerPlacement = headerPlacement;
            element.blazor__instance.options.selectedItem = selectedItem;
            if (!isNOU(toolbarEle) && !isNOU(toolbarEle.blazor__instance)) {
                toolbarEle.blazor__instance.setCssClass(toolbarCssClass);
            }
            element.blazor__instance.serverChangeOrientation(headerPlacement, toolbarEle, isVertical, isOrientationChange);
        }
    },
    enableRtl: function (element, enableRtl) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.options.enableRtl = enableRtl;
            element.blazor__instance.setRTL(enableRtl);
        }
    },
    overflowMode: function (element) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.refreshActElePosition();
        }
    },
    allowDragAndDrop: function (element, allowDragAndDrop) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.options.allowDragAndDrop = allowDragAndDrop;
            element.blazor__instance.setDragAndDrop(allowDragAndDrop);
        }
    },
    refresh: function (element) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.refreshActiveBorder();
        }
    },
    destroy: function (element, elementId, selectedItem) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            element.blazor__instance.setPersistence(elementId, selectedItem);
            element.blazor__instance.destroy();
        }
    },
    getTabItem: function (element, index) {
        if (!isNOU(element)) {
            var dom = element.querySelector('.' + CLS_TB_ITEM + '[data-index="' + index + '"]');
            if (dom) {
                return JSON.stringify(window.sfBlazor.getDomObject('tabitem', dom));
            }
        }
        return null;
    },
    getTabContent: function (element, index) {
        if (!isNOU(element) && !isNOU(element.blazor__instance)) {
            var dom = element.blazor__instance.getContentElement(index);
            if (dom) {
                return JSON.stringify(window.sfBlazor.getDomObject('tabcontent', dom));
            }
        }
        return null;
    }
};
export default Tab;
