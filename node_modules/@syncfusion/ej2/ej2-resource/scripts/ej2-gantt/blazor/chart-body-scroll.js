import { EventHandler, isNullOrUndefined, formatUnit } from '@syncfusion/ej2-base';
import * as cls from './css-constants';
var ChartScroll = (function () {
    function ChartScroll(ganttParent, element, ganttHeight, contentHeight) {
        this.previousScroll = { top: 0, left: 0 };
        this.parent = ganttParent;
        this.isFromTreeGrid = false;
        this.chartElement = element.querySelector('.e-gantt-chart-pane');
        this.element = element.querySelector('.e-chart-scroll-container');
        this.timelineHeaderElement = element.querySelector('.e-timeline-header-container');
        this.holidaySpanElement = element.querySelectorAll('.' + cls.holidayLabel);
        this.addEventListeners();
        this.ChartHeight(element, ganttHeight);
        if (!isNullOrUndefined(this.holidaySpanElement)) {
            this.UpdateHolidayLabel(contentHeight);
        }
    }
    ChartScroll.prototype.addEventListeners = function () {
        EventHandler.add(this.element, 'scroll', this.onScroll, this);
        EventHandler.add(this.chartElement, 'mousedown', this.mouseDownHandler, this);
    };
    ChartScroll.prototype.removeEventListeners = function () {
        EventHandler.remove(this.element, 'scroll', this.onScroll);
        EventHandler.remove(this.chartElement, 'mousedown', this.mouseDownHandler);
    };
    ChartScroll.prototype.gridScrollHandler = function (top) {
        this.element.scrollTop = top;
        this.isFromTreeGrid = true;
    };
    ChartScroll.prototype.onScroll = function () {
        if (this.element.scrollLeft !== this.previousScroll.left) {
            this.timelineHeaderElement.scrollLeft = this.element.scrollLeft;
            this.previousScroll.left = this.element.scrollLeft;
        }
        if (this.element.scrollTop !== this.previousScroll.top) {
            if (!this.isFromTreeGrid) {
                this.parent.treeGridModule.updateScrollTop(this.element.scrollTop);
            }
            this.previousScroll.top = this.element.scrollTop;
            this.isFromTreeGrid = false;
        }
    };
    ChartScroll.prototype.mouseDownHandler = function (e) {
        var ChartElement = this.parent.getParentElement(e.target, 'e-gantt-chart');
        if (ChartElement != null) {
            var target = null;
            var cellUid = null;
            if (this.parent.getParentElement(e.target, 'e-timeline-header-container')) {
                target = "Header";
            }
            else if (this.parent.getParentElement(e.target, 'e-content')) {
                target = "Content";
                cellUid = this.parent.getParentElement(e.target, 'e-chart-row-cell') ? this.parent.getParentElement(e.target, 'e-chart-row-cell').getAttribute('data-uid') : null;
            }
            if (target == "Header" || target == "Content") {
                this.parent.dotNetRef.invokeMethodAsync("ChartMouseDownHandler", target, cellUid);
            }
        }
    };
    ChartScroll.prototype.ChartHeight = function (element, ganttHeight) {
        var toolbarHeight = 0;
        this.toolbarElement = element.querySelector('#' + element.id + '_Gantt_Toolbar');
        if (!isNullOrUndefined(this.toolbarElement)) {
            toolbarHeight = this.toolbarElement.offsetHeight;
        }
        this.viewPortHeight = ganttHeight - this.timelineHeaderElement.offsetHeight - toolbarHeight;
        this.element.style.height = this.viewPortHeight + "px";
    };
    ;
    ChartScroll.prototype.UpdateHolidayLabel = function (contentHeight) {
        var length = this.holidaySpanElement.length;
        for (var label = 0; label < length; label++) {
            this.holidaySpanElement[label].style.top = formatUnit((this.viewPortHeight < contentHeight) ? this.viewPortHeight / 2 : contentHeight / 2);
        }
    };
    ChartScroll.prototype.destroy = function () {
        this.removeEventListeners();
    };
    return ChartScroll;
}());
export { ChartScroll };
