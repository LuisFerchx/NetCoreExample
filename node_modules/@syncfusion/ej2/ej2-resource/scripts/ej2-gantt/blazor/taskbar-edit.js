var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { EventHandler, Browser, closest, isNullOrUndefined } from '@syncfusion/ej2-base';
import * as cls from './css-constants';
var TaskbarEdit = (function () {
    function TaskbarEdit(ganttParent) {
        this.parent = ganttParent;
        this.initPublicProp();
        this.ganttChartTableBody = this.parent.element.querySelector("#" + this.parent.element.id + "_chartContentBody");
        this.chartPane = this.parent.element.querySelector(".e-gantt-chart-pane");
        this.chartBodyContainer = this.parent.element.querySelector("." + cls.chartBodyContainer);
        this.addEventListeners();
    }
    TaskbarEdit.prototype.initPublicProp = function () {
        this.taskBarEditElement = null;
        this.taskBarEditRecord = null;
        this.taskBarEditAction = null;
        this.dragMouseLeave = false;
        this.isMouseDragged = false;
    };
    TaskbarEdit.prototype.addEventListeners = function () {
        var isIE11Pointer = Browser.isPointer;
        var mouseLeave = isIE11Pointer ? 'pointerleave' : 'mouseleave';
        EventHandler.add(this.chartPane, Browser.touchStartEvent, this.ganttMouseDown, this);
        EventHandler.add(this.chartPane, Browser.touchMoveEvent, this.ganttMouseMove, this);
        EventHandler.add(this.chartPane, Browser.touchEndEvent, this.ganttChartMouseUp, this);
    };
    TaskbarEdit.prototype.removeEventListeners = function () {
        var isIE11Pointer = Browser.isPointer;
        var mouseLeave = isIE11Pointer ? 'pointerleave' : 'mouseleave';
        EventHandler.remove(this.chartPane, Browser.touchStartEvent, this.ganttMouseDown);
        EventHandler.remove(this.chartPane, Browser.touchMoveEvent, this.ganttMouseMove);
        EventHandler.remove(this.chartPane, Browser.touchEndEvent, this.ganttChartMouseUp);
    };
    TaskbarEdit.prototype.ganttMouseDown = function (e) {
        this.updateTaskBarEditElement(e);
    };
    TaskbarEdit.prototype.ganttChartMouseUp = function (e) {
        var _this = this;
        this.parent.dotNetRef.invokeMethodAsync('UpdateResizedData', this.dataGuid, this.taskBarEditAction, this.taskBarEditRecord).then(function () {
            _this.initPublicProp();
        });
    };
    TaskbarEdit.prototype.updateTaskBarEditElement = function (e) {
        var _this = this;
        var target = this.getElementByPosition(e);
        var element = this.parent.getParentElement(target, cls.taskBarMainContainer);
        this.taskBarEditElement = element;
        if (this.taskBarEditElement) {
            if (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'click') {
                this.dataGuid = this.taskBarEditElement.getAttribute('rowuniqueid');
                this.parent.dotNetRef.invokeMethodAsync('GetEditedRecord', this.dataGuid).then(function (record) {
                    _this.taskBarEditRecord = record;
                    _this.updateMouseDownProperties(e);
                    _this.taskBarEditAction = _this.getTaskBarAction(e);
                });
            }
        }
    };
    TaskbarEdit.prototype.updateMouseDownProperties = function (event) {
        var e = this.getCoordinate(event);
        if (e.pageX || e.pageY) {
            var containerPosition = this.parent.getOffsetRect(this.chartBodyContainer);
            this.mouseDownX = (e.pageX - containerPosition.left) +
                this.parent.chartScrollModule.previousScroll.left;
            this.mouseDownY = e.pageY - containerPosition.top +
                this.parent.chartScrollModule.previousScroll.top;
        }
    };
    TaskbarEdit.prototype.getTaskBarAction = function (e) {
        var mouseDownElement = this.getElementByPosition(e);
        var data = this.taskBarEditRecord;
        var action = '';
        if (mouseDownElement.classList.contains(cls.taskBarLeftResizer)) {
            action = 'LeftResizing';
        }
        else if (mouseDownElement.classList.contains(cls.taskBarRightResizer)) {
            action = 'RightResizing';
        }
        else if (mouseDownElement.classList.contains(cls.childProgressResizer) ||
            closest(mouseDownElement, '.' + cls.childProgressResizer)) {
            action = 'ProgressResizing';
        }
        else if (data) {
            action = data.hasChildRecords ? this.parent.options.taskMode === 'Auto' ? 'ParentDrag' : ''
                : data.isMilestone ? 'MilestoneDrag' : 'ChildDrag';
        }
        return action;
    };
    TaskbarEdit.prototype.getElementByPosition = function (event) {
        var e = this.getCoordinate(event);
        e.pageX = e.pageX != null ? e.pageX : 0;
        e.pageY = e.pageY != null ? e.pageY : 0;
        return document.elementFromPoint((e.pageX - window.pageXOffset), (e.pageY - window.pageYOffset));
    };
    TaskbarEdit.prototype.getCoordinate = function (event) {
        var coordinates = {};
        if (event) {
            var e = event;
            coordinates.pageX = e.pageX;
            coordinates.pageY = e.pageY;
        }
        return coordinates;
    };
    TaskbarEdit.prototype.ganttMouseMove = function (event) {
        var containerPosition = this.parent.getOffsetRect(this.chartBodyContainer);
        var e = this.getCoordinate(event);
        this.mouseMoveX = e.pageX - containerPosition.left +
            this.parent.chartScrollModule.previousScroll.left;
        this.mouseMoveY = e.pageY - containerPosition.top +
            this.parent.chartScrollModule.previousScroll.top;
        this.dragMouseLeave = false;
        this.isMouseDragCheck();
        if (this.isMouseDragged && this.taskBarEditAction) {
            this.taskBarEditingAction(event, false);
        }
    };
    TaskbarEdit.prototype.isMouseDragCheck = function () {
        if (!this.isMouseDragged && this.taskBarEditAction && ((this.mouseDownX !== this.mouseMoveX) &&
            ((this.mouseDownX + 3) < this.mouseMoveX || (this.mouseDownX - 3) > this.mouseMoveX)
            || (this.mouseDownY !== this.mouseMoveY) &&
                ((this.mouseDownY + 3) < this.mouseMoveY || (this.mouseDownY - 3) > this.mouseMoveY))) {
            this.isMouseDragged = true;
            var item = this.taskBarEditRecord;
            this.previousItem = __assign({}, item);
            this.taskBarEditElement.setAttribute('aria-grabbed', 'true');
        }
    };
    TaskbarEdit.prototype.updateMouseMoveProperties = function (event) {
        var containerPosition = this.parent.getOffsetRect(this.chartBodyContainer);
        var e = this.getCoordinate(event);
        if (e.pageX || e.pageY) {
            this.mouseMoveX = e.pageX - containerPosition.left +
                this.parent.chartScrollModule.previousScroll.left;
            this.mouseMoveY = e.pageY - containerPosition.top +
                this.parent.chartScrollModule.previousScroll.top;
        }
        if ((this.taskBarEditRecord.width > 3 && !((this.taskBarEditAction === 'ProgressResizing' &&
            (this.taskBarEditRecord.progress === 0 || this.taskBarEditRecord.progress === 100))))) {
            var mouseX = this.mouseMoveX - this.parent.chartScrollModule.previousScroll.left +
                containerPosition.left;
            var mouseY = this.mouseMoveY - this.parent.chartScrollModule.previousScroll.top +
                containerPosition.top;
            if ((mouseX + 20) >
                containerPosition.left + this.chartBodyContainer.offsetWidth) {
                this.timerCount = this.parent.chartScrollModule.previousScroll.left;
            }
            else if ((mouseX - 20) < containerPosition.left) {
                this.timerCount = this.parent.chartScrollModule.previousScroll.left;
            }
        }
    };
    TaskbarEdit.prototype.taskBarEditingAction = function (e, isMouseClick) {
        this.updateMouseMoveProperties(e);
        if (this.taskBarEditAction === 'ProgressResizing') {
            this.performProgressResize(e);
        }
        else if (this.taskBarEditAction === 'LeftResizing') {
            this.enableLeftResizing(e);
        }
        else if (this.taskBarEditAction === 'RightResizing' || this.taskBarEditAction === 'ParentResizing') {
            this.enableRightResizing(e);
        }
        else if (this.taskBarEditAction === 'ParentDrag' || this.taskBarEditAction === 'ChildDrag' ||
            this.taskBarEditAction === 'MilestoneDrag') {
            this.enableDragging(e);
        }
        this.setItemPosition();
    };
    TaskbarEdit.prototype.setItemPosition = function () {
        var item = this.taskBarEditRecord;
        var width = this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone ?
            this.milestoneHeight : item.width;
        var rightResizer = (width - 10);
        var progressResizer = (item.progress / 100) * item.width;
        var taskBarMainContainer = (!this.taskBarEditElement.classList.contains(cls.taskBarMainContainer)) ? closest(this.taskBarEditElement, 'tr.' + cls.chartRow)
            .querySelector('.' + cls.taskBarMainContainer) : this.taskBarEditElement;
        var leftLabelContainer = closest(this.taskBarEditElement, 'tr.' + cls.chartRow)
            .querySelector('.' + cls.leftLabelContainer);
        var rightLabelContainer = closest(this.taskBarEditElement, 'tr.' + cls.chartRow)
            .querySelector('.' + cls.rightLabelContainer);
        var traceChildProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceChildProgressBar);
        var traceChildTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceChildTaskBar);
        var childProgressResizer = this.taskBarEditElement.querySelector('.' + cls.childProgressResizer);
        var taskBarRightResizer = this.taskBarEditElement.querySelector('.' + cls.taskBarRightResizer);
        var traceParentTaskBar = this.taskBarEditElement.querySelector('.' + cls.traceParentTaskBar);
        var traceParentProgressBar = this.taskBarEditElement.querySelector('.' + cls.traceParentProgressBar);
        if (this.taskBarEditAction !== 'ParentResizing') {
            taskBarMainContainer.style.width = (width) + 'px';
            taskBarMainContainer.style.left = (item.left) + 'px';
            leftLabelContainer.style.width = (item.left) + 'px';
            if (!isNullOrUndefined(rightLabelContainer)) {
                rightLabelContainer.style.left = (item.left + width) + 'px';
            }
        }
        if (this.taskBarEditAction === 'MilestoneDrag' || item.isMilestone) {
            taskBarMainContainer.style.left = (item.left - (width / 2)) + 'px';
            leftLabelContainer.style.width = (item.left - (width / 2)) + 'px';
            if (!isNullOrUndefined(rightLabelContainer)) {
                rightLabelContainer.style.left = (item.left + (width / 2)) + 'px';
            }
        }
        else if (this.taskBarEditAction === 'ProgressResizing') {
            traceChildTaskBar.style.left = (item.left + item.progressWidth - 10) + 'px';
            if (!isNullOrUndefined(traceChildProgressBar)) {
                traceChildProgressBar.style.width = item.progressWidth + 'px';
                traceChildProgressBar.style.borderBottomRightRadius = this.progressBorderRadius + 'px';
                traceChildProgressBar.style.borderTopRightRadius = this.progressBorderRadius + 'px';
                childProgressResizer.style.left = item.progressWidth - 8 + 'px';
            }
        }
        else if (this.taskBarEditAction === 'RightResizing') {
            traceChildTaskBar.style.width = (width) + 'px';
            if (!isNullOrUndefined(traceChildProgressBar)) {
                traceChildProgressBar.style.width = (progressResizer) + 'px';
                taskBarRightResizer.style.left = rightResizer + 'px';
                childProgressResizer.style.left = (progressResizer - 5) + 'px';
            }
        }
        else if (this.taskBarEditAction === 'ParentDrag') {
            if (!isNullOrUndefined(traceParentTaskBar)) {
                traceParentTaskBar.style.width = (width) + 'px';
            }
            if (!isNullOrUndefined(traceChildProgressBar)) {
                traceParentProgressBar.style.width = (item.progressWidth) + 'px';
            }
        }
        else {
            if (!isNullOrUndefined(traceChildTaskBar)) {
                traceChildTaskBar.style.width = (width) + 'px';
            }
            if (!isNullOrUndefined(traceChildProgressBar)) {
                taskBarRightResizer.style.left = rightResizer + 'px';
                traceChildProgressBar.style.width = (progressResizer) + 'px';
                childProgressResizer.style.left = progressResizer - 5 + 'px';
            }
        }
    };
    TaskbarEdit.prototype.enableLeftResizing = function (e) {
        var item = this.taskBarEditRecord;
        var diffrenceWidth = 0;
        if (this.mouseDownX > this.mouseMoveX) {
            if (this.mouseMoveX < (item.left + item.width)) {
                diffrenceWidth = this.mouseDownX - this.mouseMoveX;
                if (item.left > 0) {
                    item.left = this.previousItem.left - diffrenceWidth;
                    item.width = this.previousItem.width + diffrenceWidth;
                }
            }
            else {
                if (this.mouseMoveX > (item.left + item.width)) {
                    diffrenceWidth = this.mouseDownX - this.mouseMoveX;
                    item.left = this.previousItem.left - diffrenceWidth;
                    item.width = 3;
                }
            }
        }
        else {
            if (this.mouseMoveX < (item.left + item.width)) {
                diffrenceWidth = this.mouseMoveX - this.mouseDownX;
                if ((item.left) < (item.left + item.width) &&
                    ((this.previousItem.left + diffrenceWidth) <= (this.previousItem.left + this.previousItem.width))) {
                    item.left = this.previousItem.left + diffrenceWidth;
                    item.width = this.previousItem.width - diffrenceWidth;
                }
            }
            else {
                diffrenceWidth = this.mouseMoveX - this.mouseDownX;
                item.left = this.previousItem.left + diffrenceWidth;
                item.width = 3;
            }
        }
        this.updateEditPosition(e, item);
        item.left = this.previousItem.left + this.previousItem.width - item.width;
    };
    TaskbarEdit.prototype.enableRightResizing = function (e) {
        var item = this.taskBarEditRecord;
        var differenceWidth = 0;
        if (this.mouseDownX > this.mouseMoveX) {
            if (this.mouseMoveX > item.left && (this.mouseDownX - this.mouseMoveX) > 3) {
                differenceWidth = this.mouseDownX - this.mouseMoveX;
                item.width = this.previousItem.width - differenceWidth;
            }
            else {
                if (this.mouseMoveX < item.left) {
                    item.width = 3;
                }
            }
        }
        else {
            if (this.mouseMoveX > item.left) {
                differenceWidth = this.mouseMoveX - this.mouseDownX;
                item.width = this.previousItem.width + differenceWidth;
            }
        }
        this.updateEditPosition(e, item);
    };
    TaskbarEdit.prototype.enableDragging = function (e) {
        var item = this.taskBarEditRecord;
        var differenceWidth = 0;
        if (this.mouseDownX > this.mouseMoveX) {
            differenceWidth = this.mouseDownX - this.mouseMoveX;
            if (differenceWidth > 0) {
                item.left = this.previousItem.left - differenceWidth;
            }
        }
        else {
            differenceWidth = this.mouseMoveX - this.mouseDownX;
            item.left = this.previousItem.left + differenceWidth;
        }
        var left = item.left < 0 ? 0 : (item.left + item.width) >= this.parent.totalTimelineWidth ?
            (this.parent.totalTimelineWidth - item.width) : item.left;
        item.left = left;
    };
    TaskbarEdit.prototype.performProgressResize = function (e) {
        var item = this.taskBarEditRecord;
        var diffrenceWidth = 0;
        if (this.mouseDownX > this.mouseMoveX) {
            if (this.mouseMoveX > item.left &&
                (this.mouseMoveX < (item.left + item.width)) && item.left > 0) {
                diffrenceWidth = this.mouseMoveX - item.left;
                item.progressWidth = diffrenceWidth;
            }
            else {
                if (this.mouseMoveX >= (item.left + item.width)) {
                    item.progressWidth = item.width;
                }
                else {
                    item.progressWidth = 0;
                }
            }
        }
        else {
            if (this.mouseMoveX > item.left &&
                (this.mouseMoveX < (item.left + item.width))) {
                diffrenceWidth = this.mouseMoveX - item.left;
                item.progressWidth = diffrenceWidth;
            }
            else {
                if (this.mouseMoveX <= item.left) {
                    item.progressWidth = 0;
                }
                else {
                    item.progressWidth = item.width;
                }
            }
        }
        var widthValue = item.progressWidth > item.width ?
            item.width : item.progressWidth;
        widthValue = item.progressWidth < 0 ? 0 : item.progressWidth;
        item.progressWidth = widthValue;
        var diff = item.width - item.progressWidth;
        if (diff <= 4) {
            this.progressBorderRadius = 4 - diff;
        }
        else {
            this.progressBorderRadius = 0;
        }
    };
    TaskbarEdit.prototype.updateEditPosition = function (e, item) {
        this.updateIsMilestone(item);
    };
    TaskbarEdit.prototype.updateIsMilestone = function (item) {
        if (item.width <= 3) {
            item.width = 3;
            item.isMilestone = true;
        }
        else {
            item.isMilestone = false;
        }
    };
    TaskbarEdit.prototype.destroy = function () {
        this.removeEventListeners();
    };
    return TaskbarEdit;
}());
export { TaskbarEdit };
