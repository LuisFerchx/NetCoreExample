import { PdfPen, PdfDashStyle, PdfColor } from '@syncfusion/ej2-pdf-export';
var PdfBorders = (function () {
    function PdfBorders() {
        var defaultBorderPenLeft = new PdfPen(new PdfColor(0, 0, 0));
        defaultBorderPenLeft.dashStyle = PdfDashStyle.Solid;
        var defaultBorderPenRight = new PdfPen(new PdfColor(0, 0, 0));
        defaultBorderPenRight.dashStyle = PdfDashStyle.Solid;
        var defaultBorderPenTop = new PdfPen(new PdfColor(0, 0, 0));
        defaultBorderPenTop.dashStyle = PdfDashStyle.Solid;
        var defaultBorderPenBottom = new PdfPen(new PdfColor(0, 0, 0));
        defaultBorderPenBottom.dashStyle = PdfDashStyle.Solid;
        this.leftPen = defaultBorderPenLeft;
        this.rightPen = defaultBorderPenRight;
        this.topPen = defaultBorderPenTop;
        this.bottomPen = defaultBorderPenBottom;
    }
    Object.defineProperty(PdfBorders.prototype, "left", {
        get: function () {
            return this.leftPen;
        },
        set: function (value) {
            this.leftPen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfBorders.prototype, "right", {
        get: function () {
            return this.rightPen;
        },
        set: function (value) {
            this.rightPen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfBorders.prototype, "top", {
        get: function () {
            return this.topPen;
        },
        set: function (value) {
            this.topPen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfBorders.prototype, "bottom", {
        get: function () {
            return this.bottomPen;
        },
        set: function (value) {
            this.bottomPen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfBorders.prototype, "all", {
        set: function (value) {
            this.leftPen = this.rightPen = this.topPen = this.bottomPen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfBorders.prototype, "isAll", {
        get: function () {
            return ((this.leftPen === this.rightPen) && (this.leftPen === this.topPen) && (this.leftPen === this.bottomPen));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfBorders, "default", {
        get: function () {
            return new PdfBorders();
        },
        enumerable: true,
        configurable: true
    });
    return PdfBorders;
}());
export { PdfBorders };
var PdfPaddings = (function () {
    function PdfPaddings(left, right, top, bottom) {
        this.hasLeftPad = false;
        this.hasRightPad = false;
        this.hasTopPad = false;
        this.hasBottomPad = false;
        if (typeof left === 'undefined') {
            this.leftPad = this.rightPad = 5.76;
            this.bottomPad = this.topPad = 0.5;
        }
        else {
            this.leftPad = left;
            this.rightPad = right;
            this.topPad = top;
            this.bottomPad = bottom;
            this.hasLeftPad = true;
            this.hasRightPad = true;
            this.hasTopPad = true;
            this.hasBottomPad = true;
        }
    }
    Object.defineProperty(PdfPaddings.prototype, "left", {
        get: function () {
            return this.leftPad;
        },
        set: function (value) {
            this.leftPad = value;
            this.hasLeftPad = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPaddings.prototype, "right", {
        get: function () {
            return this.rightPad;
        },
        set: function (value) {
            this.rightPad = value;
            this.hasRightPad = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPaddings.prototype, "top", {
        get: function () {
            return this.topPad;
        },
        set: function (value) {
            this.topPad = value;
            this.hasTopPad = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPaddings.prototype, "bottom", {
        get: function () {
            return this.bottomPad;
        },
        set: function (value) {
            this.bottomPad = value;
            this.hasBottomPad = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPaddings.prototype, "all", {
        set: function (value) {
            this.leftPad = this.rightPad = this.topPad = this.bottomPad = value;
            this.hasLeftPad = true;
            this.hasRightPad = true;
            this.hasTopPad = true;
            this.hasBottomPad = true;
        },
        enumerable: true,
        configurable: true
    });
    return PdfPaddings;
}());
export { PdfPaddings };
