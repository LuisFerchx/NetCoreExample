import { Browser, addClass, removeClass, createElement, Draggable, extend, formatUnit, detach } from '@syncfusion/ej2-base';
import { EventHandler, setStyleAttribute, isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';
import { select } from '@syncfusion/ej2-base';
import { Popup, getZindexPartial } from '../src/popup/popup';
import { createResize, removeResize, setMinHeight, setMaxWidth, setMaxHeight } from '../src/common/resize';
var TAB = 9;
var ENTER = 13;
var ESCAPE = 27;
var BTN = 'e-btn';
var FADE = 'e-fade';
var ICON = 'e-icons';
var POPUP = 'e-popup';
var DIALOG = 'e-dialog';
var DEVICE = 'e-device';
var PRIMARY = 'e-primary';
var DRAGGABLE = 'e-draggable';
var POPUP_OPEN = 'e-popup-open';
var DLG_TARGET = 'e-dlg-target';
var DLG_CONTENT = 'e-dlg-content';
var DLG_OVERLAY = 'e-dlg-overlay';
var DLG_RESIZABLE = 'e-dlg-resizable';
var DLG_FULLSCREEN = 'e-dlg-fullscreen';
var FOOTER_CONTENT = 'e-footer-content';
var SCROLL_DISABLED = 'e-scroll-disabled';
var DLG_REF_ELEMENT = 'e-dlg-ref-element';
var DLG_RESTRICT_LEFT = 'e-restrict-left';
var DLG_RESIZE_HANDLE = 'e-resize-handle';
var DLG_RESIZE_VIEWPORT = 'e-resize-viewport';
var DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';
var DLG_HEADER_CONTENT = 'e-dlg-header-content';
var SfDialog = (function () {
    function SfDialog(element, options, dotnetRef) {
        this.hasFocusableNode = false;
        this.element = element;
        this.dotNetRef = dotnetRef;
        this.updateContext(options);
        if (this.element) {
            this.element.blazor__instance = this;
        }
    }
    SfDialog.prototype.initialize = function () {
        this.dlgContainer = undefined;
        this.popupObj = null;
        this.calculatezIndex = (this.zIndex === 1000);
        this.render();
        this.dotNetRef.invokeMethodAsync('CreatedEvent', null);
        this.element.classList.remove('e-blazor-hidden');
        if (this.visible) {
            this.dotNetRef.invokeMethodAsync('ShowDialog', null);
        }
        else {
            if (this.isModal) {
                this.dlgOverlay.style.display = 'none';
            }
        }
        this.setWidth();
        this.setMinHeight();
        if (this.enableResize) {
            this.setResize();
            if (this.animationSettings.effect === 'None') {
                this.getMinHeight();
            }
        }
        this.bindEvent(this.element);
    };
    SfDialog.prototype.updateContext = function (dlgObj) {
        extend(this, this, dlgObj);
    };
    SfDialog.prototype.setWidth = function () {
        if (this.width === '100%') {
            this.element.style.width = '';
        }
        else {
            setStyleAttribute(this.element, { 'width': formatUnit(this.width) });
            if (this.width === 'auto') {
                this.refreshPosition();
            }
        }
    };
    SfDialog.prototype.setHeight = function () {
        setStyleAttribute(this.element, { 'height': formatUnit(this.height) });
    };
    SfDialog.prototype.setMinHeight = function () {
        if (this.minHeight !== '') {
            setStyleAttribute(this.element, { 'minHeight': formatUnit(this.minHeight) });
        }
    };
    SfDialog.prototype.render = function () {
        var _this = this;
        this.checkPositionData();
        this.targetEle = this.getTargetEle(this.target);
        if (Browser.isDevice) {
            addClass([this.element], DEVICE);
        }
        if (isNOU(this.headerContent)) {
            this.headerContent = this.element.querySelector('.' + DLG_HEADER_CONTENT);
        }
        if (isNOU(this.contentEle)) {
            this.contentEle = this.element.querySelector('.' + DLG_CONTENT);
        }
        this.setMaxHeight();
        if (this.zIndex === 1000) {
            this.setzIndex(this.element, false);
        }
        if (this.allowDragging && (!isNOU(this.headerContent))) {
            this.setAllowDragging();
        }
        if (this.isModal && isNOU(this.dlgContainer)) {
            this.dlgContainer = this.element.parentElement;
            this.dlgOverlay = this.element.parentElement.getElementsByClassName(DLG_OVERLAY)[0];
        }
        if (!isNOU(this.element.parentElement)) {
            var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
            this.refElement = createElement('div', { className: DLG_REF_ELEMENT });
            parentEle.insertBefore(this.refElement, (this.isModal ? this.dlgContainer : this.element));
        }
        if (!isNOU(this.targetEle)) {
            this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);
        }
        this.popupObj = new Popup(this.element, {
            height: this.height,
            width: this.width,
            zIndex: this.zIndex,
            relateTo: this.getTargetEle(this.target),
            actionOnScroll: 'none',
            enableRtl: this.enableRtl,
            open: function () {
                if (_this.enableResize) {
                    _this.resetResizeIcon();
                }
                _this.dotNetRef.invokeMethodAsync('OpenEvent', null);
            },
            close: function () {
                if (_this.isModal) {
                    addClass([_this.dlgOverlay], FADE);
                    _this.dlgContainer.style.display = 'none';
                }
                _this.hasFocusableNode = false;
                _this.dotNetRef.invokeMethodAsync('CloseEvent', _this.element.classList.toString());
            }
        });
        this.positionChange();
        this.setEnableRTL();
    };
    SfDialog.prototype.checkPositionData = function () {
        if (!isNOU(this.position)) {
            if (!isNOU(this.position.X) && (typeof (this.position.X) !== 'number')) {
                var isNumber = this.isNumberValue(this.position.X);
                if (isNumber) {
                    this.position.X = parseFloat(this.position.X);
                }
            }
            if (!isNOU(this.position.Y) && (typeof (this.position.Y) !== 'number')) {
                var isNumber = this.isNumberValue(this.position.Y);
                if (isNumber) {
                    this.position.Y = parseFloat(this.position.Y);
                }
            }
        }
    };
    SfDialog.prototype.isNumberValue = function (value) {
        return /^[-+]?\d*\.?\d+$/.test(value);
    };
    SfDialog.prototype.getTargetEle = function (target) {
        var targetEle;
        if (!isNOU(target) && (typeof target) === 'string') {
            targetEle = document.querySelector(target);
        }
        return (isNOU(targetEle) ? document.body : targetEle);
    };
    SfDialog.prototype.setMaxHeight = function () {
        if (!this.allowMaxHeight) {
            return;
        }
        var display = this.element.style.display;
        this.element.style.display = 'none';
        this.element.style.maxHeight = (!isNOU(this.target)) && (this.targetEle.offsetHeight < window.innerHeight) ?
            (this.targetEle.offsetHeight - 20) + 'px' : (window.innerHeight - 20) + 'px';
        this.element.style.display = display;
        if (Browser.isIE && this.height === 'auto' && !isNOU(this.contentEle)
            && this.element.offsetHeight < this.contentEle.offsetHeight) {
            this.element.style.height = 'inherit';
        }
    };
    SfDialog.prototype.setzIndex = function (zIndexElement, setPopupZindex) {
        this.zIndex = getZindexPartial(zIndexElement);
        if (setPopupZindex) {
            this.popupObj.zIndex = this.zIndex;
        }
    };
    SfDialog.prototype.updatezIndex = function () {
        this.popupObj.zIndex = this.zIndex;
        if (this.isModal) {
            this.setOverlayZindex(this.zIndex);
        }
        this.calculatezIndex = (this.element.style.zIndex !== this.zIndex.toString()) ? false : true;
    };
    SfDialog.prototype.updateTarget = function () {
        this.targetEle = this.getTargetEle(this.target);
        this.popupObj.relateTo = this.targetEle;
        if (this.dragObj) {
            this.dragObj.dragArea = this.targetEle;
        }
        this.setMaxHeight();
        if (this.isModal) {
            this.targetEle.appendChild(this.dlgContainer);
        }
        if (this.enableResize) {
            this.setResize();
        }
    };
    SfDialog.prototype.resetResizeIcon = function () {
        var dialogConHeight = this.getMinHeight();
        if (this.targetEle.offsetHeight < dialogConHeight) {
            var resizeIcon = this.element.querySelector('.' + this.resizeIconDirection);
            if (!isNOU(resizeIcon)) {
                resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';
            }
        }
    };
    SfDialog.prototype.getMouseEvtArgs = function (e) {
        return {
            altKey: e.altKey, button: e.button, buttons: e.buttons, clientX: e.clientX, clientY: e.clientY, ctrlKey: e.ctrlKey,
            detail: e.detail, metaKey: e.metaKey, screenX: e.screenX, screenY: e.screenY, shiftKey: e.shiftKey, type: e.type
        };
    };
    SfDialog.prototype.setAllowDragging = function () {
        var proxy = this;
        this.dragObj = new Draggable(this.element, {
            clone: false,
            isDragScroll: true,
            abort: '.' + DLG_CLOSE_ICON_BTN,
            handle: '.' + DLG_HEADER_CONTENT,
            dragStart: function (e) {
                proxy.dotNetRef.invokeMethodAsync('DragStartEvent', {
                    target: { ID: e.target.id }, event: proxy.getMouseEvtArgs(e.event)
                });
                e.bindEvents(e.dragElement);
            },
            drag: function (e) {
                proxy.dotNetRef.invokeMethodAsync('DragEvent', {
                    target: { ID: e.target.id }, event: proxy.getMouseEvtArgs(e.event)
                });
            },
            dragStop: function (e) {
                if (proxy.isModal) {
                    if (!isNOU(proxy.position)) {
                        proxy.dlgContainer.classList.remove('e-dlg-' + proxy.position.X + '-' + proxy.position.Y);
                    }
                    proxy.element.style.position = 'relative';
                }
                proxy.dotNetRef.invokeMethodAsync('DragStopEvent', {
                    target: { ID: e.target.id }, event: proxy.getMouseEvtArgs(e.event)
                });
                proxy.element.classList.remove(DLG_RESTRICT_LEFT);
            }
        });
        if (!isNOU(this.targetEle)) {
            this.dragObj.dragArea = this.targetEle;
        }
    };
    SfDialog.prototype.positionChange = function () {
        if (this.isModal) {
            if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
                this.setPopupPosition();
            }
            else if ((!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)))
                || (isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y)))) {
                this.setPopupPosition();
            }
            else {
                this.element.style.top = '0px';
                this.element.style.left = '0px';
                this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);
            }
        }
        else {
            this.setPopupPosition();
        }
    };
    SfDialog.prototype.setPopupPosition = function () {
        this.popupObj.setProperties({ position: { X: this.position.X, Y: this.position.Y } });
    };
    SfDialog.prototype.setEnableRTL = function () {
        var resizeElement = this.element.querySelector('.' + DLG_RESIZE_HANDLE);
        if (!isNOU(resizeElement) && resizeElement.parentElement === this.element) {
            removeResize();
            this.setResize();
        }
    };
    SfDialog.prototype.setResize = function () {
        if (this.enableResize) {
            if (!isNOU(this.element.querySelector('.' + ICON + '.' + DLG_RESIZE_HANDLE))) {
                return;
            }
            var computedHeight = getComputedStyle(this.element).minHeight;
            var computedWidth = getComputedStyle(this.element).minWidth;
            if (this.isModal && this.enableRtl) {
                this.element.classList.add(DLG_RESTRICT_LEFT);
            }
            else if (this.isModal && (this.target === document.body || this.target === 'body')) {
                this.element.classList.add(DLG_RESIZE_VIEWPORT);
            }
            createResize({
                element: this.element,
                direction: this.resizeIconDirection,
                minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),
                maxHeight: this.targetEle.clientHeight,
                minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),
                maxWidth: this.targetEle.clientWidth,
                boundary: (this.target === 'body' || this.target === 'document.body') ? null : this.targetEle,
                resizeBegin: this.onResizeStart.bind(this),
                resizeComplete: this.onResizeComplete.bind(this),
                resizing: this.onResizing.bind(this),
                proxy: this
            });
            this.wireWindowResizeEvent();
        }
        else {
            removeResize();
            this.unWireWindowResizeEvent();
            if (this.isModal) {
                this.element.classList.remove(DLG_RESTRICT_LEFT);
            }
            else {
                this.element.classList.remove(DLG_RESIZE_VIEWPORT);
            }
        }
    };
    SfDialog.prototype.getMinHeight = function () {
        var computedHeaderHeight = '0px';
        var computedFooterHeight = '0px';
        if (!isNOU(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {
            computedHeaderHeight = getComputedStyle(this.headerContent).height;
        }
        var footerEle = select('.' + FOOTER_CONTENT, this.element);
        if (!isNOU(footerEle)) {
            computedFooterHeight = getComputedStyle(footerEle).height;
        }
        var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);
        var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);
        setMinHeight(headerHeight + 30 + (isNaN(footerHeight) ? 0 : footerHeight));
        return (headerHeight + 30 + footerHeight);
    };
    SfDialog.prototype.changePosition = function (dlgObj) {
        if (this.isModal && this.dlgContainer.classList.contains('e-dlg-' + this.position.X + '-' + this.position.Y)) {
            this.dlgContainer.classList.remove('e-dlg-' + this.position.X + '-' + this.position.Y);
        }
        this.updateContext(dlgObj);
        this.checkPositionData();
        this.positionChange();
    };
    SfDialog.prototype.setOverlayZindex = function (zIndexValue) {
        var zIndex;
        if (isNOU(zIndexValue)) {
            zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
        }
        else {
            zIndex = zIndexValue;
        }
        this.dlgOverlay.style.zIndex = (zIndex - 1).toString();
        this.dlgContainer.style.zIndex = zIndex.toString();
    };
    SfDialog.prototype.focusContent = function (ele) {
        var element = this.getAutoFocusNode(ele);
        var node = !isNOU(element) ? element : ele;
        node.focus();
        this.hasFocusableNode = true;
    };
    SfDialog.prototype.getAutoFocusNode = function (container) {
        var node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);
        var value = '[autofocus]';
        var items = container.querySelectorAll(value);
        var validNode = this.getValidFocusNode(items);
        this.primaryButtonEle = this.element.getElementsByClassName(PRIMARY)[0];
        if (!isNOU(validNode)) {
            node = validNode;
        }
        else {
            validNode = this.focusableElements(this.contentEle);
            if (!isNOU(validNode)) {
                return node = validNode;
            }
            else if (!isNOU(this.primaryButtonEle)) {
                return this.element.querySelector('.' + PRIMARY);
            }
        }
        return node;
    };
    SfDialog.prototype.getValidFocusNode = function (items) {
        var node;
        for (var u = 0; u < items.length; u++) {
            node = items[u];
            if ((node.clientHeight > 0 || (node.tagName.toLowerCase() === 'a' && node.hasAttribute('href'))) && node.tabIndex > -1 &&
                !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
                return node;
            }
            else {
                node = null;
            }
        }
        return node;
    };
    SfDialog.prototype.disableElement = function (element, t) {
        var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msGetRegionContent : null;
        if (elementMatch) {
            for (; element; element = element.parentNode) {
                if (element instanceof Element && elementMatch.call(element, t)) {
                    return element;
                }
            }
        }
        return null;
    };
    SfDialog.prototype.focusableElements = function (content) {
        if (!isNOU(content)) {
            var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
            var items = content.querySelectorAll(value);
            return this.getValidFocusNode(items);
        }
        return null;
    };
    SfDialog.prototype.getMaxHeight = function (ele) {
        return ele.style.maxHeight;
    };
    SfDialog.prototype.OnPropertyChanged = function (dlgObj, props) {
        this.updateContext(dlgObj);
        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
            var key = props_1[_i];
            switch (key) {
                case 'width':
                    setStyleAttribute(this.element, { 'width': formatUnit(this.width) });
                    break;
                case 'height':
                    this.setHeight();
                    break;
                case 'minHeight':
                    this.setMinHeight();
                    break;
                case 'target':
                    this.updateTarget();
                    break;
                case 'zIndex':
                    this.updatezIndex();
                    break;
                case 'allowDragging':
                    this.setAllowDragging();
                    break;
                case 'destroyDraggable':
                    this.destroyDraggable();
                    break;
                case 'enableRtl':
                    this.setEnableRTL();
                    break;
                case 'enableResize':
                    this.setResize();
                    break;
            }
        }
    };
    SfDialog.prototype.fullScreen = function (enable) {
        if (enable) {
            addClass([this.element], DLG_FULLSCREEN);
            var display = this.element.style.display;
            this.element.style.display = 'none';
            this.element.style.maxHeight = (!isNOU(this.target)) ? (this.targetEle.offsetHeight) + 'px' : (window.innerHeight) + 'px';
            this.element.style.display = display;
            addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
            if (this.allowDragging && !isNOU(this.dragObj)) {
                this.dragObj.destroy();
                this.dragObj = undefined;
            }
        }
        else {
            removeClass([this.element], DLG_FULLSCREEN);
            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
            if (this.allowDragging && (!isNOU(this.headerContent))) {
                this.setAllowDragging();
            }
        }
    };
    SfDialog.prototype.show = function (isFullScreen, maxHeight, dlgObj) {
        this.updateContext(dlgObj);
        if (!this.element.classList.contains(POPUP_OPEN) || !isNOU(isFullScreen)) {
            if (!isNOU(isFullScreen)) {
                this.fullScreen(isFullScreen);
            }
            if (this.element.style.maxHeight !== maxHeight) {
                this.allowMaxHeight = false;
                this.element.style.maxHeight = maxHeight;
            }
            this.storeActiveElement = document.activeElement;
            this.element.tabIndex = -1;
            if (this.isModal && isNOU(this.dlgOverlay)) {
                this.dlgOverlay = this.element.parentElement.querySelector('.' + DLG_OVERLAY);
            }
            if (this.isModal && !isNOU(this.dlgOverlay)) {
                this.dlgOverlay.style.display = 'block';
                this.dlgContainer.style.display = 'flex';
                removeClass([this.dlgOverlay], FADE);
                if (!isNOU(this.targetEle)) {
                    if (this.targetEle === document.body) {
                        this.dlgContainer.style.position = 'fixed';
                    }
                    else {
                        this.dlgContainer.style.position = 'absolute';
                    }
                    this.dlgOverlay.style.position = 'absolute';
                    this.element.style.position = 'relative';
                    addClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
                }
                else {
                    addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
                }
            }
            var openAnimation = {
                name: this.animationSettings.effect + 'In',
                duration: this.animationSettings.duration,
                delay: this.animationSettings.delay
            };
            var zIndexElement = (this.isModal) ? this.element.parentElement : this.element;
            if (this.calculatezIndex) {
                this.setzIndex(zIndexElement, true);
                setStyleAttribute(this.element, { 'zIndex': this.zIndex });
                if (this.isModal) {
                    this.setOverlayZindex(this.zIndex);
                }
            }
            this.animationSettings.effect === 'None' ? this.popupObj.show() : this.popupObj.show(openAnimation);
        }
    };
    SfDialog.prototype.hide = function () {
        if (this.isModal) {
            !isNOU(this.targetEle) ? removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]) :
                removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        }
        var closeAnimation = {
            name: this.animationSettings.effect + 'Out',
            duration: this.animationSettings.duration,
            delay: this.animationSettings.delay
        };
        this.animationSettings.effect === 'None' ? this.popupObj.hide() : this.popupObj.hide(closeAnimation);
    };
    SfDialog.prototype.refreshPosition = function () {
        this.popupObj.refreshPosition();
    };
    SfDialog.prototype.destroyDraggable = function () {
        if (!isNOU(this.dragObj)) {
            this.dragObj.destroy();
            this.dragObj = undefined;
        }
    };
    SfDialog.prototype.destroy = function (dlgObj) {
        this.updateContext(dlgObj);
        var attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];
        if (!isNOU(this.cssClass) && this.cssClass !== '') {
            var classes = this.cssClass.split(' ');
            removeClass([this.element], classes);
        }
        if (Browser.isDevice) {
            removeClass([this.element], DEVICE);
        }
        removeClass([this.getTargetEle(this.target)], [DLG_TARGET, SCROLL_DISABLED]);
        this.unBindEvent(this.element);
        if (this.element.classList.contains(DLG_FULLSCREEN)) {
            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        }
        if (this.isModal) {
            removeClass([(!isNOU(this.targetEle) ? this.targetEle : document.body)], SCROLL_DISABLED);
        }
        if (this.element.classList.contains(DLG_RESIZABLE)) {
            this.element.classList.remove(DLG_RESIZABLE);
        }
        if (this.element.classList.contains(DRAGGABLE)) {
            this.dragObj.destroy();
            this.dragObj = undefined;
        }
        if (this.element.classList.contains(POPUP)) {
            this.popupObj.destroy();
            this.popupObj = undefined;
        }
        if (!isNOU(this.refElement) && !isNOU(this.refElement.parentElement)) {
            this.refElement.parentElement.insertBefore((this.isModal ? this.dlgContainer : this.element), this.refElement);
            detach(this.refElement);
            this.refElement = undefined;
        }
        if (!isNOU(this.element.children)) {
            for (var i = 0; i <= this.element.children.length; i++) {
                i = i - i;
                detach(this.element.children[i]);
            }
        }
        for (var i = 0; i < attrs.length; i++) {
            this.element.removeAttribute(attrs[i]);
        }
        if (this.isModal) {
            detach(this.element.nextElementSibling);
            var parent_1 = this.element.parentElement;
            parent_1.removeAttribute('class');
            parent_1.removeAttribute('style');
        }
        this.element.classList.remove(DIALOG);
    };
    SfDialog.prototype.bindEvent = function (element) {
        EventHandler.add(element, 'keydown', this.keyDown, this);
    };
    SfDialog.prototype.unBindEvent = function (element) {
        EventHandler.remove(element, 'keydown', this.keyDown);
    };
    SfDialog.prototype.wireWindowResizeEvent = function () {
        window.addEventListener('resize', this.windowResizeHandler.bind(this));
    };
    SfDialog.prototype.unWireWindowResizeEvent = function () {
        window.removeEventListener('resize', this.windowResizeHandler.bind(this));
    };
    SfDialog.prototype.popupCloseHandler = function () {
        var activeEle = document.activeElement;
        if (!isNOU(activeEle) && !isNOU(activeEle.blur)) {
            activeEle.blur();
        }
        if (!isNOU(this.storeActiveElement) && !isNOU(this.storeActiveElement.focus)) {
            this.storeActiveElement.focus();
        }
    };
    SfDialog.prototype.windowResizeHandler = function () {
        setMaxWidth(this.targetEle.clientWidth);
        setMaxHeight(this.targetEle.clientHeight);
        this.setMaxHeight();
    };
    SfDialog.prototype.onResizeStart = function (args, dialogObj) {
        var evtArgs = this.getMouseEvtArgs(args);
        this.dotNetRef.invokeMethodAsync('ResizeStartEvent', evtArgs);
    };
    SfDialog.prototype.onResizing = function (args, dialogObj) {
        this.dotNetRef.invokeMethodAsync('ResizingEvent', this.getMouseEvtArgs(args));
    };
    SfDialog.prototype.onResizeComplete = function (args, dialogObj) {
        this.dotNetRef.invokeMethodAsync('ResizeStopEvent', this.getMouseEvtArgs(args));
    };
    SfDialog.prototype.getFocusElement = function (target) {
        var value = 'input,select,textarea,button:enabled,a,[contenteditable="true"],[tabindex]';
        var items = target.querySelectorAll(value);
        return items[items.length - 1];
    };
    SfDialog.prototype.keyDown = function (e) {
        var _this = this;
        if (e.keyCode === TAB && this.isModal) {
            var btn = void 0;
            var btns = void 0;
            var footer = this.element.querySelector('.' + FOOTER_CONTENT);
            if (!isNOU(footer)) {
                btns = footer.querySelectorAll('button');
                if (!isNOU(btn) && btns.length > 0) {
                    btn = btns[btns.length - 1];
                }
                if (isNOU(btn) && footer.childNodes.length > 0) {
                    btn = this.getFocusElement(footer);
                }
            }
            if (isNOU(footer) && !isNOU(this.contentEle)) {
                btn = this.getFocusElement(this.contentEle);
            }
            if (!isNOU(btn) && document.activeElement === btn && !e.shiftKey) {
                e.preventDefault();
                this.focusableElements(this.element).focus();
            }
            if (document.activeElement === this.focusableElements(this.element) && e.shiftKey) {
                e.preventDefault();
                if (!isNOU(btn)) {
                    btn.focus();
                }
            }
        }
        if (e.keyCode === ESCAPE && this.closeOnEscape) {
            this.dotNetRef.invokeMethodAsync('CloseDialog', {
                altKey: e.altKey, ctrlKey: e.ctrlKey, code: e.code, key: e.key, location: e.location,
                repeat: e.repeat, shiftKey: e.shiftKey, metaKey: e.metaKey, type: e.type
            });
        }
        if (this.hasFocusableNode) {
            var element = document.activeElement;
            var isTagName = (['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1);
            var isContentEdit = false;
            if (!isTagName) {
                isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';
            }
            if ((e.keyCode === ENTER && !e.ctrlKey && element.tagName.toLowerCase() !== 'textarea' &&
                isTagName && !isNOU(this.primaryButtonEle)) || (e.keyCode === ENTER && e.ctrlKey &&
                (element.tagName.toLowerCase() === 'textarea' || isContentEdit)) && !isNOU(this.primaryButtonEle)) {
                setTimeout(function () {
                    _this.element.querySelector('.' + FOOTER_CONTENT + ' button.' + BTN + '.' + PRIMARY).click();
                });
            }
        }
    };
    return SfDialog;
}());
var Dialog = {
    initialize: function (element, options, dotnetRef) {
        if (element) {
            new SfDialog(element, options, dotnetRef);
            element.blazor__instance.initialize();
        }
    },
    getClassList: function (element) {
        return element && element.classList.toString();
    },
    getMaxHeight: function (element) {
        return element ? element.blazor__instance.getMaxHeight(element) : null;
    },
    changePosition: function (dlgObj) {
        if (!isNOU(dlgObj.element)) {
            dlgObj.element.blazor__instance.changePosition(dlgObj);
        }
    },
    focusContent: function (element) {
        if (!isNOU(element)) {
            element.blazor__instance.focusContent(element);
        }
    },
    refreshPosition: function (element) {
        if (!isNOU(element)) {
            element.blazor__instance.refreshPosition();
        }
    },
    popupCloseHandler: function (element) {
        if (!isNOU(element)) {
            element.blazor__instance.popupCloseHandler();
        }
    },
    propertyChanged: function (dlgObj, changedProps) {
        if (!isNOU(dlgObj.element)) {
            dlgObj.element.blazor__instance.OnPropertyChanged(dlgObj, changedProps);
        }
    },
    show: function (isFullScreen, maxHeight, dlgObj) {
        if (dlgObj.element) {
            dlgObj.element.blazor__instance.show(isFullScreen, maxHeight, dlgObj);
        }
    },
    hide: function (element) {
        if (!isNOU(element)) {
            element.blazor__instance.hide();
        }
    },
    destroy: function (dlgObj) {
        if (!isNOU(dlgObj.element)) {
            dlgObj.element.blazor__instance.destroy(dlgObj);
        }
    }
};
export default Dialog;
