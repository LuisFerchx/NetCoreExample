import { isNullOrUndefined, createElement } from '@syncfusion/ej2-base';
var CheckboxColumn = (function () {
    function CheckboxColumn(dotnetRef, parent) {
        this.parent = parent;
        this.dotNetRef = dotnetRef;
    }
    CheckboxColumn.prototype.renderHeaderCheckbox = function (element, columnIndex) {
        var container = createElement('div', { className: 'e-checkbox-wrapper e-css e-hierarchycheckbox' });
        var inputelement = createElement('input', { className: 'e-treeselectall', attrs: { 'type': 'checkbox' } });
        container.appendChild(inputelement);
        var span = createElement('span', { className: 'e-frame e-icons', styles: 'width: 18px;' });
        container.appendChild(span);
        span.addEventListener('click', this.headerSelect.bind(this));
        var spanlabel = createElement('span', { className: 'e-label' });
        container.appendChild(spanlabel);
        var headerElement = element.querySelectorAll('.e-headercontent th')[columnIndex];
        if (isNullOrUndefined(headerElement.querySelector('.e-checkbox-wrapper'))) {
            var headercelldiv = headerElement.querySelector('.e-headercelldiv');
            headercelldiv.insertBefore(container, headercelldiv.firstChild);
        }
    };
    CheckboxColumn.prototype.updateHeaderCheckbox = function (spanElement, checkState) {
        if (checkState === 'intermediate') {
            spanElement.classList.add('e-stop');
            spanElement.classList.remove('e-check');
        }
        else if (checkState === 'check') {
            spanElement.classList.add('e-check');
            spanElement.classList.remove('e-stop');
        }
        else {
            spanElement.classList.remove('e-stop');
            spanElement.classList.remove('e-check');
        }
    };
    CheckboxColumn.prototype.headerSelect = function (args) {
        var spanElement = args.currentTarget;
        var checkState = 'uncheck';
        if (spanElement.classList.contains('e-check')) {
            spanElement.classList.remove('e-check');
        }
        else if (spanElement.classList.contains('e-stop')) {
            spanElement.classList.remove('e-stop');
        }
        else {
            spanElement.classList.add('e-check');
            checkState = 'check';
        }
        this.dotNetRef.invokeMethodAsync('HeaderSelectAll', checkState);
    };
    return CheckboxColumn;
}());
export { CheckboxColumn };
