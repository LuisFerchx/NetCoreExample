import { isNullOrUndefined, closest as closestElement, classList, remove } from '@syncfusion/ej2-base';
import { setValue, createElement } from '@syncfusion/ej2-base';
import { parentsUntil } from './util';
var RowDD = (function () {
    function RowDD(parent) {
        var _this = this;
        this.draggedRecords = [];
        this.selectedRows = [];
        this.canDrop = true;
        this.rowDragStart = function (args) {
            _this.gridDragStart.apply(_this.parent.grid, [args]);
            _this.startedRow = _this.parent.grid.rowDragAndDropModule.startedRow;
            var rowIndexes = _this.parent.grid.getSelectedRowIndexes();
            var fromIndex = parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);
            _this.selectedRows = _this.parent.grid.getSelectedRows();
            if (_this.selectedRows.length === 0 || rowIndexes.length === 0) {
                _this.selectedRows.push(_this.startedRow);
                rowIndexes.push(fromIndex);
            }
            for (var i = 0; i < rowIndexes.length; i++) {
                _this.draggedRecords.push(_this.parent.options.currentViewData[rowIndexes[i]]);
            }
        };
        this.rowDraging = function (args) {
            _this.gridDrag.apply(_this.parent.grid, [args]);
            _this.dragTarget = _this.parent.grid.rowDragAndDropModule.dragTarget;
            var tObj = _this.parent;
            var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');
            cloneElement.style.cursor = '';
            var rowEle = args.target ? closestElement(args.target, 'tr') : null;
            var rowIdx = rowEle ? rowEle.rowIndex : -1;
            var droppedRecord = tObj.options.currentViewData[rowIdx];
            _this.removeErrorElem();
            _this.canDrop = true;
            if (rowIdx !== -1) {
                _this.ensuredropPosition(_this.draggedRecords, droppedRecord);
            }
            else {
                _this.canDrop = false;
                _this.addErrorElem();
            }
            if (!tObj.options.rowDropTargetID && _this.canDrop) {
                tObj.rowDragAndDropModule.updateIcon(_this.selectedRows, rowIdx, args);
            }
            if (tObj.options.rowDropTargetID) {
                var dropElement = parentsUntil(args.target, 'e-treegrid');
                if (dropElement && dropElement.id === _this.parent.options.rowDropTargetID) {
                    var srcControl = dropElement.blazor_instance;
                    srcControl.rowDragAndDropModule.updateIcon(_this.selectedRows, rowIdx, args);
                }
            }
            if (args.target && closestElement(args.target, '#' + tObj.options.rowDropTargetID)) {
                var dropElement = parentsUntil(args.target, 'e-treegrid');
                if (!dropElement) {
                    cloneElement.style.cursor = 'default';
                }
            }
        };
        this.rowDropped = function (e) {
            var targetEle = _this.getElementFromPosition(e.helper, e.event);
            var target = targetEle && !targetEle.classList.contains('e-dlg-overlay') ?
                targetEle : e.target;
            _this.parent.grid.element.classList.remove('e-rowdrag');
            var dropElement = document.getElementById(_this.parent.options.rowDropTargetID);
            if (_this.parent.options.allowRowDragAndDrop && _this.parent.options.rowDropTargetID && !parentsUntil(target, 'e-treegrid')) {
                var toIdx = 0;
                var targetClass = target.classList.value;
                var targetID = target.id;
                var fromIdx = parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);
                var rowPosition = _this.dropPosition === 'topSegment' ? 'Above' : _this.dropPosition === 'bottomSegment' ? 'Below' :
                    _this.dropPosition === 'middleSegment' ? 'Child' : 'Invalid';
                _this.parent.dotNetRef.invokeMethodAsync('ReorderRows', fromIdx, toIdx, 'add', false, targetClass, targetID, null, true, rowPosition);
            }
            if (_this.parent.options.rowDropTargetID && dropElement && dropElement.blazor_instance) {
                dropElement.blazor_instance.getContent().classList.remove('e-allowRowDrop');
            }
            if (!parentsUntil(target, 'e-gridcontent')) {
                _this.dragTarget = null;
                remove(e.helper);
                _this.removetopOrBottomBorder();
                _this.removeChildBorder();
                if (!isNullOrUndefined(_this.parent.element.getElementsByClassName('e-firstrow-border')[0])) {
                    _this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();
                }
                else if (!isNullOrUndefined(_this.parent.element.getElementsByClassName('e-lastrow-border')[0])) {
                    _this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();
                }
                return;
            }
            var tObj = _this.parent;
            if (!tObj.options.rowDropTargetID) {
                if (parentsUntil(e.target, 'e-content')) {
                    if (_this.parent.element.querySelector('.e-errorelem')) {
                        _this.dropPosition = 'Invalid';
                    }
                    setValue('dropPosition', _this.dropPosition, e);
                    if (!isNullOrUndefined(tObj.getHeaderContent().querySelector('.e-firstrow-border'))) {
                        tObj.getHeaderContent().querySelector('.e-firstrow-border').remove();
                    }
                }
            }
            else {
                if (e.target && closestElement(e.target, '#' + tObj.options.rowDropTargetID) || parentsUntil(e.target, 'e-treegrid') &&
                    parentsUntil(e.target, 'e-treegrid').id === tObj.options.rowDropTargetID) {
                    setValue('dropPosition', _this.dropPosition, e);
                }
            }
            _this.removetopOrBottomBorder();
            _this.removeChildBorder();
            if (!isNullOrUndefined(_this.parent.element.getElementsByClassName('e-firstrow-border')[0])) {
                _this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();
            }
            else if (!isNullOrUndefined(_this.parent.element.getElementsByClassName('e-lastrow-border')[0])) {
                _this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();
            }
            if (_this.parent.options.allowRowDragAndDrop && !_this.parent.options.rowDropTargetID) {
                _this.parent.grid.rowDragAndDropModule.stopTimer();
                _this.parent.grid.getContent().classList.remove('e-grid-relative');
                _this.parent.grid.rowDragAndDropModule.removeBorder(targetEle);
                var stRow = _this.parent.grid.element.querySelector('.e-dragstartrow');
                if (stRow) {
                    stRow.classList.remove('e-dragstartrow');
                }
                var toIdx_1 = _this.dragTarget;
                var targetClass_1 = target.classList.value;
                var targetID_1 = target.id;
                var fromIdx_1 = parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);
                var rowPosition_1 = _this.dropPosition === 'topSegment' ? 'Above' : _this.dropPosition === 'bottomSegment' ? 'Below' :
                    _this.dropPosition === 'middleSegment' ? 'Child' : 'Invalid';
                if (rowPosition_1 !== 'Invalid') {
                    setTimeout(function () {
                        _this.parent.dotNetRef.invokeMethodAsync('ReorderRows', fromIdx_1, toIdx_1, 'delete', true, targetClass_1, targetID_1, null, false, rowPosition_1);
                    }, 10);
                }
                _this.dragTarget = null;
                _this.draggedRecords = [];
            }
        };
        this.drop = function (e) {
            _this.treeGridDrop({ target: e.target, droppedElement: e.droppedElement });
            remove(e.droppedElement);
        };
        this.parent = parent;
        if (this.parent.options.allowRowDragAndDrop) {
            this.gridDrag = this.parent.grid.rowDragAndDropModule.drag;
            this.gridDragStart = this.parent.grid.rowDragAndDropModule.dragStart;
            this.parent.grid.rowDragAndDropModule.draggable.drag = this.rowDraging;
            this.parent.grid.rowDragAndDropModule.draggable.dragStop = this.rowDropped;
            this.parent.grid.rowDragAndDropModule.draggable.dragStart = this.rowDragStart;
            this.parent.grid.rowDragAndDropModule.droppable.drop = this.drop;
        }
    }
    RowDD.prototype.removeFirstrowBorder = function (element, isRemove) {
        var canremove = this.dropPosition === 'bottomSegment';
        if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element &&
            (element.rowIndex !== 0 || canremove)) {
            this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();
        }
    };
    RowDD.prototype.removeLastrowBorder = function (element, isRemove) {
        var isEmptyRow = element && (element.classList.contains('e-emptyrow') || element.classList.contains('e-columnheader'));
        var islastRowIndex = element && !isEmptyRow &&
            this.parent.getRows()[this.parent.getRows().length - 1].getAttribute('data-uid') !==
                element.getAttribute('data-uid');
        var canremove = islastRowIndex || this.dropPosition === 'topSegment';
        if (this.parent.element.getElementsByClassName('e-lastrow-border').length > 0 && element && (islastRowIndex || canremove)) {
            this.parent.element.getElementsByClassName('e-lastrow-border')[0].remove();
        }
    };
    RowDD.prototype.updateIcon = function (row, index, args) {
        var rowEle = args.target ? closestElement(args.target, 'tr') : null;
        this.dropPosition = undefined;
        var rowPositionHeight = 0;
        this.removeFirstrowBorder(rowEle);
        this.removeLastrowBorder(rowEle);
        for (var i = 0; i < this.selectedRows.length; i++) {
            if (!isNullOrUndefined(rowEle) && rowEle.getAttribute('data-uid') === this.selectedRows[i].getAttribute('data-uid')
                || !parentsUntil(args.target, 'e-gridcontent')) {
                this.dropPosition = 'Invalid';
                this.addErrorElem();
            }
        }
        var tObj = this.parent;
        var rowTop = 0;
        var roundOff = 0;
        var toolbar = document.getElementById(tObj.element.id + '_gridcontrol_toolbarItems');
        var toolHeight = toolbar ? toolbar.offsetHeight : 0;
        var positionOffSet = this.getOffset(tObj.element);
        var contentHeight = tObj.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;
        var scrollTop = tObj.getContent().firstElementChild.scrollTop;
        if (!isNullOrUndefined(rowEle)) {
            rowPositionHeight = rowEle.offsetTop - scrollTop;
        }
        if (tObj.options.allowTextWrap) {
            rowTop = row[0].offsetHeight;
        }
        else {
            rowTop = rowPositionHeight + contentHeight + roundOff;
        }
        var rowBottom = rowTop + row[0].offsetHeight;
        var difference = rowBottom - rowTop;
        var divide = difference / 3;
        var topRowSegment = rowTop + divide;
        var middleRowSegment = topRowSegment + divide;
        var bottomRowSegment = middleRowSegment + divide;
        var posx = positionOffSet.left;
        var mouseEvent = args.event;
        var posy = mouseEvent.pageY;
        var isTopSegment = posy <= topRowSegment;
        var isMiddleRowSegment = (posy > topRowSegment && posy <= middleRowSegment);
        var isBottomRowSegment = (posy > middleRowSegment && posy <= bottomRowSegment);
        if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {
            if (isTopSegment && this.dropPosition !== 'Invalid') {
                this.removeChildBorder();
                this.dropPosition = 'topSegment';
                this.removetopOrBottomBorder();
                this.addFirstrowBorder(rowEle);
                this.removeErrorElem();
                this.removeLastrowBorder(rowEle);
                this.topOrBottomBorder(args.target);
            }
            if (isMiddleRowSegment && this.dropPosition !== 'Invalid') {
                this.removetopOrBottomBorder();
                var element = void 0;
                var rowElement = [];
                element = closestElement(args.target, 'tr');
                rowElement = !isNullOrUndefined(element) ?
                    [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse')) : [];
                if (rowElement.length > 0) {
                    this.addRemoveClasses(rowElement, true, 'e-childborder');
                }
                this.addLastRowborder(rowEle);
                this.addFirstrowBorder(rowEle);
                this.dropPosition = 'middleSegment';
            }
            if (isBottomRowSegment && this.dropPosition !== 'Invalid') {
                this.removeErrorElem();
                this.removetopOrBottomBorder();
                this.removeChildBorder();
                this.dropPosition = 'bottomSegment';
                this.addLastRowborder(rowEle);
                this.removeFirstrowBorder(rowEle);
                this.topOrBottomBorder(args.target);
            }
        }
        return this.dropPosition;
    };
    RowDD.prototype.removeChildBorder = function () {
        var borderElem = [];
        borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));
        if (borderElem.length > 0) {
            this.addRemoveClasses(borderElem, false, 'e-childborder');
        }
    };
    RowDD.prototype.addFirstrowBorder = function (targetRow) {
        var node = this.parent.element;
        var tObj = this.parent;
        if (targetRow && targetRow.rowIndex === 0 && !targetRow.classList.contains('e-emptyrow')) {
            var div = createElement('div', { className: 'e-firstrow-border' });
            var gridheaderEle = this.parent.getHeaderContent();
            var toolbarHeight = 0;
            if (tObj.options.toolbar) {
                toolbarHeight = document.getElementById(tObj.element.id + '_gridcontrol_toolbarItems').offsetHeight;
            }
            var multiplegrid = !isNullOrUndefined(this.parent.options.rowDropTargetID);
            if (multiplegrid) {
                div.style.top = this.parent.grid.element.getElementsByClassName('e-gridheader')[0].offsetHeight
                    + toolbarHeight + 'px';
            }
            div.style.width = multiplegrid ? node.offsetWidth + 'px' :
                node.offsetWidth - this.getScrollWidth() + 'px';
            if (!gridheaderEle.querySelectorAll('.e-firstrow-border').length) {
                gridheaderEle.appendChild(div);
            }
        }
    };
    RowDD.prototype.addLastRowborder = function (trElement) {
        var isEmptyRow = trElement && (trElement.classList.contains('e-emptyrow') ||
            trElement.classList.contains('e-columnheader'));
        if (trElement && !isEmptyRow && this.parent.getRows()[this.parent.getRows().length - 1].getAttribute('data-uid') ===
            trElement.getAttribute('data-uid')) {
            var bottomborder = createElement('div', { className: 'e-lastrow-border' });
            var gridcontentEle = this.parent.getContent();
            bottomborder.style.width = this.parent.element.offsetWidth - this.getScrollWidth() + 'px';
            if (!gridcontentEle.querySelectorAll('.e-lastrow-border').length) {
                gridcontentEle.classList.add('e-treegrid-relative');
                gridcontentEle.appendChild(bottomborder);
                bottomborder.style.bottom = this.getScrollWidth() + 'px';
            }
        }
    };
    RowDD.prototype.getScrollWidth = function () {
        var scrollElem = this.parent.getContent().firstElementChild;
        return scrollElem.scrollWidth > scrollElem.offsetWidth ? this.parent.grid.Scroll.getScrollBarWidth() : 0;
    };
    RowDD.prototype.addErrorElem = function () {
        var dragelem = document.getElementsByClassName('e-cloneproperties')[0];
        var errorelem = dragelem.querySelectorAll('.e-errorelem').length;
        if (!errorelem && !this.parent.options.rowDropTargetID) {
            var ele = document.createElement('div');
            classList(ele, ['e-errorcontainer'], []);
            classList(ele, ['e-icons', 'e-errorelem'], []);
            var errorVal = dragelem.querySelector('.errorValue');
            var content = dragelem.querySelector('.e-rowcell').innerHTML;
            if (errorVal) {
                content = errorVal.innerHTML;
                errorVal.parentNode.removeChild(errorVal);
            }
            dragelem.querySelector('.e-rowcell').innerHTML = '';
            var spanContent = document.createElement('span');
            spanContent.className = 'errorValue';
            spanContent.style.paddingLeft = '16px';
            spanContent.innerHTML = content;
            dragelem.querySelector('.e-rowcell').appendChild(ele);
            dragelem.querySelector('.e-rowcell').appendChild(spanContent);
        }
    };
    RowDD.prototype.removeErrorElem = function () {
        var errorelem = document.querySelector('.e-errorelem');
        if (errorelem) {
            errorelem.remove();
        }
    };
    RowDD.prototype.topOrBottomBorder = function (target) {
        var element;
        var multiplegrid = !isNullOrUndefined(this.parent.options.rowDropTargetID);
        var rowElement = [];
        element = closestElement(target, 'tr');
        rowElement = element ? [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse')) : [];
        if (rowElement.length) {
            if (this.dropPosition === 'topSegment') {
                this.addRemoveClasses(rowElement, true, 'e-droptop');
                if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0) {
                    this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();
                }
            }
            if (this.dropPosition === 'bottomSegment') {
                this.addRemoveClasses(rowElement, true, 'e-dropbottom');
            }
        }
    };
    RowDD.prototype.removetopOrBottomBorder = function () {
        var border = [];
        border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));
        if (border.length) {
            this.addRemoveClasses(border, false, 'e-dropbottom');
            this.addRemoveClasses(border, false, 'e-droptop');
        }
    };
    RowDD.prototype.addRemoveClasses = function (cells, add, className) {
        for (var i = 0, len = cells.length; i < len; i++) {
            if (add) {
                cells[i].classList.add(className);
            }
            else {
                cells[i].classList.remove(className);
            }
        }
    };
    RowDD.prototype.getOffset = function (element) {
        var box = element.getBoundingClientRect();
        var body = document.body;
        var docElem = document.documentElement;
        var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
        var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;
        var clientTop = docElem.clientTop || body.clientTop || 0;
        var clientLeft = docElem.clientLeft || body.clientLeft || 0;
        var top = box.top + scrollTop - clientTop;
        var left = box.left + scrollLeft - clientLeft;
        return { top: Math.round(top), left: Math.round(left) };
    };
    RowDD.prototype.treeGridDrop = function (e) {
        var tObj = this.parent;
        var targetRow = closestElement(e.target, 'tr');
        var srcControl;
        var currentIndex;
        if ((e.droppedElement.querySelector('tr').getAttribute('single-dragrow') !== 'true' &&
            e.droppedElement.parentElement.parentElement.id === tObj.element.id)
            || (e.droppedElement.querySelector('tr').getAttribute('single-dragrow') === 'true' &&
                e.droppedElement.parentElement.parentElement.id !== tObj.element.id)) {
            return;
        }
        if (e.droppedElement.parentElement.parentElement.id !== tObj.element.id) {
            srcControl = e.droppedElement.parentElement.parentElement.blazor_instance;
        }
        if (srcControl.element.id !== tObj.element.id && srcControl.options.rowDropTargetID !== tObj.element.id) {
            return;
        }
        var targetIndex = currentIndex = this.getTargetIdx(targetRow);
        if (isNaN(targetIndex)) {
            targetIndex = currentIndex = 0;
        }
        if (tObj.options.allowPaging) {
            targetIndex = targetIndex + (tObj.options.currentPage * tObj.options.pageSize) - tObj.options.pageSize;
        }
        this.removetopOrBottomBorder();
        this.removeChildBorder();
        var targetClass = e.target.classList.value;
        var targetID = e.target.id;
        var rowPosition = this.dropPosition === 'topSegment' ? 'Above' : this.dropPosition === 'bottomSegment' ? 'Below' :
            this.dropPosition === 'middleSegment' ? 'Child' : 'Invalid';
        tObj.dotNetRef.invokeMethodAsync('ReorderRows', 0, targetIndex, 'add', false, targetClass, targetID, srcControl.dotNetRef, false, rowPosition);
        srcControl.dotNetRef.invokeMethodAsync('ReorderRows', 0, targetIndex, 'delete', false, targetClass, targetID, null, false, rowPosition);
    };
    RowDD.prototype.getTargetIdx = function (targetRow) {
        return targetRow ? parseInt(targetRow.getAttribute('aria-rowindex'), 10) : 0;
    };
    RowDD.prototype.getElementFromPosition = function (element, event) {
        var target;
        var position = this.getPosition(event);
        element.style.display = 'none';
        target = document.elementFromPoint(position.x, position.y);
        element.style.display = '';
        return target;
    };
    RowDD.prototype.ensuredropPosition = function (draggedRecords, currentRecord) {
        var tObj = this.parent;
        var rowDragMoudule = this;
        draggedRecords.filter(function (e) {
            var childRecords = tObj.options.currentViewData.filter(function (r) {
                return r.parentUniqueID === e.uniqueID;
            });
            if (e.hasChildRecords && childRecords.length) {
                var valid = childRecords.indexOf(currentRecord);
                if (valid === -1) {
                    rowDragMoudule.ensuredropPosition(childRecords, currentRecord);
                }
                else {
                    rowDragMoudule.dropPosition = 'Invalid';
                    rowDragMoudule.addErrorElem();
                    rowDragMoudule.canDrop = false;
                    return;
                }
            }
        });
    };
    RowDD.prototype.getPosition = function (e) {
        var position = {};
        position.x = (isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX :
            e.clientX);
        position.y = (isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY :
            e.clientY);
        return position;
    };
    return RowDD;
}());
export { RowDD };
