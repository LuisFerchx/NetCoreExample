var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { select, closest, Browser, debounce, detach, extend, Observer, addClass, removeClass, formatUnit } from '@syncfusion/ej2-base';
import { EventHandler, createElement, setStyleAttribute } from '@syncfusion/ej2-base';
import { Touch as EJ2Touch, print as printWindow, isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';
import { getScrollableParent } from '@syncfusion/ej2-popups';
import * as classes from './classes';
import * as events from './constant';
import { Count } from './actions/count';
import { Resize } from './actions/resize';
import { IFRAME_HEADER } from './constant';
import { Toolbar } from './actions/toolbar';
import { Link } from './renderer/link-module';
import { Table } from './renderer/table-module';
import { Image } from './renderer/image-module';
import { HtmlEditor } from './actions/html-editor';
import { FullScreen } from './actions/full-screen';
import { ViewSource } from './renderer/view-source';
import { QuickToolbar } from './actions/quick-toolbar';
import { PasteCleanup } from './actions/paste-clean-up';
import { MarkdownEditor } from './actions/markdown-editor';
import { MarkdownFormatter } from './formatter/markdown-formatter';
import { KeyboardEvents } from './actions/keyboard';
import { ExecCommandCallBack } from './actions/execute-command-callback';
import { getEditValue, isIDevice, decode, dispatchEvent, hasClass, setAttributes, executeGroup } from './util';
var SfRichTextEditor = (function () {
    function SfRichTextEditor(element, options, dotnetRef) {
        this.undoRedoSteps = 30;
        this.undoRedoTimer = 300;
        this.floatingToolbarOffset = 0;
        this.enableHtmlEncode = false;
        this.isInitial = false;
        this.blurEnabled = false;
        this.focusEnabled = false;
        this.undoRedoStatus = false;
        this.createdEnabled = false;
        this.actionBeginEnabled = false;
        this.imageDeleteEnabled = false;
        this.onResizeStopEnabled = false;
        this.quickTbClosedEnabled = false;
        this.quickTbOpenedEnabled = false;
        this.onQuickTbOpenEnabled = false;
        this.onResizeStartEnabled = false;
        this.actionCompleteEnabled = false;
        this.beforeUploadImageEnabled = false;
        this.onImageUploadFailedEnabled = false;
        this.onImageUploadSuccessEnabled = false;
        this.inlineCloseItems = ['CreateLink', 'Image', 'CreateTable', 'Maximize', 'Minimize'];
        if (isNOU(element)) {
            return;
        }
        this.element = element;
        this.element.blazor__instance = this;
        this.dotNetRef = dotnetRef;
        this.updateContext(options);
        this.observer = new Observer(this);
        this.dotNetRef.invokeMethodAsync('UpdateDeviceData', { isDevice: Browser.isDevice, isIDevice: isIDevice() });
        this.initModules();
    }
    SfRichTextEditor.prototype.updateContext = function (rteObj) {
        extend(this, this, rteObj);
    };
    SfRichTextEditor.prototype.initModules = function () {
        if (this.editorMode === 'HTML') {
            this.htmlEditorModule = new HtmlEditor(this);
            this.pasteCleanupModule = new PasteCleanup(this);
        }
        else {
            this.markdownEditorModule = new MarkdownEditor(this);
        }
        if (this.toolbarSettings.enable) {
            this.isUndoRedoStatus();
            this.toolbarModule = new Toolbar(this);
        }
        this.fullScreenModule = new FullScreen(this);
        this.viewSourceModule = new ViewSource(this);
        this.countModule = new Count(this);
        this.resizeModule = new Resize(this);
        this.linkModule = new Link(this);
        this.imageModule = new Image(this);
        this.tableModule = new Table(this);
        this.quickToolbarModule = new QuickToolbar(this);
    };
    SfRichTextEditor.prototype.initialize = function () {
        this.isInitial = true;
        this.onBlurHandler = this.blurHandler.bind(this);
        this.onFocusHandler = this.focusHandler.bind(this);
        this.onResizeHandler = this.resizeHandler.bind(this);
        var execCommandCallBack = new ExecCommandCallBack(this);
        this.id = this.element.id;
        this.clickPoints = { clientX: 0, clientY: 0 };
        this.updateContentElements();
        this.inputElement = this.getEditPanel();
        this.valueContainer = this.element.querySelector('textarea');
        if (this.readonly) {
            this.setReadOnly(true);
        }
        this.setHeight(this.height);
        this.setWidth(this.width);
        this.setContentHeight();
        if (this.iframeSettings && this.iframeSettings.enable) {
            this.setIframeSettings();
        }
        if (isNOU(this.value) || this.value === '') {
            this.value = this.element.querySelector('.e-rte-value-wrapper').innerHTML.replace(/<!--!-->/gi, '').trim();
        }
        this.setPanelValue(this.value);
        this.observer.notify(events.initialEnd, {});
        if (this.enableXhtml) {
            this.value = this.getXhtml();
        }
        this.wireEvents();
        if (this.createdEnabled) {
            this.dotNetRef.invokeMethodAsync('CreatedEvent');
        }
    };
    SfRichTextEditor.prototype.isUndoRedoStatus = function () {
        for (var i = 0; i < this.toolbarSettings.items.length; i++) {
            if (!isNOU(this.toolbarSettings.items[i]) && (this.toolbarSettings.items[i].subCommand === 'Undo'
                || this.toolbarSettings.items[i].subCommand === 'Redo')) {
                this.undoRedoStatus = true;
                break;
            }
        }
    };
    SfRichTextEditor.prototype.setPanelValue = function (value) {
        value = this.serializeValue(value);
        if (this.editorMode === 'HTML' && this.enableXhtml) {
            this.inputElement.innerHTML = value;
            this.observer.notify(events.xhtmlValidation, {});
            value = this.inputElement.innerHTML;
        }
        if (this.editorMode === 'HTML') {
            this.value = getEditValue(isNOU(value) ? '' : value, this);
        }
        this.updatePanelValue();
        if (this.value !== this.cloneValue) {
            if (this.enableXhtml) {
                this.valueContainer.value = this.getXhtmlString(this.valueContainer.value);
            }
            dispatchEvent(this.valueContainer, 'change');
            if (!this.isInitial) {
                this.dotNetRef.invokeMethodAsync('UpdateValue', this.value);
            }
            else {
                this.isInitial = false;
            }
            this.cloneValue = this.value;
        }
        this.setPlaceHolder();
    };
    SfRichTextEditor.prototype.updateContentElements = function () {
        if ((this.editorMode === 'HTML' && (isNOU(this.iframeSettings) || !this.iframeSettings.enable)) || this.editorMode === 'Markdown') {
            this.contentPanel = this.element.querySelector('.e-rte-content');
        }
        else if (this.editorMode === 'HTML' && (this.iframeSettings && this.iframeSettings.enable)) {
            this.contentPanel = this.element.querySelector('iframe');
            this.updateIframeHtmlContents();
        }
    };
    SfRichTextEditor.prototype.updateIframeHtmlContents = function () {
        var iFrameBodyContent = '<body spellcheck="false" autocorrect="off" contenteditable="true"></body></html>';
        var iFrameContent = IFRAME_HEADER + iFrameBodyContent;
        var iframe = this.contentPanel;
        iframe.innerHTML = iFrameContent;
        iframe.contentDocument.body.id = this.id + '_rte-edit-view';
        iframe.contentDocument.body.setAttribute('aria-owns', this.id);
        iframe.contentDocument.open();
        iFrameContent = this.setThemeColor(iFrameContent, { color: '#333' });
        iframe.contentDocument.write(iFrameContent);
        iframe.contentDocument.close();
        if (this.enableRtl) {
            iframe.contentDocument.body.setAttribute('class', 'e-rtl');
        }
    };
    SfRichTextEditor.prototype.setThemeColor = function (content, styles) {
        var fontColor = getComputedStyle(this.element, '.e-richtexteditor').getPropertyValue('color');
        return content.replace(styles.color, fontColor);
    };
    SfRichTextEditor.prototype.refresh = function (e) {
        if (e === void 0) { e = { requestType: 'refresh' }; }
        this.observer.notify(e.requestType + "-begin", e);
    };
    SfRichTextEditor.prototype.setWidth = function (width) {
        if (width !== 'auto') {
            setStyleAttribute(this.element, { 'width': formatUnit(this.width) });
        }
        else {
            this.element.style.width = 'auto';
        }
    };
    SfRichTextEditor.prototype.setHeight = function (height) {
        if (height !== 'auto') {
            this.element.style.height = formatUnit(height);
        }
        else {
            this.element.style.height = 'auto';
        }
        if (this.toolbarSettings.type === 'Expand' && (typeof (this.height) === 'string' &&
            this.height.indexOf('px') > -1 || typeof (this.height) === 'number')) {
            this.element.classList.add(classes.CLS_RTE_FIXED_TB_EXPAND);
        }
        else {
            this.element.classList.remove(classes.CLS_RTE_FIXED_TB_EXPAND);
        }
    };
    SfRichTextEditor.prototype.openPasteDialog = function () {
        this.dotNetRef.invokeMethodAsync('PasteDialog');
    };
    SfRichTextEditor.prototype.setContentHeight = function (target, isExpand) {
        var heightValue = '';
        var topValue = 0;
        var rteHeightPercent = '';
        var heightPercent;
        var sourceCodeEle = this.element.querySelector('.e-rte-content .e-rte-srctextarea');
        var cntEle = (!isNOU(sourceCodeEle) &&
            sourceCodeEle.parentElement.style.display === 'block') ? sourceCodeEle.parentElement : this.getPanel();
        var rteHeight = this.element.offsetHeight;
        if (this.element.offsetHeight === 0 && this.height !== 'auto' && !this.getToolbar()) {
            rteHeight = parseInt(this.height, 10);
            heightPercent = typeof (this.height) === 'string' && this.height.indexOf('%') > -1;
            if (heightPercent) {
                rteHeightPercent = this.height;
            }
        }
        var tbHeight = this.getToolbar() ? this.toolbarModule.getToolbarHeight() : 0;
        var rzHandle = this.element.querySelector('.' + classes.CLS_RTE_RES_HANDLE);
        var rzHeight = this.enableResize ? (!isNOU(rzHandle) ? (rzHandle.offsetHeight + 8) : 0) : 0;
        var expandPopHeight = this.getToolbar() ? this.toolbarModule.getExpandTBarPopHeight() : 0;
        if (this.toolbarSettings.type === 'Expand' && isExpand && target !== 'preview') {
            heightValue = (this.height === 'auto' && rzHeight === 0 && !this.element.classList.contains('e-rte-full-screen')) ?
                'auto' : rteHeight - (tbHeight + expandPopHeight + rzHeight) + 'px';
            topValue = (!this.toolbarSettings.enableFloating) ? expandPopHeight : 0;
        }
        else {
            if (this.height === 'auto' && !(this.element.classList.contains('e-rte-full-screen')) && !this.isResizeInitialized) {
                heightValue = 'auto';
            }
            else {
                heightValue = heightPercent ? rteHeightPercent : (this.element.classList.contains('e-rte-full-screen') ?
                    window.innerHeight : rteHeight) - (tbHeight + rzHeight) + 'px';
            }
        }
        setStyleAttribute(cntEle, { height: heightValue, marginTop: topValue + 'px' });
        if (this.iframeSettings.enable && target === 'sourceCode') {
            var codeElement = select('.' + classes.CLS_RTE_CONTENT, this.element);
            setStyleAttribute(codeElement, { height: heightValue, marginTop: topValue + 'px' });
        }
        if (this.toolbarSettings.enableFloating && this.getToolbar() && !this.inlineMode.enable) {
            var isExpandOpened = !isNOU(this.element.querySelector('.e-rte-toolbar .e-hor-nav.e-nav-active'));
            var tbContainerHeight = (isExpandOpened ? (tbHeight + expandPopHeight) : tbHeight) + 'px';
            setStyleAttribute(this.getToolbar().parentElement, { height: tbContainerHeight });
        }
        if (rzHeight === 0) {
            this.autoResize();
        }
    };
    SfRichTextEditor.prototype.getXhtml = function () {
        var currentValue = this.value;
        if (this.enableXhtml) {
            currentValue = this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(currentValue);
        }
        return currentValue;
    };
    SfRichTextEditor.prototype.getXhtmlString = function (value) {
        var currentValue = value;
        if (this.enableXhtml) {
            currentValue = this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(currentValue);
        }
        return currentValue;
    };
    SfRichTextEditor.prototype.getPanel = function () {
        return this.contentPanel;
    };
    SfRichTextEditor.prototype.saveSelection = function () {
        this.formatter.editorManager.nodeSelection.save(this.getRange(), this.getDocument());
    };
    SfRichTextEditor.prototype.restoreSelection = function () {
        this.formatter.editorManager.nodeSelection.restore();
    };
    SfRichTextEditor.prototype.getEditPanel = function () {
        var editNode;
        if (this.iframeSettings && this.iframeSettings.enable) {
            if (!isNOU(this.contentPanel.contentDocument)) {
                editNode = this.contentPanel.contentDocument.body;
            }
            else {
                editNode = this.inputElement;
            }
        }
        else {
            editNode = this.element.querySelector('.e-rte-content .e-content');
        }
        return editNode;
    };
    SfRichTextEditor.prototype.getText = function () {
        return this.getEditPanel().innerText;
    };
    SfRichTextEditor.prototype.getDocument = function () {
        return this.getEditPanel().ownerDocument;
    };
    SfRichTextEditor.prototype.getRange = function () {
        return this.formatter.editorManager.nodeSelection.getRange(this.getDocument());
    };
    SfRichTextEditor.prototype.updateValueContainer = function (val) {
        if (this.enableXhtml && !isNOU(val)) {
            val = this.getXhtmlString(val);
        }
        this.valueContainer.value = val;
        dispatchEvent(this.valueContainer, 'change');
    };
    SfRichTextEditor.prototype.getInputInnerHtml = function () {
        return this.inputElement.innerHTML.replace(/<!--!-->/gi, '');
    };
    SfRichTextEditor.prototype.refreshUI = function () {
        this.refresh();
    };
    SfRichTextEditor.prototype.getUpdatedValue = function () {
        var value;
        if (!isNOU(this.tableModule)) {
            this.tableModule.removeResizeEle();
        }
        if (this.editorMode === 'HTML') {
            var inputContent = this.getInputInnerHtml();
            value = (inputContent === '<p><br></p>') ? null : this.enableHtmlEncode ?
                this.encode(decode(inputContent)) : inputContent;
        }
        else {
            value = this.inputElement.value === '' ? null :
                this.inputElement.value;
        }
        return value;
    };
    SfRichTextEditor.prototype.countCalculate = function () {
        this.countModule.renderCount();
    };
    SfRichTextEditor.prototype.updateEnable = function () {
        if (this.enabled) {
            removeClass([this.element], classes.CLS_DISABLED);
            this.element.setAttribute('aria-disabled', 'false');
            if (!isNOU(this.htmlAttributes.tabindex)) {
                this.inputElement.setAttribute('tabindex', this.htmlAttributes.tabindex);
            }
            else {
                this.inputElement.setAttribute('tabindex', '0');
            }
        }
        else {
            if (this.getToolbar()) {
                removeClass(this.getToolbar().querySelectorAll('.' + classes.CLS_ACTIVE), classes.CLS_ACTIVE);
                removeClass([this.getToolbar()], [classes.CLS_TB_FLOAT, classes.CLS_TB_ABS_FLOAT]);
            }
            addClass([this.element], classes.CLS_DISABLED);
            this.element.tabIndex = -1;
            this.element.setAttribute('aria-disabled', 'true');
            this.inputElement.setAttribute('tabindex', '-1');
        }
    };
    SfRichTextEditor.prototype.setEnable = function () {
        this.updateEnable();
        (this.enabled) ? this.wireEvents() : this.unWireEvents();
    };
    SfRichTextEditor.prototype.executeCommand = function (commandName, value, option) {
        value = this.htmlPurifier(commandName, value);
        if (this.editorMode === 'HTML') {
            var range = this.getRange();
            if (this.iframeSettings.enable) {
                this.formatter.editorManager.nodeSelection.Clear(this.element.ownerDocument);
            }
            var toFocus = (this.iframeSettings.enable &&
                range.startContainer === this.inputElement) ? true : !this.inputElement.contains(range.startContainer);
            if (toFocus) {
                this.focusIn();
            }
        }
        var tool = executeGroup[commandName];
        if (option && option.undo) {
            if (option.undo && this.formatter.getUndoRedoStack().length === 0) {
                this.formatter.saveData();
            }
        }
        this.formatter.editorManager.execCommand(tool.command, tool.subCommand ? tool.subCommand : (value ? value : tool.value), null, null, (value ? value : tool.value), (value ? value : tool.value));
        if (option && option.undo) {
            this.formatter.saveData();
            this.formatter.enableUndo(this);
        }
        this.setPlaceHolder();
        this.observer.notify(events.contentChanged, {});
        this.value = this.inputElement.innerHTML;
        this.dotNetRef.invokeMethodAsync('UpdateValue', this.value);
    };
    SfRichTextEditor.prototype.htmlPurifier = function (command, value) {
        if (this.editorMode === 'HTML') {
            switch (command) {
                case 'insertTable':
                    if (isNOU(value.width)) {
                        value.width = {
                            minWidth: this.tableSettings.minWidth,
                            maxWidth: this.tableSettings.maxWidth, width: this.tableSettings.width
                        };
                    }
                    value.selection = this.formatter.editorManager.nodeSelection.save(this.getRange(), this.getDocument());
                    break;
                case 'insertImage':
                    var temp = createElement('img', {
                        attrs: {
                            src: value.url
                        }
                    });
                    var imageValue = temp.outerHTML;
                    var url = (imageValue !== '' && (createElement('div', {
                        innerHTML: imageValue
                    }).firstElementChild).getAttribute('src')) || null;
                    url = !isNOU(url) ? url : '';
                    value.url = url;
                    if (isNOU(value.width)) {
                        value.width = {
                            minWidth: this.insertImageSettings.minWidth,
                            maxWidth: this.insertImageSettings.maxWidth, width: this.insertImageSettings.width
                        };
                    }
                    if (isNOU(value.height)) {
                        value.height = {
                            minHeight: this.insertImageSettings.minHeight,
                            maxHeight: this.insertImageSettings.maxHeight, height: this.insertImageSettings.height
                        };
                    }
                    value.selection = this.formatter.editorManager.nodeSelection.save(this.getRange(), this.getDocument());
                    break;
                case 'createLink':
                    var tempNode = createElement('a', {
                        attrs: {
                            href: value.url
                        }
                    });
                    var linkValue = tempNode.outerHTML;
                    var href = (linkValue !== '' && (createElement('div', {
                        innerHTML: linkValue
                    }).firstElementChild).getAttribute('href')) || null;
                    href = !isNOU(href) ? href : '';
                    value.url = href;
                    value.selection = this.formatter.editorManager.nodeSelection.save(this.getRange(), this.getDocument());
                    break;
            }
        }
        return value;
    };
    SfRichTextEditor.prototype.serializeValue = function (value) {
        if (this.editorMode === 'HTML' && !isNOU(value)) {
            if (this.enableHtmlEncode) {
                value = this.htmlEditorModule.sanitizeHelper(decode(value));
                value = this.encode(value);
            }
            else {
                value = this.htmlEditorModule.sanitizeHelper(value);
            }
        }
        return value;
    };
    SfRichTextEditor.prototype.selectAll = function () {
        this.observer.notify(events.selectAll, {});
    };
    SfRichTextEditor.prototype.selectRange = function (range) {
        this.observer.notify(events.selectRange, { range: range });
    };
    SfRichTextEditor.prototype.showFullScreen = function () {
        this.fullScreenModule.showFullScreen();
    };
    SfRichTextEditor.prototype.sanitizeHtml = function (value) {
        return this.serializeValue(value);
    };
    SfRichTextEditor.prototype.updateValue = function (value) {
        if (isNOU(value)) {
            var inputVal = this.inputElement.innerHTML;
        }
        else {
        }
    };
    SfRichTextEditor.prototype.clipboardAction = function (action, event) {
        switch (action.toLowerCase()) {
            case 'cut':
                this.onCut();
                this.formatter.onSuccess(this, {
                    requestType: 'Cut',
                    editorMode: this.editorMode,
                    event: event
                });
                break;
            case 'copy':
                this.onCopy();
                this.formatter.onSuccess(this, {
                    requestType: 'Copy',
                    editorMode: this.editorMode,
                    event: event
                });
                break;
            case 'paste':
                this.onPaste(event);
                break;
        }
    };
    SfRichTextEditor.prototype.getContent = function () {
        if (this.iframeSettings.enable) {
            return this.inputElement;
        }
        else {
            return this.getPanel();
        }
    };
    SfRichTextEditor.prototype.getSelectedHtml = function () {
        var range;
        var containerElm = createElement('div');
        var selection = this.getDocument().getSelection();
        if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
            var selectedHtml = range.cloneContents();
            containerElm.appendChild(selectedHtml);
        }
        return containerElm.innerHTML;
    };
    SfRichTextEditor.prototype.getSelection = function () {
        var str = '';
        this.observer.notify(events.getSelectedHtml, {
            callBack: function (txt) {
                str = txt;
            }
        });
        return str;
    };
    SfRichTextEditor.prototype.showInlineToolbar = function () {
        if (this.inlineMode.enable) {
            var currentRange = this.getRange();
            var targetElm = currentRange.endContainer.nodeName === '#text' ?
                currentRange.endContainer.parentElement : currentRange.endContainer;
            var x = currentRange.getClientRects()[0].left;
            var y = currentRange.getClientRects()[0].top;
            this.quickToolbarModule.showInlineQTBar(x, y, targetElm);
        }
    };
    SfRichTextEditor.prototype.hideInlineToolbar = function () {
        this.quickToolbarModule.hideInlineQTBar();
    };
    SfRichTextEditor.prototype.updateValueData = function () {
        if (this.enableHtmlEncode) {
            this.setPanelValue(this.encode(decode(this.inputElement.innerHTML)));
        }
        else {
            var value = /<[a-z][\s\S]*>/i.test(this.inputElement.innerHTML) ? this.inputElement.innerHTML :
                decode(this.inputElement.innerHTML);
            this.setPanelValue(value);
        }
    };
    SfRichTextEditor.prototype.removeSheets = function (srcList) {
        var i;
        for (i = 0; i < srcList.length; i++) {
            detach(srcList[i]);
        }
    };
    SfRichTextEditor.prototype.updateReadOnly = function () {
        this.observer.notify(events.readOnlyMode, { editPanel: this.inputElement, mode: this.readonly });
    };
    SfRichTextEditor.prototype.setReadOnly = function (initial) {
        this.updateReadOnly();
        if (!initial) {
            if (this.readonly && this.enabled) {
                this.unBindEvents();
            }
            else if (this.enabled) {
                this.bindEvents();
            }
        }
    };
    SfRichTextEditor.prototype.setIframeSettings = function () {
        if (this.iframeSettings.resources) {
            var styleSrc = this.iframeSettings.resources.styles;
            var scriptSrc = this.iframeSettings.resources.scripts;
            if (this.iframeSettings.resources.scripts.length > 0) {
                this.InjectSheet(true, scriptSrc);
            }
            if (this.iframeSettings.resources.styles.length > 0) {
                this.InjectSheet(false, styleSrc);
            }
        }
        if (this.iframeSettings.attributes) {
            setAttributes(this.iframeSettings.attributes, this, true, false);
        }
    };
    SfRichTextEditor.prototype.InjectSheet = function (scriptSheet, srcList) {
        try {
            if (srcList && srcList.length > 0) {
                var iFrame = this.getDocument();
                var target = iFrame.querySelector('head');
                for (var i = 0; i < srcList.length; i++) {
                    if (scriptSheet) {
                        var scriptEle = this.createScriptElement();
                        scriptEle.src = srcList[i];
                        target.appendChild(scriptEle);
                    }
                    else {
                        var styleEle = this.createStyleElement();
                        styleEle.href = srcList[i];
                        target.appendChild(styleEle);
                    }
                }
            }
        }
        catch (e) {
            return;
        }
    };
    SfRichTextEditor.prototype.createScriptElement = function () {
        var scriptEle = createElement('script', {
            className: classes.CLS_SCRIPT_SHEET
        });
        scriptEle.type = 'text/javascript';
        return scriptEle;
    };
    SfRichTextEditor.prototype.createStyleElement = function () {
        var styleEle = createElement('link', {
            className: classes.CLS_STYLE_SHEET
        });
        styleEle.rel = 'stylesheet';
        return styleEle;
    };
    SfRichTextEditor.prototype.setValue = function () {
        var innerHtml = !isNOU(this.element.innerHTML) && this.element.innerHTML.replace(/<(\/?|\!?)(!--!--)>/g, '').trim();
        if (innerHtml !== '') {
            if (this.element.tagName === 'TEXTAREA') {
            }
            else {
            }
        }
    };
    SfRichTextEditor.prototype.updateResizeFlag = function () {
        this.isResizeInitialized = true;
    };
    SfRichTextEditor.prototype.getHtml = function () {
        return this.value;
    };
    SfRichTextEditor.prototype.showSourceCode = function () {
        if (this.readonly) {
            return;
        }
        this.observer.notify(events.sourceCode, {});
    };
    SfRichTextEditor.prototype.getCharCount = function () {
        var htmlText = this.editorMode === 'Markdown' ? this.getEditPanel().value.trim() :
            this.getEditPanel().textContent.trim();
        return htmlText.length;
    };
    SfRichTextEditor.prototype.focusOut = function () {
        if (this.enabled) {
            this.inputElement.blur();
            this.blurHandler({});
        }
    };
    SfRichTextEditor.prototype.getToolbar = function () {
        return this.toolbarSettings.enable ? this.element.querySelector('#' + this.id + '_toolbar') : null;
    };
    SfRichTextEditor.prototype.getToolbarElement = function () {
        return this.toolbarSettings.enable ? this.element.querySelector('#' + this.id + '_toolbar') : null;
    };
    SfRichTextEditor.prototype.updateIntervalValue = function () {
        clearTimeout(this.idleInterval);
        this.idleInterval = setTimeout(this.updateValueOnIdle.bind(this), 0);
    };
    SfRichTextEditor.prototype.updateValueOnIdle = function () {
        if (!isNOU(this.tableModule) && !isNOU(this.inputElement.querySelector('.e-table-box.e-rbox-select'))) {
            return;
        }
        this.value = this.getUpdatedValue();
        this.updateValueContainer(this.value);
        this.invokeChangeEvent();
    };
    SfRichTextEditor.prototype.invokeChangeEvent = function () {
        if (this.enableXhtml && !isNOU(this.value)) {
            this.value = this.getXhtml();
        }
        if (this.value !== this.cloneValue) {
            if (this.enablePersistence) {
                window.localStorage.setItem(this.id, this.value);
            }
            this.dotNetRef.invokeMethodAsync('ChangeEvent');
            this.cloneValue = this.value;
        }
    };
    SfRichTextEditor.prototype.preventImgResize = function (e) {
        if (e.target.nodeName.toLocaleLowerCase() === 'img') {
            e.preventDefault();
        }
    };
    SfRichTextEditor.prototype.defaultResize = function (e, isDefault) {
        if (Browser.info.name === 'msie') {
            if (isDefault) {
                this.getEditPanel().removeEventListener('mscontrolselect', this.preventImgResize);
            }
            else {
                this.getEditPanel().addEventListener('mscontrolselect', this.preventImgResize);
            }
        }
        else if (Browser.info.name === 'mozilla') {
            var value = isDefault ? 'true' : 'false';
            this.getDocument().execCommand('enableObjectResizing', isDefault, value);
            this.getDocument().execCommand('enableInlineTableEditing', isDefault, value);
        }
    };
    SfRichTextEditor.prototype.encode = function (value) {
        var divNode = document.createElement('div');
        divNode.innerText = value.trim();
        return divNode.innerHTML.replace(/<br\s*[\/]?>/gi, '\n');
    };
    SfRichTextEditor.prototype.print = function () {
        var _this = this;
        var printWind;
        var printArgs = {
            requestType: 'print',
            cancel: false
        };
        this.dotNetRef.invokeMethodAsync('ActionBeginEvent', printArgs).then(function (printingArgs) {
            printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth);
            if (Browser.info.name === 'msie') {
                printWind.resizeTo(screen.availWidth, screen.availHeight);
            }
            printWind = printWindow(_this.inputElement, printWind);
            if (!printingArgs.cancel) {
                var actionArgs = {
                    requestType: 'print'
                };
                _this.dotNetRef.invokeMethodAsync('ActionCompleteEvent', actionArgs);
            }
        });
    };
    SfRichTextEditor.prototype.autoResize = function () {
        var _this = this;
        if (this.height === 'auto') {
            if (this.editorMode === 'Markdown') {
                setTimeout(function () { _this.setAutoHeight(_this.inputElement); }, 0);
            }
            else if (this.iframeSettings.enable) {
                var iframeElement_1 = this.element.querySelector('#' + this.element.id + '_rte-view');
                setTimeout(function () { _this.setAutoHeight(iframeElement_1); }, 100);
                this.inputElement.style.overflow = 'hidden';
            }
        }
        else {
            this.inputElement.style.overflow = null;
        }
    };
    SfRichTextEditor.prototype.setAutoHeight = function (element) {
        if (!isNOU(element)) {
            element.style.height = '';
            element.style.height = this.inputElement.scrollHeight + 'px';
            element.style.overflow = 'hidden';
        }
    };
    SfRichTextEditor.prototype.restrict = function (e) {
        if (this.maxLength >= 0) {
            var element = this.editorMode === 'Markdown' ? this.getText() :
                e.currentTarget.textContent.trim();
            var array = [8, 16, 17, 37, 38, 39, 40, 46, 65];
            var arrayKey = void 0;
            for (var i = 0; i <= array.length - 1; i++) {
                if (e.which === array[i]) {
                    if (e.ctrlKey && e.which === 65) {
                        return;
                    }
                    else if (e.which !== 65) {
                        arrayKey = array[i];
                        return;
                    }
                }
            }
            if ((element.length >= this.maxLength && this.maxLength !== -1) && e.which !== arrayKey) {
                e.preventDefault();
            }
        }
    };
    SfRichTextEditor.prototype.setPlaceHolder = function () {
        if (this.inputElement && this.placeholder && this.iframeSettings.enable !== true) {
            if (this.editorMode !== 'Markdown') {
                if (!this.placeHolderContainer) {
                    this.placeHolderContainer = this.element.querySelector('.e-rte-placeholder');
                }
                this.placeHolderContainer.innerHTML = this.placeholder;
                if (this.inputElement.textContent.length === 0 &&
                    !isNOU(this.inputElement.firstChild) && this.inputElement.firstChild.nodeName === 'P' &&
                    !isNOU(this.inputElement.firstChild.firstChild) && this.inputElement.firstChild.firstChild.nodeName === 'BR') {
                    this.placeHolderContainer.style.display = 'block';
                }
                else {
                    this.placeHolderContainer.style.display = 'none';
                }
            }
            else {
                this.inputElement.setAttribute('placeholder', this.placeholder);
            }
        }
    };
    SfRichTextEditor.prototype.updatePanelValue = function () {
        var value = this.value;
        value = (this.enableHtmlEncode && this.value) ? decode(value) : value;
        var getTextArea = this.element.querySelector('.e-rte-srctextarea');
        if (value) {
            if (getTextArea && getTextArea.style.display === 'block') {
                getTextArea.value = this.value;
            }
            if (this.valueContainer) {
                this.valueContainer.value = (this.enableHtmlEncode) ? this.value : value;
            }
            if (this.editorMode === 'HTML' && this.inputElement && this.inputElement.innerHTML.trim() !== value.trim()) {
                this.inputElement.innerHTML = value;
            }
            else if (this.editorMode === 'Markdown' && this.inputElement
                && this.inputElement.value.trim() !== value.trim()) {
                this.inputElement.value = value;
            }
        }
        else {
            if (getTextArea && getTextArea.style.display === 'block') {
                getTextArea.value = '';
            }
            if (this.editorMode === 'HTML') {
                this.inputElement.innerHTML = '<p><br/></p>';
            }
            else {
                this.inputElement.value = '';
            }
            if (this.valueContainer) {
                this.valueContainer.value = '';
            }
        }
        if (this.showCharCount) {
            this.countModule.refresh();
        }
    };
    SfRichTextEditor.prototype.contentChanged = function () {
        if (this.autoSaveOnIdle) {
            if (!isNOU(this.saveInterval)) {
                clearTimeout(this.timeInterval);
                this.timeInterval = setTimeout(this.updateIntervalValue.bind(this), this.saveInterval);
            }
        }
    };
    SfRichTextEditor.prototype.notifyMouseUp = function (e) {
        var touch = (e.touches ? e.changedTouches[0] : e);
        this.observer.notify(events.mouseUp, {
            member: 'mouseUp', args: e,
            touchData: {
                prevClientX: this.clickPoints.clientX, prevClientY: this.clickPoints.clientY,
                clientX: touch.clientX, clientY: touch.clientY
            }
        });
        if (this.inputElement && ((this.editorMode === 'HTML' && this.inputElement.textContent.length !== 0) ||
            (this.editorMode === 'Markdown' && this.inputElement.value.length !== 0))) {
            this.observer.notify(events.toolbarRefresh, { args: e });
        }
        this.triggerEditArea(e);
    };
    SfRichTextEditor.prototype.triggerEditArea = function (e) {
        if (!isIDevice()) {
            this.observer.notify(events.editAreaClick, { member: 'editAreaClick', args: e });
        }
        else {
            var touch = (e.touches ? e.changedTouches[0] : e);
            if (this.clickPoints.clientX === touch.clientX && this.clickPoints.clientY === touch.clientY) {
                this.observer.notify(events.editAreaClick, { member: 'editAreaClick', args: e });
            }
        }
    };
    SfRichTextEditor.prototype.toolbarItemClick = function (args, id, targetType) {
        if (isNOU(args)) {
            return;
        }
        var target;
        if (targetType === 'Root' && !this.inlineMode.enable) {
            target = select('#' + id, this.element);
        }
        else {
            target = select('#' + id, document.body);
        }
        args.originalEvent = __assign({}, args.originalEvent, { target: target });
        if (this.inlineCloseItems.indexOf(args.item.subCommand) > -1) {
            this.quickToolbarModule.hideInlineQTBar();
        }
        if (this.editorMode === 'HTML') {
            this.observer.notify(events.htmlToolbarClick, args);
        }
        else {
            this.observer.notify(events.markdownToolbarClick, args);
        }
    };
    SfRichTextEditor.prototype.toolbarClick = function (id) {
        var trg = select('#' + id + ' .e-hor-nav', this.element);
        if (trg && this.toolbarSettings.type === 'Expand' && !isNOU(trg)) {
            if (!trg.classList.contains('e-nav-active')) {
                removeClass([this.getToolbar()], [classes.CLS_EXPAND_OPEN]);
                this.setContentHeight('toolbar', false);
            }
            else {
                addClass([this.getToolbar()], [classes.CLS_EXPAND_OPEN]);
                this.setContentHeight('toolbar', true);
            }
        }
        else if (Browser.isDevice || this.inlineMode.enable) {
        }
        if (isNOU(trg) && this.toolbarSettings.type === 'Expand') {
            removeClass([this.getToolbar()], [classes.CLS_EXPAND_OPEN]);
        }
    };
    SfRichTextEditor.prototype.dropDownBeforeOpen = function (args) {
        this.observer.notify(events.selectionSave, args);
        this.observer.notify(events.beforeDropDownOpen, args);
    };
    SfRichTextEditor.prototype.dropDownClose = function (args) {
        this.observer.notify(events.selectionRestore, args);
    };
    SfRichTextEditor.prototype.dropDownSelect = function (e) {
        e.name = 'dropDownSelect';
        if (!(document.body.contains(document.body.querySelector('.e-rte-quick-toolbar'))
            && e.item && (e.item.command === 'Images' || e.item.command === 'Display' || e.item.command === 'Table'))) {
            this.observer.notify(events.selectionRestore, {});
            var value = null;
            this.formatter.process(this, e, e.originalEvent, value);
            this.observer.notify(events.selectionSave, {});
        }
        this.observer.notify(events.dropDownSelect, e);
    };
    SfRichTextEditor.prototype.colorDropDownBeforeOpen = function () {
        this.observer.notify(events.selectionSave, {});
    };
    SfRichTextEditor.prototype.colorIconSelected = function (args, value) {
        this.observer.notify(events.selectionSave, {});
        this.observer.notify(events.selectionRestore, {});
        args.value = isNOU(value) ? args.value : value;
        var range = this.formatter.editorManager.nodeSelection.getRange(this.getDocument());
        var parentNode = range.startContainer.parentNode;
        if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' ||
            (closest(range.startContainer.parentNode, 'td,th')) || (this.iframeSettings.enable &&
            !hasClass(parentNode.ownerDocument.querySelector('body'), 'e-lib'))) && range.collapsed &&
            args.subCommand === 'BackgroundColor') {
            this.observer.notify(events.tableColorPickerChanged, { item: args, name: 'colorPickerChanged' });
        }
        else {
            this.observer.notify(events.selectionRestore, {});
            this.formatter.process(this, { item: args, name: 'colorPickerChanged' }, undefined, null);
            this.observer.notify(events.selectionSave, {});
        }
    };
    SfRichTextEditor.prototype.colorChanged = function (args, value) {
        this.observer.notify(events.selectionRestore, {});
        args.value = isNOU(value) ? args.value : value;
        var range = this.formatter.editorManager.nodeSelection.getRange(this.getDocument());
        if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' ||
            closest(range.startContainer.parentNode, 'td,th')) && range.collapsed && args.subCommand === 'BackgroundColor') {
            this.observer.notify(events.tableColorPickerChanged, { item: args, name: 'colorPickerChanged' });
        }
        else {
            this.observer.notify(events.selectionRestore, {});
            this.formatter.process(this, { item: args, name: 'colorPickerChanged' }, undefined, null);
            this.observer.notify(events.selectionSave, {});
        }
    };
    SfRichTextEditor.prototype.cancelLinkDialog = function () {
        this.isBlur = false;
        this.linkModule.cancelDialog();
    };
    SfRichTextEditor.prototype.cancelImageDialog = function () {
        this.isBlur = false;
    };
    SfRichTextEditor.prototype.linkDialogClosed = function () {
        this.isBlur = false;
        this.linkModule.linkDialogClosed();
    };
    SfRichTextEditor.prototype.dialogClosed = function (type) {
        this.isBlur = false;
        if (type === 'restore') {
            this.observer.notify(events.selectionRestore, {});
        }
    };
    SfRichTextEditor.prototype.insertLink = function (args) {
        this.linkModule.insertLink(args);
    };
    SfRichTextEditor.prototype.invokeImageBrowse = function () {
        this.imageModule.invokeImageBrowse();
    };
    SfRichTextEditor.prototype.imageRemoving = function () {
        this.imageModule.removing();
    };
    SfRichTextEditor.prototype.uploadSuccess = function (url, altText) {
        this.imageModule.imageUploadSuccess(url, altText);
    };
    SfRichTextEditor.prototype.imageSelected = function () {
        this.imageModule.imageSelected();
    };
    SfRichTextEditor.prototype.imageUploadComplete = function (base64Str, altText) {
        this.imageModule.imageUploadComplete(base64Str, altText);
    };
    SfRichTextEditor.prototype.imageUploadChange = function (url, isStream) {
        this.imageModule.imageUploadChange(url, isStream);
    };
    SfRichTextEditor.prototype.dropUploadChange = function (url, isStream) {
        this.imageModule.dropUploadChange(url, isStream);
    };
    SfRichTextEditor.prototype.insertImage = function () {
        this.imageModule.insertImageUrl();
    };
    SfRichTextEditor.prototype.imageDialogOpened = function () {
        this.imageModule.dialogOpened();
    };
    SfRichTextEditor.prototype.imageDialogClosed = function () {
        this.isBlur = false;
        this.imageModule.dialogClosed();
    };
    SfRichTextEditor.prototype.insertTable = function (row, column) {
        this.tableModule.customTable(row, column);
    };
    SfRichTextEditor.prototype.applyTableProperties = function (model) {
        this.tableModule.applyTableProperties(model);
    };
    SfRichTextEditor.prototype.createTablePopupOpened = function () {
        this.tableModule.createTablePopupOpened();
    };
    SfRichTextEditor.prototype.pasteContent = function (pasteOption) {
        this.pasteCleanupModule.selectFormatting(pasteOption);
    };
    SfRichTextEditor.prototype.imageDropInitialized = function (isStream) {
        this.imageModule.imageDropInitialized(isStream);
    };
    SfRichTextEditor.prototype.preventEditable = function () {
        this.inputElement.contentEditable = 'false';
    };
    SfRichTextEditor.prototype.enableEditable = function () {
        this.inputElement.contentEditable = 'true';
    };
    SfRichTextEditor.prototype.removeDroppedImage = function () {
        this.imageModule.removeDroppedImage();
    };
    SfRichTextEditor.prototype.dropUploadSuccess = function (url, altText) {
        this.imageModule.dropUploadSuccess(url, altText);
    };
    SfRichTextEditor.prototype.focusIn = function () {
        if (this.enabled) {
            this.inputElement.focus();
            this.focusHandler({});
        }
    };
    SfRichTextEditor.prototype.insertAlt = function (altText) {
        this.imageModule.insertAlt(altText);
    };
    SfRichTextEditor.prototype.insertSize = function (width, height) {
        this.imageModule.insertSize(width, height);
    };
    SfRichTextEditor.prototype.insertImageLink = function (url, target) {
        this.imageModule.insertLink(url, target);
    };
    SfRichTextEditor.prototype.destroy = function () {
        this.unWireEvents();
    };
    SfRichTextEditor.prototype.wireEvents = function () {
        this.element.addEventListener('focusin', this.onFocusHandler, true);
        this.element.addEventListener('focusout', this.onBlurHandler, true);
        this.observer.on(events.contentChanged, this.contentChanged, this);
        this.observer.on(events.modelChanged, this.refresh, this);
        this.observer.on(events.resizeInitialized, this.updateResizeFlag, this);
        if (this.readonly && this.enabled) {
            return;
        }
        this.bindEvents();
    };
    SfRichTextEditor.prototype.bindEvents = function () {
        this.keyboardModule = new KeyboardEvents(this.inputElement, {
            keyAction: this.keyDown.bind(this), keyConfigs: __assign({}, this.formatter.keyConfig, this.keyConfig), eventName: 'keydown'
        });
        var formElement = closest(this.valueContainer, 'form');
        if (formElement) {
            EventHandler.add(formElement, 'reset', this.resetHandler, this);
        }
        EventHandler.add(this.inputElement, 'keyup', this.keyUp, this);
        EventHandler.add(this.inputElement, 'paste', this.onPaste, this);
        EventHandler.add(this.inputElement, Browser.touchEndEvent, debounce(this.mouseUp, 30), this);
        EventHandler.add(this.inputElement, Browser.touchStartEvent, this.mouseDownHandler, this);
        this.wireContextEvent();
        this.formatter.editorManager.observer.on('keydown-handler', this.editorKeyDown, this);
        this.element.ownerDocument.defaultView.addEventListener('resize', this.onResizeHandler, true);
        if (this.iframeSettings.enable) {
            EventHandler.add(this.inputElement, 'focusin', this.focusHandler, this);
            EventHandler.add(this.inputElement, 'focusout', this.blurHandler, this);
            EventHandler.add(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler, this);
            EventHandler.add(this.inputElement.ownerDocument, Browser.touchStartEvent, this.onIframeMouseDown, this);
        }
        this.wireScrollElementsEvents();
    };
    SfRichTextEditor.prototype.wireContextEvent = function () {
        if (this.quickToolbarSettings.showOnRightClick) {
            EventHandler.add(this.inputElement, 'contextmenu', this.contextHandler, this);
            if (Browser.isDevice) {
                this.touchModule = new EJ2Touch(this.inputElement, { tapHold: this.touchHandler.bind(this), tapHoldThreshold: 500 });
            }
        }
    };
    SfRichTextEditor.prototype.wireScrollElementsEvents = function () {
        this.scrollParentElements = getScrollableParent(this.element);
        for (var _i = 0, _a = this.scrollParentElements; _i < _a.length; _i++) {
            var element = _a[_i];
            EventHandler.add(element, 'scroll', this.scrollHandler, this);
        }
        if (!this.iframeSettings.enable) {
            EventHandler.add(this.getPanel(), 'scroll', this.contentScrollHandler, this);
        }
    };
    SfRichTextEditor.prototype.unWireEvents = function () {
        this.element.removeEventListener('focusin', this.onFocusHandler, true);
        this.element.removeEventListener('focusout', this.onBlurHandler, true);
        this.observer.off(events.contentChanged, this.contentChanged);
        this.observer.off(events.resizeInitialized, this.updateResizeFlag);
        this.unBindEvents();
    };
    SfRichTextEditor.prototype.unBindEvents = function () {
        if (this.keyboardModule) {
            this.keyboardModule.destroy();
        }
        var formElement = closest(this.valueContainer, 'form');
        if (formElement) {
            EventHandler.remove(formElement, 'reset', this.resetHandler);
        }
        EventHandler.remove(this.inputElement, 'keyup', this.keyUp);
        EventHandler.remove(this.inputElement, 'paste', this.onPaste);
        EventHandler.remove(this.inputElement, Browser.touchEndEvent, debounce(this.mouseUp, 30));
        EventHandler.remove(this.inputElement, Browser.touchStartEvent, this.mouseDownHandler);
        this.unWireContextEvent();
        if (this.formatter) {
            this.formatter.editorManager.observer.off('keydown-handler', this.editorKeyDown);
        }
        this.element.ownerDocument.defaultView.removeEventListener('resize', this.onResizeHandler, true);
        if (this.iframeSettings.enable) {
            EventHandler.remove(this.inputElement, 'focusin', this.focusHandler);
            EventHandler.remove(this.inputElement, 'focusout', this.blurHandler);
            EventHandler.remove(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler);
            EventHandler.remove(this.inputElement.ownerDocument, Browser.touchStartEvent, this.onIframeMouseDown);
        }
        this.unWireScrollElementsEvents();
    };
    SfRichTextEditor.prototype.unWireContextEvent = function () {
        EventHandler.remove(this.inputElement, 'contextmenu', this.contextHandler);
        if (Browser.isDevice && this.touchModule) {
            this.touchModule.destroy();
        }
    };
    SfRichTextEditor.prototype.unWireScrollElementsEvents = function () {
        this.scrollParentElements = getScrollableParent(this.element);
        for (var _i = 0, _a = this.scrollParentElements; _i < _a.length; _i++) {
            var element = _a[_i];
            EventHandler.remove(element, 'scroll', this.scrollHandler);
        }
        if (!this.iframeSettings.enable) {
            EventHandler.remove(this.getPanel(), 'scroll', this.contentScrollHandler);
        }
    };
    SfRichTextEditor.prototype.focusHandler = function (e) {
        if ((!this.isRTE || this.isFocusOut)) {
            this.isRTE = this.isFocusOut ? false : true;
            this.isFocusOut = false;
            addClass([this.element], [classes.CLS_FOCUS]);
            if (this.editorMode === 'HTML') {
                this.cloneValue = (this.inputElement.innerHTML === '<p><br></p>') ? null : this.enableHtmlEncode ?
                    this.encode(decode(this.inputElement.innerHTML)) : this.inputElement.innerHTML;
            }
            else {
                this.cloneValue = this.inputElement.value === '' ? null :
                    this.inputElement.value;
            }
            var active = document.activeElement;
            if (active === this.element || active === this.getToolbarElement() || active === this.getEditPanel()
                || ((this.iframeSettings.enable && active === this.getPanel()) &&
                    e.target && !e.target.classList.contains('e-img-inner')
                    && (e.target && e.target.parentElement
                        && !e.target.parentElement.classList.contains('e-img-wrap')))
                || closest(active, '.e-rte-toolbar') === this.getToolbarElement()) {
                this.getEditPanel().focus();
                if (!isNOU(this.getToolbarElement())) {
                    this.getToolbarElement().setAttribute('tabindex', '-1');
                    var items = this.getToolbarElement().querySelectorAll('[tabindex="0"]');
                    for (var i = 0; i < items.length; i++) {
                        items[i].setAttribute('tabindex', '-1');
                    }
                }
            }
            this.defaultResize(e, false);
            var args = { isInteracted: Object.keys(e).length === 0 ? false : true };
            if (this.focusEnabled) {
                this.dotNetRef.invokeMethodAsync('FocusEvent', args);
            }
            if (!isNOU(this.saveInterval) && this.saveInterval > 0 && !this.autoSaveOnIdle) {
                this.timeInterval = setInterval(this.updateValueOnIdle.bind(this), this.saveInterval);
            }
            EventHandler.add(document, 'mousedown', this.onDocumentClick, this);
        }
        if (!isNOU(this.getToolbarElement())) {
            var toolbarItem = this.getToolbarElement().querySelectorAll('input,select,button,a,[tabindex]');
            for (var i = 0; i < toolbarItem.length; i++) {
                if ((!toolbarItem[i].classList.contains('e-rte-dropdown-btn') &&
                    !toolbarItem[i].classList.contains('e-insert-table-btn')) &&
                    (!toolbarItem[i].hasAttribute('tabindex') ||
                        toolbarItem[i].getAttribute('tabindex') !== '-1')) {
                    toolbarItem[i].setAttribute('tabindex', '-1');
                }
            }
        }
    };
    SfRichTextEditor.prototype.blurHandler = function (e) {
        var trg = e.relatedTarget;
        if (trg) {
            var rteElement = closest(trg, '.' + classes.CLS_RTE);
            if (rteElement && rteElement === this.element) {
                this.isBlur = false;
                if (trg === this.getToolbarElement()) {
                    trg.setAttribute('tabindex', '-1');
                }
            }
            else if (closest(trg, '[aria-owns="' + this.element.id + '"]') || !isNOU(closest(trg, '.' + classes.CLS_RTE_ELEMENTS))) {
                this.isBlur = false;
            }
            else {
                this.isBlur = true;
                trg = null;
            }
        }
        if (this.isBlur && isNOU(trg)) {
            removeClass([this.element], [classes.CLS_FOCUS]);
            this.observer.notify(events.focusChange, {});
            this.value = this.getUpdatedValue();
            this.updateValueContainer(this.value);
            this.observer.notify(events.toolbarRefresh, { args: e, documentNode: document });
            this.invokeChangeEvent();
            this.isFocusOut = true;
            this.isBlur = false;
            if (this.enableXhtml) {
                this.valueContainer.value = this.getXhtmlString(this.valueContainer.value);
            }
            dispatchEvent(this.valueContainer, 'focusout');
            this.defaultResize(e, true);
            var args = { isInteracted: Object.keys(e).length === 0 ? false : true };
            if (this.blurEnabled) {
                this.dotNetRef.invokeMethodAsync('BlurEvent', args);
            }
            if (!isNOU(this.timeInterval)) {
                clearInterval(this.timeInterval);
                this.timeInterval = null;
            }
            EventHandler.remove(document, 'mousedown', this.onDocumentClick);
        }
        else {
            this.isRTE = true;
        }
    };
    SfRichTextEditor.prototype.resizeHandler = function () {
        var isExpand = false;
        if (!document.body.contains(this.element)) {
            return;
        }
        if (this.toolbarSettings.enable && !this.inlineMode.enable) {
            this.dotNetRef.invokeMethodAsync('RefreshToolbarOverflow');
            var tbElement = this.element.querySelector('.e-rte-toolbar');
            isExpand = tbElement && tbElement.classList.contains(classes.CLS_EXPAND_OPEN);
        }
        this.setContentHeight('', isExpand);
        this.observer.notify(events.windowResize, null);
    };
    SfRichTextEditor.prototype.touchHandler = function (e) {
        this.notifyMouseUp(e.originalEvent);
        this.triggerEditArea(e.originalEvent);
    };
    SfRichTextEditor.prototype.resetHandler = function () {
        var defaultValue = this.valueContainer.defaultValue.trim().replace(/<!--!-->/gi, '');
        this.value = defaultValue;
        this.setPanelValue(this.value);
    };
    SfRichTextEditor.prototype.contextHandler = function (e) {
        var closestElem = closest(e.target, 'a, table, img');
        if (this.inlineMode.onSelection === false || (!isNOU(closestElem) && this.inputElement.contains(closestElem)
            && (closestElem.tagName === 'IMG' || closestElem.tagName === 'TABLE' || closestElem.tagName === 'A'))) {
            e.preventDefault();
        }
    };
    SfRichTextEditor.prototype.scrollHandler = function (e) {
        this.observer.notify(events.scroll, { args: e });
    };
    SfRichTextEditor.prototype.contentScrollHandler = function (e) {
        this.observer.notify(events.contentscroll, { args: e });
    };
    SfRichTextEditor.prototype.mouseUp = function (e) {
        if (this.quickToolbarSettings.showOnRightClick && Browser.isDevice) {
            var target = e.target;
            var closestTable = closest(target, 'table');
            if (target && target.nodeName === 'A' || target.nodeName === 'IMG' || (target.nodeName === 'TD' || target.nodeName === 'TH' ||
                target.nodeName === 'TABLE' || (closestTable && this.getEditPanel().contains(closestTable)))) {
                return;
            }
        }
        this.notifyMouseUp(e);
    };
    SfRichTextEditor.prototype.mouseDownHandler = function (e) {
        var touch = (e.touches ? e.changedTouches[0] : e);
        addClass([this.element], [classes.CLS_FOCUS]);
        this.defaultResize(e, false);
        this.observer.notify(events.mouseDown, { args: e });
        this.clickPoints = { clientX: touch.clientX, clientY: touch.clientY };
    };
    SfRichTextEditor.prototype.onIframeMouseDown = function (e) {
        this.isBlur = false;
        this.observer.notify(events.iframeMouseDown, e);
    };
    SfRichTextEditor.prototype.keyDown = function (e) {
        this.observer.notify(events.keyDown, { member: 'keydown', args: e });
        this.restrict(e);
        if (this.editorMode === 'HTML' && ((e.which === 8 && e.code === 'Backspace') || (e.which === 46 && e.code === 'Delete'))) {
            var range = this.getRange();
            var startNode = range.startContainer.nodeName === '#text' ? range.startContainer.parentElement :
                range.startContainer;
            if (closest(startNode, 'pre') &&
                (e.which === 8 && range.startContainer.textContent.charCodeAt(range.startOffset - 1) === 8203) ||
                (e.which === 46 && range.startContainer.textContent.charCodeAt(range.startOffset) === 8203)) {
                var regEx = new RegExp(String.fromCharCode(8203), 'g');
                var pointer = e.which === 8 ? range.startOffset - 1 : range.startOffset;
                range.startContainer.textContent = range.startContainer.textContent.replace(regEx, '');
                this.formatter.editorManager.nodeSelection.setCursorPoint(this.getDocument(), range.startContainer, pointer);
            }
            else if ((e.code === 'Backspace' && e.which === 8) &&
                range.startContainer.textContent.charCodeAt(0) === 8203 && range.collapsed) {
                var parentEle = range.startContainer.parentElement;
                var index = void 0;
                var i = void 0;
                for (i = 0; i < parentEle.childNodes.length; i++) {
                    if (parentEle.childNodes[i] === range.startContainer) {
                        index = i;
                    }
                }
                var bool = true;
                var removeNodeArray = [];
                for (i = index; i >= 0; i--) {
                    if (parentEle.childNodes[i].nodeType === 3 && parentEle.childNodes[i].textContent.charCodeAt(0) === 8203 && bool) {
                        removeNodeArray.push(i);
                    }
                    else {
                        bool = false;
                    }
                }
                if (removeNodeArray.length > 0) {
                    for (i = removeNodeArray.length - 1; i > 0; i--) {
                        parentEle.childNodes[removeNodeArray[i]].textContent = '';
                    }
                }
                this.formatter.editorManager.nodeSelection.setCursorPoint(this.getDocument(), range.startContainer, range.startOffset);
            }
        }
        if (this.formatter.getUndoRedoStack().length === 0) {
            this.formatter.saveData();
        }
        if (e.action !== 'insert-link' &&
            (e.action && e.action !== 'paste' || e.which === 9 ||
                (e.code === 'Backspace' && e.which === 8))) {
            this.formatter.process(this, null, e);
            switch (e.action) {
                case 'toolbar-focus':
                    if (this.toolbarSettings.enable) {
                        var selector = '.e-toolbar-item[aria-disabled="false"][title] [tabindex]';
                        this.getToolbar().querySelector(selector).focus();
                    }
                    break;
                case 'escape':
                    this.getEditPanel().focus();
                    break;
            }
        }
        if (!isNOU(this.placeholder)) {
            if ((!isNOU(this.placeHolderContainer)) && (this.inputElement.textContent.length !== 1)) {
                this.placeHolderContainer.style.display = 'none';
            }
            else {
                this.setPlaceHolder();
            }
        }
        this.autoResize();
    };
    SfRichTextEditor.prototype.editorKeyDown = function (e) {
        switch (e.event.action) {
            case 'copy':
                this.onCopy();
                break;
            case 'cut':
                this.onCut();
                break;
        }
        if (e.callBack && (e.event.action === 'copy' || e.event.action === 'cut' || e.event.action === 'delete')) {
            e.callBack({
                requestType: e.event.action,
                editorMode: 'HTML',
                event: e.event
            });
        }
    };
    SfRichTextEditor.prototype.keyUp = function (e) {
        if (this.editorMode === 'HTML') {
            switch (e.which) {
                case 46:
                case 8:
                    var childNodes = this.getEditPanel().childNodes;
                    if ((childNodes.length === 0) ||
                        (childNodes.length === 1 && ((childNodes[0].tagName === 'BR') ||
                            (childNodes[0].tagName === 'P' &&
                                (childNodes[0].childNodes.length === 0 || childNodes[0].textContent === ''))))) {
                        var node = this.getEditPanel();
                        node.innerHTML = '<p><br/></p>';
                        this.formatter.editorManager.nodeSelection.setCursorPoint(this.getDocument(), node.childNodes[0], 0);
                    }
                    break;
            }
        }
        this.observer.notify(events.keyUp, { member: 'keyup', args: e });
        if (e.code === 'KeyX' && e.which === 88 && e.keyCode === 88 && e.ctrlKey && (this.inputElement.innerHTML === '' ||
            this.inputElement.innerHTML === '<br>')) {
            this.inputElement.innerHTML = getEditValue('<p><br></p>', this);
        }
        var allowedKeys = e.which === 32 || e.which === 13 || e.which === 8 || e.which === 46;
        if (((e.key !== 'shift' && !e.ctrlKey) && e.key && e.key.length === 1 || allowedKeys) || (this.editorMode === 'Markdown'
            && ((e.key !== 'shift' && !e.ctrlKey) && e.key && e.key.length === 1 || allowedKeys)) && !this.inlineMode.enable) {
            this.formatter.onKeyHandler(this, e);
        }
        if (this.inputElement && this.inputElement.textContent.length !== 0) {
            this.observer.notify(events.toolbarRefresh, { args: e });
        }
        if (!isNOU(this.placeholder)) {
            if (!(e.key === 'Enter' && e.keyCode === 13) && this.inputElement.innerHTML === '<p><br></p>') {
                this.setPlaceHolder();
            }
        }
    };
    SfRichTextEditor.prototype.onCut = function () {
        this.getDocument().execCommand('cut', false, null);
    };
    SfRichTextEditor.prototype.onCopy = function () {
        this.getDocument().execCommand('copy', false, null);
    };
    SfRichTextEditor.prototype.onPaste = function (e) {
        var evenArgs = {
            originalEvent: e,
            requestType: 'Paste'
        };
        var currentLength = this.getText().length;
        var selectionLength = this.getSelection().length;
        var pastedContentLength = (isNOU(e) || isNOU(e.clipboardData))
            ? 0 : e.clipboardData.getData('text/plain').length;
        var totalLength = (currentLength - selectionLength) + pastedContentLength;
        if (this.editorMode === 'Markdown') {
            if (!(this.maxLength === -1 || totalLength < this.maxLength)) {
                e.preventDefault();
            }
            return;
        }
        if (this.inputElement.contentEditable === 'true' &&
            (this.maxLength === -1 || totalLength < this.maxLength)) {
            this.observer.notify(events.pasteClean, { args: e });
        }
        else {
            e.preventDefault();
        }
    };
    SfRichTextEditor.prototype.onDocumentClick = function (e) {
        var target = e.target;
        var rteElement = closest(target, '.' + classes.CLS_RTE);
        if (!this.element.contains(e.target) && document !== e.target && rteElement !== this.element &&
            !closest(target, '[aria-owns="' + this.element.id + '"]')) {
            this.isBlur = true;
            this.isRTE = false;
        }
        this.observer.notify(events.docClick, { args: e });
    };
    SfRichTextEditor.prototype.propertyChangeHandler = function (newProps) {
        var oldProps = {};
        for (var _i = 0, _a = Object.keys(newProps); _i < _a.length; _i++) {
            var prop = _a[_i];
            oldProps[prop] = this[prop];
        }
        this.updateContext(newProps);
        for (var _b = 0, _c = Object.keys(newProps); _b < _c.length; _b++) {
            var prop = _c[_b];
            switch (prop) {
                case 'enableXhtml':
                case 'enableHtmlSanitizer':
                case 'value':
                    this.setPanelValue(this.value);
                    if (this.enableXhtml) {
                        this.value = this.getXhtml();
                    }
                    break;
                case 'height':
                    this.setHeight(this.height);
                    this.setContentHeight();
                    this.autoResize();
                    break;
                case 'width':
                    this.setWidth(this.width);
                    if (this.toolbarSettings.enable) {
                        this.dotNetRef.invokeMethodAsync('RefreshToolbarOverflow');
                        this.resizeHandler();
                    }
                    break;
                case 'readonly':
                    this.setReadOnly(false);
                    break;
                case 'enabled':
                    this.setEnable();
                    break;
                case 'placeholder':
                    this.placeholder = this.placeholder;
                    this.setPlaceHolder();
                    break;
                case 'showCharCount':
                    if (this.showCharCount && this.countModule) {
                        this.countModule.renderCount();
                    }
                    else if (this.showCharCount === false && this.countModule) {
                        this.countModule.destroy();
                    }
                    break;
                case 'maxLength':
                    if (this.showCharCount) {
                        this.countModule.refresh();
                    }
                    break;
                case 'enableHtmlEncode':
                    this.updateValueData();
                    this.updatePanelValue();
                    this.setPlaceHolder();
                    if (this.showCharCount) {
                        this.countModule.refresh();
                    }
                    break;
                case 'undoRedoSteps':
                case 'undoRedoTimer':
                    this.formatter.editorManager.observer.notify('model_changed', { newProp: newProps });
                    break;
                case 'adapter':
                    var editElement = this.getEditPanel();
                    var option = { undoRedoSteps: this.undoRedoSteps, undoRedoTimer: this.undoRedoTimer };
                    if (this.editorMode === 'Markdown') {
                        this.formatter = new MarkdownFormatter(extend({}, this.adapter, {
                            element: editElement,
                            options: option
                        }));
                    }
                    break;
                case 'iframeSettings':
                    var frameSetting = oldProps[prop];
                    if (frameSetting.resources) {
                        var iframe = this.getDocument();
                        var header = iframe.querySelector('head');
                        var files = void 0;
                        if (frameSetting.resources.scripts) {
                            files = header.querySelectorAll('.' + classes.CLS_SCRIPT_SHEET);
                            this.removeSheets(files);
                        }
                        if (frameSetting.resources.styles) {
                            files = header.querySelectorAll('.' + classes.CLS_STYLE_SHEET);
                            this.removeSheets(files);
                        }
                    }
                    this.setIframeSettings();
                    break;
                case 'quickToolbarSettings':
                    this.quickToolbarSettings.showOnRightClick ? this.wireContextEvent() : this.unWireContextEvent();
                    break;
                default:
                    break;
            }
        }
    };
    return SfRichTextEditor;
}());
export { SfRichTextEditor };
