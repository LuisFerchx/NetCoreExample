import { detach, closest, Browser, isNullOrUndefined as isNOU, createElement, selectAll } from '@syncfusion/ej2-base';
import { EventHandler, addClass, removeClass } from '@syncfusion/ej2-base';
import * as events from '../constant';
import * as classes from '../classes';
import { dispatchEvent, hasClass } from '../util';
var Table = (function () {
    function Table(parent) {
        this.pageX = null;
        this.pageY = null;
        this.moveEle = null;
        this.ensureInsideTableList = true;
        this.parent = parent;
        this.addEventListener();
    }
    Table.prototype.addEventListener = function () {
        this.parent.observer.on(events.keyDown, this.keyDown, this);
        this.parent.observer.on(events.destroy, this.destroy, this);
        this.parent.observer.on(events.docClick, this.docClick, this);
        this.parent.observer.on(events.initialEnd, this.afterRender, this);
        this.parent.observer.on(events.createTable, this.renderDlgContent, this);
        this.parent.observer.on(events.dropDownSelect, this.dropdownSelect, this);
        this.parent.observer.on(events.editAreaClick, this.editAreaClickHandler, this);
        this.parent.observer.on(events.tableToolbarAction, this.onToolbarAction, this);
        this.parent.observer.on(events.mouseUp, this.selectionTable, this);
    };
    Table.prototype.removeEventListener = function () {
        this.parent.observer.off(events.keyDown, this.keyDown);
        this.parent.observer.off(events.destroy, this.destroy);
        this.parent.observer.off(events.docClick, this.docClick);
        this.parent.observer.off(events.mouseDown, this.cellSelect);
        this.parent.observer.off(events.initialEnd, this.afterRender);
        this.parent.observer.off(events.createTable, this.renderDlgContent);
        this.parent.observer.off(events.dropDownSelect, this.dropdownSelect);
        this.parent.observer.off(events.tableColorPickerChanged, this.setBGColor);
        this.parent.observer.off(events.editAreaClick, this.editAreaClickHandler);
        this.parent.observer.off(events.tableToolbarAction, this.onToolbarAction);
        this.parent.observer.off(events.mouseUp, this.selectionTable);
    };
    Table.prototype.afterRender = function () {
        this.parent.observer.on(events.mouseDown, this.cellSelect, this);
        this.parent.observer.on(events.tableColorPickerChanged, this.setBGColor, this);
        if (this.parent.tableSettings.resize) {
            EventHandler.add(this.parent.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);
        }
        if (!Browser.isDevice && this.parent.tableSettings.resize) {
            EventHandler.add(this.parent.getEditPanel(), 'mouseover', this.resizeHelper, this);
        }
    };
    Table.prototype.selectionTable = function (e) {
        var target = e.args.target;
        if (Browser.info.name === 'mozilla' && !isNOU(closest(target, 'table')) && closest(target, 'table').tagName === 'TABLE') {
            this.parent.getEditPanel().setAttribute('contenteditable', 'true');
        }
    };
    Table.prototype.tabSelection = function (event, selection, ele) {
        var insideList = this.insideList(selection.range);
        if ((event.keyCode === 37 || event.keyCode === 39) && selection.range.startContainer.nodeType === 3 ||
            insideList) {
            return;
        }
        event.preventDefault();
        ele.classList.remove(classes.CLS_TABLE_SEL);
        if (!event.shiftKey && event.keyCode !== 37) {
            var nextElement = (!isNOU(ele.nextSibling)) ? ele.nextSibling :
                (!isNOU(closest(ele, 'tr').nextSibling) ? closest(ele, 'tr').nextSibling.childNodes[0] :
                    (!isNOU(closest(ele, 'table').nextSibling)) ?
                        (closest(ele, 'table').nextSibling.nodeName.toLowerCase() === 'td') ?
                            closest(ele, 'table').nextSibling : ele : ele);
            if (ele === nextElement && ele.nodeName === 'TH') {
                nextElement = closest(ele, 'table').rows[1].cells[0];
            }
            if (event.keyCode === 39 && ele === nextElement) {
                nextElement = closest(ele, 'table').nextSibling;
            }
            if (nextElement) {
                (nextElement.textContent.trim() !== '' && closest(nextElement, 'td')) ?
                    selection.setSelectionNode(this.parent.getDocument(), nextElement) :
                    selection.setSelectionText(this.parent.getDocument(), nextElement, nextElement, 0, 0);
            }
            if (ele === nextElement && event.keyCode !== 39 && nextElement) {
                this.addRow(selection, event, true);
                nextElement = nextElement.parentElement.nextSibling.firstChild;
                (nextElement.textContent.trim() !== '' && closest(nextElement, 'td')) ?
                    selection.setSelectionNode(this.parent.getDocument(), nextElement) :
                    selection.setSelectionText(this.parent.getDocument(), nextElement, nextElement, 0, 0);
            }
        }
        else {
            var prevElement = (!isNOU(ele.previousSibling)) ? ele.previousSibling :
                (!isNOU(closest(ele, 'tr').previousSibling) ?
                    closest(ele, 'tr').previousSibling.childNodes[closest(ele, 'tr').previousSibling.childNodes.length - 1] :
                    (!isNOU(closest(ele, 'table').previousSibling)) ?
                        (closest(ele, 'table').previousSibling.nodeName.toLowerCase() === 'td') ? closest(ele, 'table').previousSibling :
                            ele : ele);
            if (ele === prevElement && ele.cellIndex === 0 &&
                closest(ele, 'table').tHead) {
                var clsTable = closest(ele, 'table');
                prevElement = clsTable.rows[0].cells[clsTable.rows[0].cells.length - 1];
            }
            if (event.keyCode === 37 && ele === prevElement) {
                prevElement = closest(ele, 'table').previousSibling;
            }
            if (prevElement) {
                (prevElement.textContent.trim() !== '' && closest(prevElement, 'td')) ?
                    selection.setSelectionNode(this.parent.getDocument(), prevElement) :
                    selection.setSelectionText(this.parent.getDocument(), prevElement, prevElement, 0, 0);
            }
        }
    };
    Table.prototype.insideList = function (range) {
        var blockNodes = this.parent.formatter.editorManager.domNode.blockNodes();
        var nodes = [];
        for (var i = 0; i < blockNodes.length; i++) {
            if (blockNodes[i].parentNode.tagName === 'LI') {
                nodes.push(blockNodes[i].parentNode);
            }
            else if (blockNodes[i].tagName === 'LI' && blockNodes[i].childNodes[0].tagName !== 'P' &&
                (blockNodes[i].childNodes[0].tagName !== 'OL' &&
                    blockNodes[i].childNodes[0].tagName !== 'UL')) {
                nodes.push(blockNodes[i]);
            }
        }
        if (nodes.length > 1 || nodes.length && ((range.startOffset === 0 && range.endOffset === 0))) {
            this.ensureInsideTableList = true;
            return true;
        }
        else {
            this.ensureInsideTableList = false;
            return false;
        }
    };
    Table.prototype.tableArrowNavigation = function (event, selection, ele) {
        var selText = selection.range.startContainer;
        if ((event.keyCode === 40 && selText.nodeType === 3 && (selText.nextSibling && selText.nextSibling.nodeName === 'BR' ||
            selText.parentNode && selText.parentNode.nodeName !== 'TD')) ||
            (event.keyCode === 38 && selText.nodeType === 3 && (selText.previousSibling && selText.previousSibling.nodeName === 'BR' ||
                selText.parentNode && selText.parentNode.nodeName !== 'TD'))) {
            return;
        }
        event.preventDefault();
        ele.classList.remove(classes.CLS_TABLE_SEL);
        if (event.keyCode === 40) {
            ele = (!isNOU(closest(ele, 'tr').nextSibling)) ?
                closest(ele, 'tr').nextSibling.children[ele.cellIndex] :
                (closest(ele, 'table').tHead && ele.nodeName === 'TH') ?
                    closest(ele, 'table').rows[1].cells[ele.cellIndex] :
                    (!isNOU(closest(ele, 'table').nextSibling)) ? closest(ele, 'table').nextSibling :
                        ele;
        }
        else {
            ele = (!isNOU(closest(ele, 'tr').previousSibling)) ?
                closest(ele, 'tr').previousSibling.children[ele.cellIndex] :
                (closest(ele, 'table').tHead && ele.nodeName !== 'TH') ?
                    closest(ele, 'table').tHead.rows[0].cells[ele.cellIndex] :
                    (!isNOU(closest(ele, 'table').previousSibling)) ? closest(ele, 'table').previousSibling :
                        ele;
        }
        if (ele) {
            selection.setSelectionText(this.parent.getDocument(), ele, ele, 0, 0);
        }
    };
    Table.prototype.cellSelect = function (e) {
        var target = e.args.target;
        var tdNode = closest(target, 'td,th');
        target = (target.nodeName !== 'TD' && tdNode && this.parent.getEditPanel().contains(tdNode)) ?
            tdNode : target;
        removeClass(this.parent.getEditPanel().querySelectorAll('table td, table th'), classes.CLS_TABLE_SEL);
        if (target && (target.tagName === 'TD' || target.tagName === 'TH')) {
            target.removeAttribute('class');
            addClass([target], classes.CLS_TABLE_SEL);
            this.curTable = (this.curTable) ? this.curTable : closest(target, 'table');
            this.removeResizeEle();
            if (this.helper && this.parent.getEditPanel().contains(this.helper)) {
                detach(this.helper);
            }
        }
        if (Browser.info.name === 'mozilla' && !isNOU(closest(target, 'table')) &&
            closest(target, 'table').tagName === 'TABLE') {
            this.parent.getEditPanel().setAttribute('contenteditable', 'false');
        }
    };
    Table.prototype.renderDlgContent = function (args) {
        this.tableNotifyArgs = args;
        this.parent.observer.notify(events.selectionSave, {});
        if (Browser.isDevice || this.parent.inlineMode.enable) {
            this.insertTableDialog();
            return;
        }
        this.hideTableQuickToolbar();
        var tbEle = this.parent.getToolbarElement();
        var tbTableEle = this.parent.element.querySelector('#' + this.parent.element.id + '_toolbar_CreateTable');
        var top = 0;
        if (this.parent.getToolbar().classList.contains(classes.CLS_EXPAND_OPEN)) {
            top = tbTableEle.offsetTop + tbTableEle.offsetHeight + tbEle.offsetHeight;
        }
        else {
            top = tbTableEle.offsetTop + tbTableEle.offsetHeight;
        }
        this.parent.dotNetRef.invokeMethodAsync('ShowCreateTableDialog', tbTableEle.offsetLeft, top);
    };
    Table.prototype.createTablePopupOpened = function () {
        var rowElements = selectAll('.e-rte-table-popup .e-rte-table-row', this.parent.element);
        for (var i = 0; i < rowElements.length; i++) {
            EventHandler.add(rowElements[i], 'mouseleave', this.tableCellLeave, this);
            var tableCells = selectAll('.e-rte-tablecell', rowElements[i]);
            for (var j = 0; j < tableCells.length; j++) {
                EventHandler.add(tableCells[j], 'mouseup', this.tableCellClick, this);
                EventHandler.add(tableCells[j], 'mousemove', this.tableCellSelect, this);
            }
        }
        if (!isNOU(this.parent.getToolbarElement().querySelector('.e-expended-nav'))) {
            this.parent.getToolbarElement().querySelector('.e-expended-nav').setAttribute('tabindex', '1');
        }
    };
    Table.prototype.insertTableDialog = function () {
        this.createDialog();
    };
    Table.prototype.createDialog = function (model, mode) {
        this.parent.dotNetRef.invokeMethodAsync('ShowTableDialog', model, mode);
        if (this.quickToolObj && this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
            this.quickToolObj.hideInlineQTBar();
        }
    };
    Table.prototype.tableCellSelect = function (e) {
        var target = e.target;
        var dlgDiv = this.parent.element.querySelector('.e-rte-table-popup');
        var tblHeader = this.parent.element.querySelector('.e-rte-table-popup .e-rte-popup-header');
        var row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement);
        var col = Array.prototype.slice.call(target.parentElement.children).indexOf(target);
        var list = dlgDiv.querySelectorAll('.e-rte-tablecell');
        Array.prototype.forEach.call(list, function (item) {
            var parentIndex = Array.prototype.slice.call(item.parentElement.parentElement.children).indexOf(item.parentElement);
            var cellIndex = Array.prototype.slice.call(item.parentElement.children).indexOf(item);
            removeClass([item], 'e-active');
            if (parentIndex <= row && cellIndex <= col) {
                addClass([item], 'e-active');
            }
        });
        tblHeader.innerHTML = (col + 1) + 'x' + (row + 1);
    };
    Table.prototype.tableCellLeave = function (e) {
        var dlgDiv = this.parent.element.querySelector('.e-rte-table-popup');
        var tblHeader = this.parent.element.querySelector('.e-rte-table-popup .e-rte-popup-header');
        removeClass(dlgDiv.querySelectorAll('.e-rte-tablecell'), 'e-active');
        addClass([dlgDiv.querySelector('.e-rte-tablecell')], 'e-active');
        tblHeader.innerHTML = 1 + 'x' + 1;
    };
    Table.prototype.tableCellClick = function (e) {
        var target = e.target;
        var row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement) + 1;
        var col = Array.prototype.slice.call(target.parentElement.children).indexOf(target) + 1;
        this.tableInsert(row, col, 'Create', this);
    };
    Table.prototype.tableInsert = function (row, col, dlgTarget, selectionObj) {
        var proxy = (selectionObj.self) ? selectionObj.self : this;
        var startContainer = this.tableNotifyArgs.selection.range.startContainer;
        if (startContainer.nodeName === 'P' && startContainer.textContent.trim() === '' && !(startContainer.childNodes.length > 0)) {
            startContainer.innerHTML = '<br />';
        }
        var parentNode = startContainer.parentNode;
        if (proxy.parent.editorMode === 'HTML' &&
            ((proxy.parent.iframeSettings.enable && !hasClass(parentNode.ownerDocument.querySelector('body'), 'e-lib')) ||
                (!proxy.parent.iframeSettings.enable && isNOU(closest(parentNode, '#' + proxy.parent.getPanel().id))))) {
            proxy.parent.getEditPanel().focus();
            var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.getDocument());
            this.tableNotifyArgs.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.parent.getDocument());
        }
        var value = {
            row: row, columns: col, width: {
                minWidth: proxy.parent.tableSettings.minWidth,
                maxWidth: proxy.parent.tableSettings.maxWidth,
                width: proxy.parent.tableSettings.width,
            },
            selection: this.tableNotifyArgs.selection
        };
        if (dlgTarget === 'Create') {
            this.parent.dotNetRef.invokeMethodAsync('CloseCreateTableDialog');
        }
        else {
            this.parent.dotNetRef.invokeMethodAsync('CloseTableDialog');
        }
        this.parent.observer.notify(events.selectionRestore, {});
        proxy.parent.formatter.process(proxy.parent, this.tableNotifyArgs.args, this.tableNotifyArgs.args.originalEvent, value);
        proxy.parent.getEditPanel().focus();
        proxy.parent.observer.on(events.mouseDown, proxy.cellSelect, proxy);
    };
    Table.prototype.customTable = function (rowValue, columnValue) {
        if (rowValue && columnValue) {
            var argument = ((Browser.isDevice || (!isNOU(this.tableNotifyArgs.args)
                && !isNOU(this.tableNotifyArgs.args.originalEvent) &&
                this.tableNotifyArgs.args.originalEvent.action === 'insert-table')
                || this.parent.inlineMode.enable) ? this.tableNotifyArgs : this);
            this.tableInsert(rowValue, columnValue, '', argument);
        }
    };
    Table.prototype.applyTableProperties = function (model) {
        var table = closest(this.tableNotifyArgs.selectNode[0], 'table');
        table.style.width = model.width + 'px';
        if (model.padding.toString() !== '') {
            var tdElm = table.querySelectorAll('td');
            for (var i = 0; i < tdElm.length; i++) {
                var padVal = '';
                if (tdElm[i].style.padding === '') {
                    padVal = tdElm[i].getAttribute('style') + ' padding:' +
                        model.padding + 'px;';
                }
                else {
                    tdElm[i].style.padding = model.padding + 'px';
                    padVal = tdElm[i].getAttribute('style');
                }
                tdElm[i].setAttribute('style', padVal);
            }
        }
        table.cellSpacing = model.spacing.toString();
        if (!isNOU(table.cellSpacing) || table.cellSpacing !== '0') {
            addClass([table], classes.CLS_TABLE_BORDER);
        }
        else {
            removeClass([table], classes.CLS_TABLE_BORDER);
        }
        this.parent.formatter.saveData();
        this.parent.dotNetRef.invokeMethodAsync('CloseTableDialog');
    };
    Table.prototype.resizeHelper = function (e) {
        if (this.parent.readonly) {
            return;
        }
        var target = e.target || e.targetTouches[0].target;
        var closestTable = closest(target, 'table');
        if (target.nodeName === 'TABLE' || target.nodeName === 'TD' || target.nodeName === 'TH') {
            this.curTable = (closestTable && this.parent.getEditPanel().contains(closestTable))
                && (target.nodeName === 'TD' || target.nodeName === 'TH') ?
                closestTable : target;
            this.removeResizeEle();
            this.tableResizeEleCreation(this.curTable, e);
        }
    };
    Table.prototype.tableResizeEleCreation = function (table, e) {
        this.parent.defaultResize(e, false);
        var columns = Array.prototype.slice.call(table.rows[0].cells, 1);
        var rows = [];
        for (var i = 0; i < table.rows.length; i++) {
            rows.push(Array.prototype.slice.call(table.rows[i].cells, 0, 1)[0]);
        }
        var height = parseInt(getComputedStyle(table).height, 10);
        var width = parseInt(getComputedStyle(table).width, 10);
        var pos = this.calcPos(table);
        for (var i = 0; columns.length > i; i++) {
            var colReEle = createElement('span', {
                attrs: {
                    'data-col': (i + 1).toString(), 'unselectable': 'on', 'contenteditable': 'false'
                }
            });
            colReEle.classList.add(classes.CLS_RTE_TABLE_RESIZE, classes.CLS_TB_COL_RES);
            colReEle.style.cssText = 'height: ' + height + 'px; width: 4px; top: ' + pos.top +
                'px; left:' + (pos.left + this.calcPos(columns[i]).left) + 'px;';
            this.parent.getEditPanel().appendChild(colReEle);
        }
        for (var i = 0; rows.length > i; i++) {
            var rowReEle = createElement('span', {
                attrs: {
                    'data-row': (i).toString(), 'unselectable': 'on', 'contenteditable': 'false'
                }
            });
            rowReEle.classList.add(classes.CLS_RTE_TABLE_RESIZE, classes.CLS_TB_ROW_RES);
            var rowPosLeft = !isNOU(table.getAttribute('cellspacing')) || table.getAttribute('cellspacing') !== '' ?
                0 : this.calcPos(rows[i]).left;
            rowReEle.style.cssText = 'width: ' + width + 'px; height: 4px; top: ' +
                (this.calcPos(rows[i]).top + pos.top + rows[i].offsetHeight - 2) +
                'px; left:' + (rowPosLeft + pos.left) + 'px;';
            this.parent.getEditPanel().appendChild(rowReEle);
        }
        var tableReBox = createElement('span', {
            className: classes.CLS_TB_BOX_RES, attrs: {
                'data-col': columns.length.toString(), 'unselectable': 'on', 'contenteditable': 'false'
            }
        });
        tableReBox.style.cssText = 'top: ' + (pos.top + height - 4) +
            'px; left:' + (pos.left + width - 4) + 'px;';
        if (Browser.isDevice) {
            tableReBox.classList.add('e-rmob');
        }
        this.parent.getEditPanel().appendChild(tableReBox);
    };
    Table.prototype.resizeStart = function (e) {
        var _this = this;
        if (this.parent.readonly) {
            return;
        }
        if (Browser.isDevice) {
            this.resizeHelper(e);
        }
        var target = e.target;
        if (target.classList.contains(classes.CLS_TB_COL_RES) ||
            target.classList.contains(classes.CLS_TB_ROW_RES) ||
            target.classList.contains(classes.CLS_TB_BOX_RES)) {
            e.preventDefault();
            this.parent.defaultResize(e, false);
            removeClass(this.curTable.querySelectorAll('td,th'), classes.CLS_TABLE_SEL);
            this.parent.formatter.editorManager.nodeSelection.Clear(this.parent.getDocument());
            this.pageX = this.getPointX(e);
            this.pageY = this.getPointY(e);
            this.resizeBtnInit();
            this.hideTableQuickToolbar();
            if (target.classList.contains(classes.CLS_TB_COL_RES)) {
                this.resizeBtnStat.column = true;
                this.columnEle = this.curTable.rows[0].cells[parseInt(target.getAttribute('data-col'), 10)];
                this.colIndex = this.columnEle.cellIndex;
                this.moveEle = e.target;
                this.appendHelper();
            }
            if (target.classList.contains(classes.CLS_TB_ROW_RES)) {
                this.rowEle = this.curTable.rows[parseInt(target.getAttribute('data-row'), 10)];
                this.resizeBtnStat.row = true;
                this.appendHelper();
            }
            if (target.classList.contains(classes.CLS_TB_BOX_RES)) {
                this.resizeBtnStat.tableBox = true;
            }
            if (Browser.isDevice && this.helper && !this.helper.classList.contains('e-reicon')) {
                this.helper.classList.add('e-reicon');
                EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);
                EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);
            }
            else {
                var args = { requestType: 'Table' };
                if (this.parent.onResizeStartEnabled) {
                    this.parent.dotNetRef.invokeMethodAsync('ResizeStartEvent', args).then(function (resizeStartArgs) {
                        if (resizeStartArgs.cancel) {
                            _this.cancelResizeAction();
                        }
                    });
                }
            }
            EventHandler.add(this.parent.getDocument(), Browser.touchMoveEvent, this.resizing, this);
            EventHandler.add(this.parent.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);
        }
    };
    Table.prototype.resizing = function (e) {
        var pageX = this.getPointX(e);
        var pageY = this.getPointY(e);
        var mouseX = (this.parent.enableRtl) ? -(pageX - this.pageX) : (pageX - this.pageX);
        var mouseY = (this.parent.enableRtl) ? -(pageY - this.pageY) : (pageY - this.pageY);
        this.pageX = pageX;
        this.pageY = pageY;
        var args = { requestType: 'Table' };
        var tableReBox = this.parent.getEditPanel().querySelector('.e-table-box');
        var tableWidth = parseInt(getComputedStyle(this.curTable).width, 10);
        var tableHeight = parseInt(getComputedStyle(this.curTable).height, 10);
        var paddingSize = +getComputedStyle(this.parent.getEditPanel()).paddingRight.match(/\d/g).join('');
        var rteWidth = this.parent.getEditPanel().offsetWidth - paddingSize * 2;
        if (this.resizeBtnStat.column) {
            var cellColl = this.curTable.rows[0].cells;
            var width = parseFloat(this.columnEle.offsetWidth.toString());
            var actualWidth = width - mouseX;
            var totalWidth = parseFloat(this.columnEle.offsetWidth.toString()) +
                parseFloat(cellColl[this.colIndex - 1].offsetWidth.toString());
            for (var i = 0; i < this.curTable.rows.length; i++) {
                if ((totalWidth - actualWidth) > 20 && actualWidth > 20) {
                    var leftColumnWidth = totalWidth - actualWidth;
                    var rightColWidth = actualWidth;
                    this.curTable.rows[i].cells[this.colIndex - 1].style.width =
                        this.convertPixelToPercentage(leftColumnWidth, tableWidth) + '%';
                    this.curTable.rows[i].cells[this.colIndex].style.width =
                        this.convertPixelToPercentage(rightColWidth, tableWidth) + '%';
                }
            }
            this.updateHelper();
        }
        else if (this.resizeBtnStat.row) {
            this.parent.defaultResize(e, false);
            var height = parseFloat(this.rowEle.clientHeight.toString()) + mouseY;
            if (height > 20) {
                this.rowEle.style.height = height + 'px';
            }
            this.curTable.style.height = '';
            tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) +
                'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';
            this.updateHelper();
        }
        else if (this.resizeBtnStat.tableBox) {
            if (!Browser.isDevice) {
                EventHandler.remove(this.parent.getEditPanel(), 'mouseover', this.resizeHelper);
            }
            var widthType = this.curTable.style.width.indexOf('%') > -1;
            this.curTable.style.width = widthType ? this.convertPixelToPercentage(tableWidth + mouseX, rteWidth) + '%'
                : tableWidth + mouseX + 'px';
            this.curTable.style.height = tableHeight + mouseY + 'px';
            tableReBox.classList.add('e-rbox-select');
            tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) +
                'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';
        }
    };
    Table.prototype.resizeEnd = function (e) {
        this.resizeBtnInit();
        EventHandler.remove(this.parent.getDocument(), Browser.touchMoveEvent, this.resizing);
        EventHandler.remove(this.parent.getDocument(), Browser.touchEndEvent, this.resizeEnd);
        if (this.parent.getEditPanel().querySelector('.e-table-box') &&
            this.parent.getEditPanel().contains(this.parent.getEditPanel().querySelector('.e-table-box'))) {
            if (!Browser.isDevice) {
                EventHandler.add(this.parent.getEditPanel(), 'mouseover', this.resizeHelper, this);
            }
            this.removeResizeEle();
            if (this.helper && this.parent.getEditPanel().contains(this.helper)) {
                detach(this.helper);
                this.helper = null;
            }
            this.pageX = null;
            this.pageY = null;
            this.moveEle = null;
        }
        var args = { requestType: 'Table' };
        if (this.parent.onResizeStopEnabled) {
            this.parent.dotNetRef.invokeMethodAsync('ResizeStopEvent', args);
        }
        this.parent.formatter.saveData();
    };
    Table.prototype.resizeBtnInit = function () {
        return this.resizeBtnStat = { column: false, row: false, tableBox: false };
    };
    Table.prototype.removeResizeEle = function () {
        var item = this.parent.getEditPanel().
            querySelectorAll('.e-column-resize, .e-row-resize, .e-table-box');
        if (item.length > 0) {
            for (var i = 0; i < item.length; i++) {
                detach(item[i]);
            }
        }
    };
    Table.prototype.appendHelper = function () {
        this.helper = createElement('div', {
            className: 'e-table-rhelper'
        });
        if (Browser.isDevice) {
            this.helper.classList.add('e-reicon');
        }
        this.parent.getEditPanel().appendChild(this.helper);
        this.setHelperHeight();
    };
    Table.prototype.setHelperHeight = function () {
        var pos = this.calcPos(this.curTable);
        if (this.resizeBtnStat.column) {
            this.helper.classList.add('e-column-helper');
            this.helper.style.cssText = 'height: ' + getComputedStyle(this.curTable).height + '; top: ' +
                pos.top + 'px; left:' + (pos.left + this.calcPos(this.columnEle).left - 1) + 'px;';
        }
        else {
            this.helper.classList.add('e-row-helper');
            this.helper.style.cssText = 'width: ' + getComputedStyle(this.curTable).width + '; top: ' +
                (this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight) +
                'px; left:' + (this.calcPos(this.rowEle).left + pos.left) + 'px;';
        }
    };
    Table.prototype.updateHelper = function () {
        var pos = this.calcPos(this.curTable);
        if (this.resizeBtnStat.column) {
            var left = pos.left + this.calcPos(this.columnEle).left - 1;
            this.helper.style.left = left + 'px';
        }
        else {
            var top_1 = this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight;
            this.helper.style.top = top_1 + 'px';
        }
    };
    Table.prototype.removeHelper = function (e) {
        var cls = e.target.classList;
        if (!(cls.contains('e-reicon')) && this.helper) {
            EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
            EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
            if (this.helper && this.parent.getEditPanel().contains(this.helper)) {
                detach(this.helper);
            }
            this.pageX = null;
            this.helper = null;
        }
    };
    Table.prototype.convertPixelToPercentage = function (value, offsetValue) {
        return (value / offsetValue) * 100;
    };
    Table.prototype.cancelResizeAction = function () {
        EventHandler.remove(this.parent.getDocument(), Browser.touchMoveEvent, this.resizing);
        EventHandler.remove(this.parent.getDocument(), Browser.touchEndEvent, this.resizeEnd);
        this.removeResizeEle();
    };
    Table.prototype.calcPos = function (elem) {
        var parentOffset = {
            top: 0,
            left: 0
        };
        var offset = elem.getBoundingClientRect();
        var doc = elem.ownerDocument;
        var offsetParent = elem.offsetParent || doc.documentElement;
        while (offsetParent &&
            (offsetParent === doc.body || offsetParent === doc.documentElement) &&
            offsetParent.style.position === 'static') {
            offsetParent = offsetParent.parentNode;
        }
        if (offsetParent.nodeName === 'TD' && elem.nodeName === 'TABLE') {
            offsetParent = closest(offsetParent, '.e-control');
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
            parentOffset = offsetParent.getBoundingClientRect();
        }
        return {
            top: offset.top - parentOffset.top,
            left: offset.left - parentOffset.left
        };
    };
    Table.prototype.getPointX = function (e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageX;
        }
        else {
            return e.pageX;
        }
    };
    Table.prototype.getPointY = function (e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageY;
        }
        else {
            return e.pageY;
        }
    };
    Table.prototype.editAreaClickHandler = function (e) {
        if (this.parent.readonly) {
            return;
        }
        var args = e.args;
        var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
        if (args.which === 2 || (showOnRightClick && args.which === 1) || (!showOnRightClick && args.which === 3)) {
            return;
        }
        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule) {
            this.quickToolObj = this.parent.quickToolbarModule;
            var target = args.target;
            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
            var closestTable = closest(target, 'table');
            if (target && target.nodeName !== 'A' && target.nodeName !== 'IMG' && (target.nodeName === 'TD' || target.nodeName === 'TH' ||
                target.nodeName === 'TABLE' || (closestTable && this.parent.getEditPanel().contains(closestTable)))
                && !(range.startContainer.nodeType === 3 && !range.collapsed)) {
                var range_1 = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
                this.parent.formatter.editorManager.nodeSelection.save(range_1, this.parent.getDocument());
                this.parent.formatter.editorManager.nodeSelection.Clear(this.parent.getDocument());
                var pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +
                    this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
                this.quickToolObj.showTableQTBar(args.pageX, pageY, target, 'Table');
                this.parent.formatter.editorManager.nodeSelection.restore();
            }
            else {
                this.hideTableQuickToolbar();
            }
        }
    };
    Table.prototype.hideTableQuickToolbar = function () {
        if (this.quickToolObj) {
            this.quickToolObj.hideTableQTBar();
        }
    };
    Table.prototype.onToolbarAction = function (args) {
        var item = args.args.item;
        switch (item.subCommand) {
            case 'TableHeader':
                this.tableHeader(args.selection, args.args);
                break;
            case 'TableRemove':
                this.removeTable(args.selection, args.args);
                break;
            case 'TableEditProperties':
                this.editTable(args);
                break;
        }
    };
    Table.prototype.tableHeader = function (selection, e) {
        this.parent.formatter.process(this.parent, e, e.originalEvent, { selection: selection, subCommand: e.item.subCommand });
    };
    Table.prototype.removeTable = function (selection, args, delKey) {
        var cmd;
        if (delKey) {
            cmd = { item: { command: 'Table', subCommand: 'TableRemove' } };
        }
        var value = {
            selection: selection,
            subCommand: (delKey) ? cmd.item.subCommand : args.item.subCommand
        };
        this.parent.formatter.process(this.parent, (delKey) ? cmd : args, args.originalEvent, value);
        this.parent.getEditPanel().focus();
        this.removeResizeEle();
        this.hideTableQuickToolbar();
    };
    Table.prototype.editTable = function (args) {
        var selectNode = args.selectParent[0];
        this.tableNotifyArgs.selectNode = args.selectParent;
        var width = closest(selectNode, 'table').getClientRects()[0].width;
        var padding = closest(selectNode, 'td').style.padding;
        var spacing = closest(selectNode, 'table').getAttribute('cellspacing');
        this.hideTableQuickToolbar();
        this.createDialog({
            width: width,
            padding: parseFloat((padding !== '' ? parseInt(padding, null) : 0).toString()),
            spacing: parseFloat((spacing !== '' && !isNOU(spacing) ? parseInt(spacing, null) : 0).toString())
        }, 'Edit');
    };
    Table.prototype.dropdownSelect = function (e) {
        this.parent.observer.notify(events.selectionSave, {});
        var item = e.item;
        if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Table') {
            return;
        }
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
        var args = {
            args: e,
            selection: this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument()),
            selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)
        };
        switch (item.subCommand) {
            case 'InsertRowBefore':
            case 'InsertRowAfter':
                this.addRow(args.selection, e);
                break;
            case 'InsertColumnLeft':
            case 'InsertColumnRight':
                this.addColumn(args.selection, e);
                break;
            case 'DeleteColumn':
            case 'DeleteRow':
                this.removeRowColumn(args.selection, e);
                break;
            case 'AlignTop':
            case 'AlignMiddle':
            case 'AlignBottom':
                this.verticalAlign(args, e);
                break;
            case 'Dashed':
            case 'Alternate':
                this.tableStyles(args, item.subCommand);
                break;
        }
    };
    Table.prototype.addRow = function (selectCell, e, tabKey) {
        var cmd;
        if (tabKey) {
            cmd = {
                item: { command: 'Table', subCommand: 'InsertRowAfter' }
            };
        }
        var value = {
            selection: selectCell,
            subCommand: (tabKey) ? cmd.item.subCommand : e.item.subCommand
        };
        this.parent.formatter.process(this.parent, (tabKey) ? cmd : e, e, value);
    };
    Table.prototype.addColumn = function (selectCell, e) {
        this.parent.formatter.process(this.parent, e, e, { selection: selectCell, width: this.parent.tableSettings.width, subCommand: e.item.subCommand });
    };
    Table.prototype.removeRowColumn = function (selectCell, e) {
        this.parent.observer.notify(events.selectionRestore, {});
        this.parent.formatter.process(this.parent, e, e, { selection: selectCell, subCommand: e.item.subCommand });
        this.hideTableQuickToolbar();
        this.parent.observer.notify(events.selectionSave, {});
    };
    Table.prototype.verticalAlign = function (args, e) {
        var tdEle = closest(args.selectParent[0], 'td') || closest(args.selectParent[0], 'th');
        if (tdEle) {
            this.parent.formatter.process(this.parent, e, e, { tableCell: tdEle, subCommand: e.item.subCommand });
        }
    };
    Table.prototype.tableStyles = function (args, command) {
        var table = closest(args.selectParent[0], 'table');
        if (command === 'Dashed') {
            (this.parent.element.classList.contains(classes.CLS_TB_DASH_BOR)) ?
                this.parent.element.classList.remove(classes.CLS_TB_DASH_BOR) : this.parent.element.classList.add(classes.CLS_TB_DASH_BOR);
            (table.classList.contains(classes.CLS_TB_DASH_BOR)) ? table.classList.remove(classes.CLS_TB_DASH_BOR) :
                table.classList.add(classes.CLS_TB_DASH_BOR);
        }
        if (command === 'Alternate') {
            (this.parent.element.classList.contains(classes.CLS_TB_ALT_BOR)) ?
                this.parent.element.classList.remove(classes.CLS_TB_ALT_BOR) : this.parent.element.classList.add(classes.CLS_TB_ALT_BOR);
            (table.classList.contains(classes.CLS_TB_ALT_BOR)) ? table.classList.remove(classes.CLS_TB_ALT_BOR) :
                table.classList.add(classes.CLS_TB_ALT_BOR);
        }
        this.parent.formatter.saveData();
        this.parent.formatter.editorManager.nodeSelection.restore();
        this.hideTableQuickToolbar();
    };
    Table.prototype.setBGColor = function (args) {
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
        var selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument());
        var selectedCell = selection.range.startContainer;
        selectedCell = (selectedCell.nodeType === 3) ? closest(selectedCell.parentNode, 'td,th') : closest(selectedCell, 'td, th');
        if (selectedCell && (selectedCell.nodeName === 'TD' || selectedCell.nodeName === 'TH')) {
            var items = closest(selectedCell, 'table').querySelectorAll('.' + classes.CLS_TABLE_SEL);
            for (var i = 0; i < items.length; i++) {
                items[i].style.backgroundColor = args.item.value;
            }
            this.parent.formatter.saveData();
        }
        this.hideTableQuickToolbar();
    };
    Table.prototype.keyDown = function (e) {
        var event = e.args;
        var proxy = this;
        switch (event.action) {
            case 'escape':
                break;
            case 'insert-table':
                if (this.parent.editorMode === 'HTML') {
                    var docElement = this.parent.getDocument();
                    var range = this.parent.formatter.editorManager.nodeSelection.getRange(docElement);
                    var selection = this.parent.formatter.editorManager.nodeSelection.save(range, docElement);
                    this.parent.observer.notify(events.selectionSave, {});
                    var args = {
                        originalEvent: e.args,
                        item: {
                            command: 'Table',
                            subCommand: 'CreateTable'
                        }
                    };
                    this.tableNotifyArgs = { args: args, selection: selection };
                    this.insertTableDialog();
                }
                event.preventDefault();
                break;
        }
        if (!isNOU(this.parent.formatter.editorManager.nodeSelection) && this.parent.getEditPanel()
            && event.code !== 'KeyK') {
            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
            var selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument());
            var ele = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)[0];
            ele = (ele && ele.tagName !== 'TD' && ele.tagName !== 'TH') ? ele.parentElement : ele;
            if ((event.keyCode === 8 || event.keyCode === 46) ||
                (event.ctrlKey && event.keyCode === 88)) {
                if (ele && ele.tagName === 'TBODY') {
                    event.preventDefault();
                    proxy.removeTable(selection, event, true);
                }
                else if (ele && ele.querySelectorAll('table').length > 0) {
                    this.removeResizeEle();
                }
            }
            if (ele && ele.tagName !== 'TD' && ele.tagName !== 'TH') {
                var closestTd = closest(ele, 'td');
                ele = !isNOU(closestTd) && this.parent.inputElement.contains(closestTd) ? closestTd : ele;
            }
            if (ele && (ele.tagName === 'TD' || ele.tagName === 'TH')) {
                switch (event.keyCode) {
                    case 9:
                    case 37:
                    case 39:
                        proxy.tabSelection(event, selection, ele);
                        break;
                    case 40:
                    case 38:
                        proxy.tableArrowNavigation(event, selection, ele);
                        break;
                }
            }
        }
    };
    Table.prototype.docClick = function (e) {
        var target = e.args.target;
        var createDlg = this.parent.element.querySelector('.e-rte-table-popup');
        var insertDlg = this.parent.element.querySelector('.e-rte-edit-table');
        if (target && target.classList && ((createDlg && !closest(target, '#' + createDlg.id) ||
            (insertDlg && !closest(target, '#' + insertDlg.id)))) && !target.classList.contains('e-create-table') &&
            target.offsetParent && !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown')) {
            if (createDlg) {
                this.parent.dotNetRef.invokeMethodAsync('CloseCreateTableDialog');
            }
            if (insertDlg) {
                this.parent.dotNetRef.invokeMethodAsync('CloseTableDialog');
            }
            this.parent.isBlur = true;
            dispatchEvent(this.parent.element, 'focusout');
        }
        var closestEle = closest(target, 'td');
        var isExist = closestEle && this.parent.getEditPanel().contains(closestEle) ? true : false;
        if (target && target.tagName !== 'TD' && target.tagName !== 'TH' && !isExist &&
            closest(target, '.e-rte-quick-popup') === null && target.offsetParent &&
            !target.offsetParent.classList.contains('e-quick-dropdown') &&
            !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown') && !closest(target, '.e-rte-dropdown-popup')
            && !closest(target, '.e-rte-elements')) {
            removeClass(this.parent.element.querySelectorAll('table td'), classes.CLS_TABLE_SEL);
            if (!Browser.isIE) {
                this.hideTableQuickToolbar();
            }
        }
        if (target && target.classList && !target.classList.contains(classes.CLS_TB_COL_RES) &&
            !target.classList.contains(classes.CLS_TB_ROW_RES) && !target.classList.contains(classes.CLS_TB_BOX_RES)) {
            this.removeResizeEle();
        }
    };
    Table.prototype.destroy = function () {
        this.removeEventListener();
    };
    return Table;
}());
export { Table };
