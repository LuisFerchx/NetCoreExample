import { isNullOrUndefined as isNOU, Browser, createElement, detach } from '@syncfusion/ej2-base';
import { EventHandler, addClass, removeClass, closest } from '@syncfusion/ej2-base';
import { Ajax, Animation, getUniqueID } from '@syncfusion/ej2-base';
import { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';
import * as events from '../constant';
var RTL = 'e-rtl';
var STATUS = 'e-file-status';
var FILE_NAME = 'e-file-name';
var FILE_TYPE = 'e-file-type';
var FILE_SIZE = 'e-file-size';
var FILE = 'e-upload-file-list';
var FORM_UPLOAD = 'e-form-upload';
var LIST_PARENT = 'e-upload-files';
var SPINNER_PANE = 'e-spinner-pane';
var ABORT_ICON = 'e-file-abort-btn';
var INPUT_WRAPPER = 'e-file-select';
var INVALID_FILE = 'e-file-invalid';
var UPLOAD_FAILED = 'e-upload-fails';
var RETRY_ICON = 'e-file-reload-btn';
var RTL_CONTAINER = 'e-rtl-container';
var REMOVE_ICON = 'e-file-remove-btn';
var DELETE_ICON = 'e-file-delete-btn';
var INFORMATION = 'e-file-information';
var TEXT_CONTAINER = 'e-file-container';
var UPLOAD_SUCCESS = 'e-upload-success';
var RESTRICT_RETRY = 'e-restrict-retry';
var DROP_WRAPPER = 'e-file-select-wrap';
var HIDDEN_INPUT = 'e-hidden-file-input';
var PROGRESSBAR = 'e-upload-progress-bar';
var UPLOAD_INPROGRESS = 'e-upload-progress';
var VALIDATION_FAILS = 'e-validation-fails';
var PROGRESSBAR_TEXT = 'e-progress-bar-text';
var PROGRESS_WRAPPER = 'e-upload-progress-wrap';
var PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';
var CONTROL_WRAPPER = 'e-upload e-lib e-control-wrapper';
var RteUploader = (function () {
    function RteUploader(options, element, parent) {
        this.fileList = [];
        this.filesData = [];
        this.files = [];
        this.minFileSize = 0;
        this.maxFileSize = 30000000;
        this.uploadedFilesData = [];
        this.base64String = [];
        this.isForm = false;
        this.allTypes = false;
        this.btnTabIndex = '0';
        this.disableKeyboardNavigation = false;
        this.actionCompleteCount = 0;
        this.flag = true;
        this.selectedFiles = [];
        this.uploaderName = 'UploadFiles';
        this.element = element;
        this.parent = parent;
        this.cssClass = options.cssClass;
        this.asyncSettings = options.asyncSettings;
        this.allowedExtensions = options.allowedExtensions;
        this.addEventListener();
        this.render();
    }
    RteUploader.prototype.addEventListener = function () {
        this.parent.observer.on(events.beforePasteUploadCallBack, this.beforePasteUploadCallBack, this);
    };
    RteUploader.prototype.removeEventListener = function () {
        this.parent.observer.off(events.beforePasteUploadCallBack, this.beforePasteUploadCallBack);
    };
    RteUploader.prototype.render = function () {
        this.browserName = Browser.info.name;
        this.uploaderName = this.element.getAttribute('name');
        this.initializeUpload();
        this.wireEvents();
        this.setExtensions(this.allowedExtensions);
        this.setRTL();
        this.setCSSClass();
    };
    RteUploader.prototype.initializeUpload = function () {
        this.element.setAttribute('aria-label', 'Uploader');
        this.element.setAttribute('tabindex', '-1');
        var inputWrapper = createElement('span', { className: INPUT_WRAPPER, attrs: { style: 'display: none;' } });
        this.element.parentElement.insertBefore(inputWrapper, this.element);
        this.dropAreaWrapper = createElement('div', { className: DROP_WRAPPER });
        this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
        inputWrapper.appendChild(this.element);
        this.dropAreaWrapper.appendChild(inputWrapper);
        this.uploadWrapper = createElement('div', { className: CONTROL_WRAPPER, attrs: { style: 'background: white' } });
        this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
        this.uploadWrapper.appendChild(this.dropAreaWrapper);
    };
    RteUploader.prototype.setExtensions = function (extensions) {
        if (extensions !== '' && !isNOU(extensions)) {
            this.element.setAttribute('accept', extensions);
        }
        else {
            this.element.removeAttribute('accept');
        }
    };
    RteUploader.prototype.setRTL = function () {
        this.enableRtl ? addClass([this.uploadWrapper], RTL) : removeClass([this.uploadWrapper], RTL);
    };
    RteUploader.prototype.setCSSClass = function (oldCSSClass) {
        var updatedCssClassValue = this.cssClass;
        if (!isNOU(this.cssClass) && this.cssClass !== '') {
            updatedCssClassValue = (this.cssClass.replace(/\s+/g, ' ')).trim();
        }
        if (!isNOU(this.cssClass) && updatedCssClassValue !== '') {
            addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));
        }
        var updatedOldCssClass = oldCSSClass;
        if (!isNOU(oldCSSClass)) {
            updatedOldCssClass = (oldCSSClass.replace(/\s+/g, ' ')).trim();
        }
        if (!isNOU(oldCSSClass) && updatedOldCssClass !== '') {
            removeClass([this.uploadWrapper], updatedOldCssClass.split(' '));
        }
    };
    RteUploader.prototype.createFileList = function (fileData, isSelectedFile) {
        this.createParentUL();
        if (this.isFormUpload()) {
            this.uploadWrapper.classList.add(FORM_UPLOAD);
            this.formFileList(fileData, this.element.files);
        }
        else {
            for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {
                var listItem = fileData_1[_i];
                var liElement = createElement('li', {
                    className: FILE,
                    attrs: { 'data-file-name': listItem.name, 'data-files-count': '1' }
                });
                var textContainer = createElement('span', { className: TEXT_CONTAINER });
                var textElement = createElement('span', { className: FILE_NAME, attrs: { 'title': listItem.name } });
                textElement.innerHTML = this.getFileNameOnly(listItem.name);
                var fileExtension = createElement('span', { className: FILE_TYPE });
                fileExtension.innerHTML = '.' + this.getFileType(listItem.name);
                if (!this.enableRtl) {
                    textContainer.appendChild(textElement);
                    textContainer.appendChild(fileExtension);
                }
                else {
                    var rtlContainer = createElement('span', { className: RTL_CONTAINER });
                    rtlContainer.appendChild(fileExtension);
                    rtlContainer.appendChild(textElement);
                    textContainer.appendChild(rtlContainer);
                }
                var fileSize = createElement('span', { className: FILE_SIZE });
                fileSize.innerHTML = this.bytesToSize(listItem.size);
                textContainer.appendChild(fileSize);
                var statusElement = createElement('span', { className: STATUS });
                textContainer.appendChild(statusElement);
                statusElement.innerHTML = listItem.status;
                liElement.appendChild(textContainer);
                var iconElement = createElement('span', { className: ' e-icons', attrs: { 'tabindex': this.btnTabIndex } });
                if (this.browserName === 'msie') {
                    iconElement.classList.add('e-msie');
                }
                iconElement.setAttribute('title', 'Remove');
                liElement.appendChild(iconElement);
                EventHandler.add(iconElement, 'click', this.removeFiles, this);
                if (listItem.statusCode === '2') {
                    statusElement.classList.add(UPLOAD_SUCCESS);
                    iconElement.classList.add(DELETE_ICON);
                    iconElement.setAttribute('title', 'Delete file');
                }
                else if (listItem.statusCode !== '1') {
                    statusElement.classList.remove(UPLOAD_SUCCESS);
                    statusElement.classList.add(VALIDATION_FAILS);
                }
                if (listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {
                    statusElement.innerHTML = '';
                }
                if (!iconElement.classList.contains(DELETE_ICON)) {
                    iconElement.classList.add(REMOVE_ICON);
                }
                this.listParent.appendChild(liElement);
                this.fileList.push(liElement);
                this.truncateName(textElement);
                var preventActionComplete = this.flag;
                if (this.isPreLoadFile(listItem)) {
                    this.flag = false;
                    this.checkActionComplete(true);
                    this.flag = preventActionComplete;
                }
            }
        }
    };
    RteUploader.prototype.createParentUL = function () {
        if (isNOU(this.listParent)) {
            this.listParent = createElement('ul', { className: LIST_PARENT });
            this.uploadWrapper.appendChild(this.listParent);
        }
    };
    RteUploader.prototype.isFormUpload = function () {
        var isFormUpload = false;
        if (this.isForm && ((isNOU(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '')
            && (isNOU(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === ''))) {
            isFormUpload = true;
        }
        return isFormUpload;
    };
    RteUploader.prototype.getFileType = function (name) {
        var extension;
        var index = name.lastIndexOf('.');
        if (index >= 0) {
            extension = name.substring(index + 1);
        }
        return extension ? extension : '';
    };
    RteUploader.prototype.getFileNameOnly = function (name) {
        var type = this.getFileType(name);
        var names = name.split('.' + type);
        return type = names[0];
    };
    RteUploader.prototype.truncateName = function (name) {
        var nameElement = name;
        if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {
            this.getSlicedName(nameElement);
        }
        else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {
            this.getSlicedName(nameElement);
        }
    };
    RteUploader.prototype.getSlicedName = function (nameElement) {
        var text;
        text = nameElement.textContent;
        nameElement.dataset.tail = text.slice(text.length - 10);
    };
    RteUploader.prototype.setListToFileInfo = function (fileData, fileList) {
        for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {
            var listItem = fileData_2[_i];
            listItem.list = fileList;
        }
    };
    RteUploader.prototype.getFileSize = function (fileData) {
        var fileSize = 0;
        for (var _i = 0, fileData_3 = fileData; _i < fileData_3.length; _i++) {
            var file = fileData_3[_i];
            fileSize += file.size;
        }
        return fileSize;
    };
    RteUploader.prototype.bytesToSize = function (bytes) {
        var i = -1;
        if (!bytes) {
            return '0.0 KB';
        }
        do {
            bytes = bytes / 1024;
            i++;
        } while (bytes > 99);
        if (i >= 2) {
            bytes = bytes * 1024;
            i = 1;
        }
        return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];
    };
    RteUploader.prototype.createFormInput = function (fileData) {
        var inputElement = this.element.cloneNode(true);
        inputElement.classList.add(HIDDEN_INPUT);
        for (var _i = 0, fileData_4 = fileData; _i < fileData_4.length; _i++) {
            var listItem = fileData_4[_i];
            listItem.input = inputElement;
        }
        inputElement.setAttribute('name', this.uploaderName);
        this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);
        if (this.browserName !== 'msie' && this.browserName !== 'edge') {
            this.element.value = '';
        }
    };
    RteUploader.prototype.checkActionComplete = function (increment) {
        increment ? ++this.actionCompleteCount : --this.actionCompleteCount;
        if ((this.filesData.length === this.actionCompleteCount) && this.flag) {
            this.flag = false;
        }
    };
    RteUploader.prototype.isPreLoadFile = function (fileData) {
        var isPreload = false;
        for (var i = 0; i < this.files.length; i++) {
            if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {
                isPreload = true;
            }
        }
        return isPreload;
    };
    RteUploader.prototype.validatedFileSize = function (fileSize) {
        var minSizeError = '';
        var maxSizeError = '';
        if (fileSize < this.minFileSize) {
            minSizeError = 'File size is too small';
        }
        else if (fileSize > this.maxFileSize) {
            maxSizeError = 'File size is too large';
        }
        else {
            minSizeError = '';
            maxSizeError = '';
        }
        var errorMessage = { minSize: minSizeError, maxSize: maxSizeError };
        return errorMessage;
    };
    RteUploader.prototype.isBlank = function (str) {
        return (!str || /^\s*$/.test(str));
    };
    RteUploader.prototype.addInvalidClass = function (fileList) {
        fileList.classList.add(INVALID_FILE);
    };
    RteUploader.prototype.checkExtension = function (files) {
        var dropFiles = files;
        if (!this.isBlank(this.allowedExtensions)) {
            var allowedExtensions = [];
            var extensions = this.allowedExtensions.split(',');
            for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
                var extension = extensions_1[_i];
                allowedExtensions.push(extension.trim().toLocaleLowerCase());
            }
            for (var i = 0; i < files.length; i++) {
                if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {
                    files[i].status = 'File type is not allowed';
                    files[i].statusCode = '0';
                }
            }
        }
        return dropFiles;
    };
    RteUploader.prototype.getFilesData = function (index) {
        if (isNOU(index)) {
            return this.filesData;
        }
        else {
            return this.getSelectedFiles(index);
        }
    };
    RteUploader.prototype.getFilesInArray = function (files) {
        var uploadFiles = [];
        if (files instanceof Array) {
            uploadFiles = files;
        }
        else {
            uploadFiles.push(files);
        }
        return uploadFiles;
    };
    RteUploader.prototype.formValidateFileInfo = function (listItem, fileList) {
        var statusMessage = listItem.status;
        var validationMessages = this.validatedFileSize(listItem.size);
        if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {
            this.addInvalidClass(fileList);
            statusMessage = validationMessages.minSize !== '' ? 'File size is too small' :
                validationMessages.maxSize !== '' ? 'File size is too large' : statusMessage;
        }
        var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;
        if (typeValidationMessage === 'File type is not allowed') {
            this.addInvalidClass(fileList);
            statusMessage = typeValidationMessage;
        }
        return statusMessage;
    };
    RteUploader.prototype.clearAll = function () {
        if (isNOU(this.listParent)) {
            if (this.browserName !== 'msie') {
                this.element.value = '';
            }
            this.filesData = [];
            return;
        }
        this.clearData();
        this.actionCompleteCount = 0;
    };
    RteUploader.prototype.clearData = function (singleUpload) {
        if (!isNOU(this.listParent)) {
            detach(this.listParent);
            this.listParent = null;
        }
        if (this.browserName !== 'msie' && !singleUpload) {
            this.element.value = '';
        }
        this.fileList = [];
        this.filesData = [];
        this.removeActionButtons();
    };
    RteUploader.prototype.removeActionButtons = function () {
        if (this.actionButtons) {
            detach(this.actionButtons);
            this.actionButtons = null;
        }
    };
    RteUploader.prototype.checkActionButtonStatus = function () {
        if (this.actionButtons) {
            var length_1 = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length +
                this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length +
                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length +
                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;
            if (length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll('li').length) {
                this.uploadButton.setAttribute('disabled', 'disabled');
            }
            else {
                this.uploadButton.removeAttribute('disabled');
            }
        }
    };
    RteUploader.prototype.getSelectedFiles = function (index) {
        var data = [];
        var liElement = this.fileList[index];
        var allFiles = this.getFilesData();
        var nameElements = +liElement.getAttribute('data-files-count');
        var startIndex = 0;
        for (var i = 0; i < index; i++) {
            startIndex += (+this.fileList[i].getAttribute('data-files-count'));
        }
        for (var j = startIndex; j < (startIndex + nameElements); j++) {
            data.push(allFiles[j]);
        }
        return data;
    };
    RteUploader.prototype.formFileList = function (fileData, files) {
        var fileList = createElement('li', { className: FILE });
        fileList.setAttribute('data-files-count', fileData.length + '');
        var fileContainer = createElement('span', { className: TEXT_CONTAINER });
        var statusMessage;
        for (var _i = 0, fileData_5 = fileData; _i < fileData_5.length; _i++) {
            var listItem = fileData_5[_i];
            var fileNameEle = createElement('span', { className: FILE_NAME });
            fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);
            var fileTypeEle = createElement('span', { className: FILE_TYPE });
            fileTypeEle.innerHTML = '.' + this.getFileType(listItem.name);
            if (!this.enableRtl) {
                fileContainer.appendChild(fileNameEle);
                fileContainer.appendChild(fileTypeEle);
            }
            else {
                var rtlContainer = createElement('span', { className: RTL_CONTAINER });
                rtlContainer.appendChild(fileTypeEle);
                rtlContainer.appendChild(fileNameEle);
                fileContainer.appendChild(rtlContainer);
            }
            this.truncateName(fileNameEle);
            statusMessage = this.formValidateFileInfo(listItem, fileList);
        }
        fileList.appendChild(fileContainer);
        this.setListToFileInfo(fileData, fileList);
        var infoEle = createElement('span');
        if (fileList.classList.contains(INVALID_FILE)) {
            infoEle.classList.add(STATUS);
            infoEle.classList.add(INVALID_FILE);
            infoEle.innerText = fileData.length > 1 ? 'invalidFileSelection' : statusMessage;
        }
        else {
            infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);
            infoEle.innerText = fileData.length > 1 ? 'totalFiles: ' + fileData.length + ' , '
                + 'size: ' + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);
            this.createFormInput(fileData);
        }
        fileContainer.appendChild(infoEle);
        if (isNOU(fileList.querySelector('.e-icons'))) {
            var iconElement = createElement('span', { className: 'e-icons', attrs: { 'tabindex': this.btnTabIndex } });
            if (this.browserName === 'msie') {
                iconElement.classList.add('e-msie');
            }
            iconElement.setAttribute('title', 'Remove');
            fileList.appendChild(fileContainer);
            fileList.appendChild(iconElement);
            EventHandler.add(iconElement, 'click', this.removeFiles, this);
            iconElement.classList.add(REMOVE_ICON);
        }
        this.listParent.appendChild(fileList);
        this.fileList.push(fileList);
    };
    RteUploader.prototype.removeFiles = function (args) {
        var selectedElement = args.target.parentElement;
        var index = this.fileList.indexOf(selectedElement);
        var liElement = this.fileList[index];
        var formUpload = this.isFormUpload();
        var fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);
        if (isNOU(fileData)) {
            return;
        }
        if (args.target.classList.contains(ABORT_ICON) && !formUpload) {
            fileData[0].statusCode = '5';
            if (!isNOU(liElement)) {
                var spinnerTarget = liElement.querySelector('.' + ABORT_ICON);
                createSpinner({ target: spinnerTarget, width: '20px' });
                showSpinner(spinnerTarget);
            }
            if (!(liElement.classList.contains(RESTRICT_RETRY))) {
                this.checkActionComplete(true);
            }
        }
        else if (!closest(args.target, '.' + SPINNER_PANE)) {
            this.remove(fileData, false, false, true, args);
        }
        this.element.value = '';
        this.checkActionButtonStatus();
    };
    RteUploader.prototype.spliceFiles = function (liIndex) {
        var liElement = this.fileList[liIndex];
        var allFiles = this.getFilesData();
        var nameElements = +liElement.getAttribute('data-files-count');
        var startIndex = 0;
        for (var i = 0; i < liIndex; i++) {
            startIndex += (+this.fileList[i].getAttribute('data-files-count'));
        }
        var endIndex = (startIndex + nameElements) - 1;
        for (var j = endIndex; j >= startIndex; j--) {
            allFiles.splice(j, 1);
        }
    };
    RteUploader.prototype.remove = function (fileData, customTemplate, removeDirectly, postRawFile, args) {
        if (isNOU(postRawFile)) {
            postRawFile = true;
        }
        var eventArgs = {
            event: args,
            cancel: false,
            filesData: [],
            customFormData: [],
            postRawFile: postRawFile,
            currentRequest: null
        };
        if (this.isFormUpload()) {
            eventArgs.filesData = fileData;
            this.parent.observer.notify(events.removing, eventArgs);
            var removingFiles = this.getFilesInArray(fileData);
            var isLiRemoved = false;
            var liIndex = void 0;
            for (var _i = 0, removingFiles_1 = removingFiles; _i < removingFiles_1.length; _i++) {
                var data = removingFiles_1[_i];
                if (!isLiRemoved) {
                    liIndex = this.fileList.indexOf(data.list);
                }
                if (liIndex > -1) {
                    var inputElement = !isNOU(data.input) ? data.input : null;
                    if (inputElement) {
                        detach(inputElement);
                    }
                    this.spliceFiles(liIndex);
                    detach(this.fileList[liIndex]);
                    this.fileList.splice(liIndex, 1);
                    isLiRemoved = true;
                    liIndex = -1;
                }
            }
        }
        else if (this.isForm && (isNOU(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')) {
            eventArgs.filesData = this.getFilesData();
            this.parent.observer.notify(events.removing, eventArgs);
            this.clearAll();
        }
        else {
            var removeFiles = [];
            fileData = !isNOU(fileData) ? fileData : this.filesData;
            if (fileData instanceof Array) {
                removeFiles = fileData;
            }
            else {
                removeFiles.push(fileData);
            }
            eventArgs.filesData = removeFiles;
            var removeUrl = this.asyncSettings.removeUrl;
            var validUrl = (removeUrl === '' || isNOU(removeUrl)) ? false : true;
            for (var _a = 0, removeFiles_1 = removeFiles; _a < removeFiles_1.length; _a++) {
                var files = removeFiles_1[_a];
                var fileUploadedIndex = this.uploadedFilesData.indexOf(files);
                if ((files.statusCode === '2' || files.statusCode === '4' || (files.statusCode === '0' &&
                    fileUploadedIndex !== -1)) && validUrl) {
                    this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);
                }
                else {
                    if (!removeDirectly) {
                        this.parent.observer.notify(events.removing, eventArgs);
                        this.removeFilesData(files, customTemplate);
                    }
                    else {
                        this.removeFilesData(files, customTemplate);
                    }
                }
                if (args && !args.target.classList.contains(REMOVE_ICON)) {
                    this.checkActionComplete(false);
                }
            }
        }
    };
    RteUploader.prototype.updateCustomHeader = function (request, currentRequest) {
        if (currentRequest.length > 0 && currentRequest[0]) {
            var _loop_1 = function (i) {
                var data = currentRequest[i];
                var value = Object.keys(data).map(function (e) {
                    return data[e];
                });
                request.setRequestHeader(Object.keys(data)[0], value);
            };
            for (var i = 0; i < currentRequest.length; i++) {
                _loop_1(i);
            }
        }
    };
    RteUploader.prototype.removeUploadedFile = function (file, eventArgs, removeDirectly, custom) {
        var _this = this;
        var selectedFiles = file;
        var ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);
        ajax.emitError = false;
        var formData = new FormData();
        ajax.beforeSend = function (e) {
            eventArgs.currentRequest = ajax.httpRequest;
            if (_this.currentRequestHeader) {
                _this.updateCustomHeader(ajax.httpRequest, _this.currentRequestHeader);
            }
            if (_this.customFormDatas) {
                _this.updateFormData(formData, _this.customFormDatas);
            }
            if (!removeDirectly) {
                _this.parent.observer.notify(events.removing, eventArgs);
                _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
            }
            else {
                _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
            }
        };
        ajax.onLoad = function (e) { _this.removeCompleted(e, selectedFiles, custom); return {}; };
        ajax.onError = function (e) { _this.removeFailed(e, selectedFiles, custom); return {}; };
        ajax.send(formData);
    };
    RteUploader.prototype.getResponse = function (e) {
        var target = e.currentTarget;
        var response = {
            readyState: target.readyState,
            statusCode: target.status,
            statusText: target.statusText,
            headers: target.getAllResponseHeaders(),
            withCredentials: target.withCredentials
        };
        return response;
    };
    RteUploader.prototype.removeCompleted = function (e, files, customTemplate) {
        var response = e && e.currentTarget ? this.getResponse(e) : null;
        var status = e.target;
        if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
            var args = {
                e: e, response: response, operation: 'Remove', file: this.updateStatus(files, 'File removed successfully', '2')
            };
            this.parent.observer.notify(events.success, args);
            this.removeFilesData(files, customTemplate);
            var index = this.uploadedFilesData.indexOf(files);
            this.uploadedFilesData.splice(index, 1);
        }
        else {
            this.removeFailed(e, files, customTemplate);
        }
    };
    RteUploader.prototype.removeFailed = function (e, files, customTemplate) {
        var response = e && e.currentTarget ? this.getResponse(e) : null;
        var args = {
            e: e, response: response, operation: 'Remove', file: this.updateStatus(files, 'Unable to remove file', '0')
        };
        if (!customTemplate) {
            var index = this.filesData.indexOf(files);
            var rootElement = this.fileList[index];
            if (rootElement) {
                rootElement.classList.remove(UPLOAD_SUCCESS);
                rootElement.classList.add(UPLOAD_FAILED);
                var statusElement = rootElement.querySelector('.' + STATUS);
                if (statusElement) {
                    statusElement.classList.remove(UPLOAD_SUCCESS);
                    statusElement.classList.add(UPLOAD_FAILED);
                }
            }
            this.checkActionButtonStatus();
        }
        this.parent.observer.notify(events.failure, args);
        var liElement = this.getLiElement(files);
        if (!isNOU(liElement) && !isNOU(liElement.querySelector('.' + DELETE_ICON))) {
            var spinnerTarget = liElement.querySelector('.' + DELETE_ICON);
            hideSpinner(spinnerTarget);
            detach(liElement.querySelector('.e-spinner-pane'));
        }
    };
    RteUploader.prototype.updateStatus = function (files, status, statusCode, updateLiStatus) {
        if (updateLiStatus === void 0) { updateLiStatus = true; }
        if (!(status === '' || isNOU(status)) && !(statusCode === '' || isNOU(statusCode))) {
            files.status = status;
            files.statusCode = statusCode;
        }
        if (updateLiStatus) {
            var li = this.getLiElement(files);
            if (!isNOU(li)) {
                if (!isNOU(li.querySelector('.' + STATUS)) && !((status === '' || isNOU(status)))) {
                    li.querySelector('.' + STATUS).textContent = status;
                }
            }
        }
        return files;
    };
    RteUploader.prototype.removingEventCallback = function (eventArgs, formData, selectedFiles, file) {
        var name = this.element.getAttribute('name');
        var liElement = this.getLiElement(file);
        if (!isNOU(liElement) && (!isNOU(liElement.querySelector('.' + DELETE_ICON)) ||
            !isNOU(liElement.querySelector('.' + REMOVE_ICON)))) {
            var spinnerTarget = void 0;
            spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) :
                liElement.querySelector('.' + REMOVE_ICON);
            createSpinner({ target: spinnerTarget, width: '20px' });
            showSpinner(spinnerTarget);
        }
        if (eventArgs.postRawFile && !isNOU(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {
            formData.append(name, selectedFiles.rawFile, selectedFiles.name);
        }
        else {
            formData.append(name, selectedFiles.name);
        }
        this.updateFormData(formData, eventArgs.customFormData);
    };
    RteUploader.prototype.updateFormData = function (formData, customData) {
        if (customData.length > 0 && customData[0]) {
            var _loop_2 = function (i) {
                var data = customData[i];
                var value = Object.keys(data).map(function (e) {
                    return data[e];
                });
                formData.append(Object.keys(data)[0], value);
            };
            for (var i = 0; i < customData.length; i++) {
                _loop_2(i);
            }
        }
    };
    RteUploader.prototype.getLiElement = function (files) {
        var index;
        for (var i = 0; i < this.filesData.length; i++) {
            if ((!isNOU(this.filesData[i].id) && !isNOU(files.id)) ? (this.filesData[i].name === files.name &&
                this.filesData[i].id === files.id) : this.filesData[i].name === files.name) {
                index = i;
            }
        }
        return this.fileList[index];
    };
    RteUploader.prototype.removeFilesData = function (file, customTemplate) {
        var index;
        if (customTemplate) {
            return;
        }
        var selectedElement = this.getLiElement(file);
        if (isNOU(selectedElement)) {
            return;
        }
        detach(selectedElement);
        index = this.fileList.indexOf(selectedElement);
        this.fileList.splice(index, 1);
        this.filesData.splice(index, 1);
        if (this.fileList.length === 0 && !isNOU(this.listParent)) {
            detach(this.listParent);
            this.listParent = null;
            this.removeActionButtons();
        }
    };
    RteUploader.prototype.upload = function (files, custom) {
        files = files ? files : this.filesData;
        this.beforeUploadCustom = isNOU(custom) ? false : custom;
        this.beforeUploadFiles = this.getFilesInArray(files);
        var eventArgs = {
            customFormData: [],
            currentRequest: null,
            cancel: false
        };
        this.parent.observer.notify(events.beforePasteUpload, eventArgs);
    };
    RteUploader.prototype.beforePasteUploadCallBack = function (eventArgs) {
        if (!eventArgs.cancel) {
            this.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : this.currentRequestHeader;
            this.customFormDatas = (eventArgs.customFormData && eventArgs.customFormData.length > 0) ?
                eventArgs.customFormData : this.customFormDatas;
            this.uploadFiles(this.beforeUploadFiles, this.beforeUploadCustom);
        }
    };
    RteUploader.prototype.filterfileList = function (files) {
        var filterFiles = [];
        var li;
        for (var i = 0; i < files.length; i++) {
            li = this.getLiElement(files[i]);
            if (!li.classList.contains(UPLOAD_SUCCESS)) {
                filterFiles.push(files[i]);
            }
        }
        return filterFiles;
    };
    RteUploader.prototype.uploadFiles = function (files, custom) {
        var selectedFiles = [];
        if (this.asyncSettings.saveUrl === '' || isNOU(this.asyncSettings.saveUrl)) {
            return;
        }
        if (!custom || isNOU(custom)) {
            selectedFiles = this.filterfileList(files);
        }
        else {
            selectedFiles = files;
        }
        for (var i = 0; i < selectedFiles.length; i++) {
            this.uploadFilesRequest(selectedFiles, i, custom);
        }
    };
    RteUploader.prototype.updateCustomheader = function (request, currentRequest) {
        if (currentRequest.length > 0 && currentRequest[0]) {
            var _loop_3 = function (i) {
                var data = currentRequest[i];
                var value = Object.keys(data).map(function (e) {
                    return data[e];
                });
                request.setRequestHeader(Object.keys(data)[0], value);
            };
            for (var i = 0; i < currentRequest.length; i++) {
                _loop_3(i);
            }
        }
    };
    RteUploader.prototype.eventCancelByArgs = function (e, eventArgs, file) {
        var _this = this;
        e.cancel = true;
        if (eventArgs.fileData.statusCode === '5') {
            return;
        }
        eventArgs.fileData.statusCode = '5';
        eventArgs.fileData.status = 'File upload canceled';
        var liElement = this.getLiElement(eventArgs.fileData);
        if (liElement) {
            if (!isNOU(liElement.querySelector('.' + STATUS))) {
                liElement.querySelector('.' + STATUS).innerHTML = 'File upload canceled';
                liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
            }
            this.pauseButton = createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });
            var removeIcon = liElement.querySelector('.' + REMOVE_ICON);
            if (removeIcon) {
                removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);
            }
            this.pauseButton.setAttribute('title', 'Retry');
            this.pauseButton.addEventListener('click', function (e) { _this.reloadcanceledFile(e, file, liElement); }, false);
            this.checkActionButtonStatus();
        }
    };
    RteUploader.prototype.reloadcanceledFile = function (e, file, liElement, custom) {
        file.statusCode = '1';
        file.status = 'Ready to upload';
        if (!custom) {
            liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);
            if (!isNOU(liElement.querySelector('.' + RETRY_ICON))) {
                detach(liElement.querySelector('.' + RETRY_ICON));
            }
            this.pauseButton = null;
        }
        liElement.classList.add(RESTRICT_RETRY);
        this.upload([file]);
    };
    RteUploader.prototype.uploadFilesRequest = function (selectedFiles, i, custom) {
        var _this = this;
        var ajax = new Ajax(this.asyncSettings.saveUrl, 'POST', true, null);
        ajax.emitError = false;
        var eventArgs = {
            fileData: selectedFiles[i],
            customFormData: [],
            cancel: false
        };
        var formData = new FormData();
        ajax.beforeSend = function (e) {
            eventArgs.currentRequest = ajax.httpRequest;
            eventArgs.fileData.rawFile = _this.base64String[i];
            if (_this.currentRequestHeader) {
                _this.updateCustomheader(ajax.httpRequest, _this.currentRequestHeader);
            }
            if (_this.customFormDatas) {
                _this.updateFormData(formData, _this.customFormDatas);
            }
            _this.parent.observer.notify(events.uploading, eventArgs);
            if (eventArgs.cancel) {
                _this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);
            }
            _this.updateFormData(formData, eventArgs.customFormData);
        };
        if (selectedFiles[i].statusCode === '1') {
            var name_1 = this.element.getAttribute('name');
            formData.append(name_1, selectedFiles[i].rawFile, selectedFiles[i].name);
            ajax.onLoad = function (e) {
                _this.uploadComplete(e, selectedFiles[i], custom);
                return {};
            };
            ajax.onUploadProgress = function (e) {
                _this.uploadInProgress(e, selectedFiles[i], custom, ajax);
                return {};
            };
            ajax.onError = function (e) { _this.uploadFailed(e, selectedFiles[i]); return {}; };
            ajax.send(formData);
        }
    };
    RteUploader.prototype.cancelUploadingFile = function (files, e, request, li) {
        var _this = this;
        if (files.statusCode === '5') {
            var eventArgs = {
                event: e,
                fileData: files,
                cancel: false,
                customFormData: []
            };
            this.parent.observer.notify(events.canceling, eventArgs);
            if (eventArgs.cancel) {
                files.statusCode = '3';
                if (!isNOU(li)) {
                    var spinnerTarget = li.querySelector('.' + ABORT_ICON);
                    if (!isNOU(spinnerTarget)) {
                        hideSpinner(spinnerTarget);
                        detach(li.querySelector('.e-spinner-pane'));
                    }
                }
            }
            else {
                request.emitError = false;
                request.httpRequest.abort();
                var formData = new FormData();
                if (files.statusCode === '5') {
                    var name_2 = this.element.getAttribute('name');
                    formData.append(name_2, files.name);
                    formData.append('cancel-uploading', files.name);
                    this.updateFormData(formData, eventArgs.customFormData);
                    var ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);
                    ajax.emitError = false;
                    ajax.onLoad = function (e) { _this.removecanceledFile(e, files); return {}; };
                    ajax.send(formData);
                }
            }
        }
    };
    RteUploader.prototype.removecanceledFile = function (e, file) {
        var liElement = this.getLiElement(file);
        if (liElement.querySelector('.' + RETRY_ICON) || isNOU(liElement.querySelector('.' + ABORT_ICON))) {
            return;
        }
        this.updateStatus(file, 'File upload canceled', '5');
        this.renderFailureState(e, file, liElement);
        var spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);
        if (!isNOU(liElement)) {
            hideSpinner(spinnerTarget);
            detach(liElement.querySelector('.e-spinner-pane'));
        }
        var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
        var args = { event: e, response: requestResponse, operation: 'Cancel', file: file };
        this.parent.observer.notify(events.success, args);
    };
    RteUploader.prototype.uploadInProgress = function (e, files, customUI, request) {
        var li = this.getLiElement(files);
        if (isNOU(li) && (!customUI)) {
            return;
        }
        if (!isNOU(li)) {
            if (files.statusCode === '5') {
                this.cancelUploadingFile(files, e, request, li);
            }
            if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {
                li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);
                this.createProgressBar(li);
                this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);
                li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);
            }
            this.updateProgressbar(e, li);
            var iconEle = li.querySelector('.' + REMOVE_ICON);
            if (!isNOU(iconEle)) {
                iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);
                iconEle.setAttribute('title', 'Abort');
                iconEle.classList.remove(REMOVE_ICON);
            }
        }
        else {
            this.cancelUploadingFile(files, e, request);
        }
    };
    RteUploader.prototype.changeProgressValue = function (li, progressValue) {
        li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);
        li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;
    };
    RteUploader.prototype.updateProgressbar = function (e, li) {
        if (!isNaN(Math.round((e.loaded / e.total) * 100)) && !isNOU(li.querySelector('.' + PROGRESSBAR))) {
            if (!isNOU(this.progressInterval) && this.progressInterval !== '') {
                var value = (Math.round((e.loaded / e.total) * 100)) % parseInt(this.progressInterval, 10);
                if (value === 0 || value === 100) {
                    this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');
                }
            }
            else {
                this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');
            }
        }
    };
    RteUploader.prototype.createProgressBar = function (liElement) {
        var progressbarWrapper = createElement('span', { className: PROGRESS_WRAPPER });
        var progressBar = createElement('progressbar', { className: PROGRESSBAR, attrs: { value: '0', max: '100' } });
        var progressbarInnerWrapper = createElement('span', { className: PROGRESS_INNER_WRAPPER });
        progressBar.setAttribute('style', 'width: 0%');
        var progressbarText = createElement('span', { className: PROGRESSBAR_TEXT });
        progressbarText.textContent = '0%';
        progressbarInnerWrapper.appendChild(progressBar);
        progressbarWrapper.appendChild(progressbarInnerWrapper);
        progressbarWrapper.appendChild(progressbarText);
        liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);
    };
    RteUploader.prototype.updateProgressBarClasses = function (li, className) {
        var progressBar = li.querySelector('.' + PROGRESSBAR);
        if (!isNOU(progressBar)) {
            progressBar.classList.add(className);
        }
    };
    RteUploader.prototype.raiseSuccessEvent = function (e, file) {
        var response = e && e.currentTarget ? this.getResponse(e) : null;
        var statusMessage = 'File uploaded successfully';
        var args = {
            e: e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '2', false), statusText: statusMessage
        };
        var liElement = this.getLiElement(file);
        if (!isNOU(liElement)) {
            var spinnerEle = liElement.querySelector('.' + SPINNER_PANE);
            if (!isNOU(spinnerEle)) {
                hideSpinner(liElement);
                detach(spinnerEle);
            }
        }
        this.parent.observer.notify(events.success, args);
        this.updateStatus(file, args.statusText, '2');
        this.uploadedFilesData.push(file);
        this.checkActionButtonStatus();
        if (this.fileList.length > 0) {
            if ((!(this.getLiElement(file)).classList.contains(RESTRICT_RETRY))) {
                this.checkActionComplete(true);
            }
            else {
                (this.getLiElement(file)).classList.remove(RESTRICT_RETRY);
            }
        }
    };
    RteUploader.prototype.uploadComplete = function (e, file, customUI) {
        var status = e.target;
        if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
            var li = this.getLiElement(file);
            if (isNOU(li) && (!customUI || isNOU(customUI))) {
                return;
            }
            if (!isNOU(li)) {
                this.updateProgressBarClasses(li, UPLOAD_SUCCESS);
                this.removeProgressbar(li, 'success');
                var iconEle = li.querySelector('.' + ABORT_ICON);
                if (!isNOU(iconEle)) {
                    iconEle.classList.add(DELETE_ICON);
                    iconEle.setAttribute('title', 'Delete file');
                    iconEle.classList.remove(ABORT_ICON);
                    iconEle.classList.remove(UPLOAD_INPROGRESS);
                }
            }
            this.raiseSuccessEvent(e, file);
        }
        else {
            this.uploadFailed(e, file);
        }
    };
    RteUploader.prototype.uploadFailed = function (e, file) {
        var li = this.getLiElement(file);
        var response = e && e.currentTarget ? this.getResponse(e) : null;
        var statusMessage = 'File failed to upload';
        var args = {
            e: e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '0', false), statusText: statusMessage
        };
        if (!isNOU(li)) {
            this.renderFailureState(e, file, li);
        }
        this.parent.observer.notify(events.failure, args);
        this.updateStatus(file, args.statusText, '0');
        this.checkActionButtonStatus();
        this.checkActionComplete(true);
    };
    RteUploader.prototype.renderFailureState = function (e, file, liElement) {
        var _this = this;
        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
        this.removeProgressbar(liElement, 'failure');
        if (!isNOU(liElement.querySelector('.e-file-status'))) {
            liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);
        }
        var deleteIcon = liElement.querySelector('.' + ABORT_ICON);
        if (isNOU(deleteIcon)) {
            return;
        }
        deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
        deleteIcon.classList.add(REMOVE_ICON);
        deleteIcon.setAttribute('title', 'Remove');
        this.pauseButton = createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });
        deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);
        this.pauseButton.setAttribute('title', 'Retry');
        var retryElement = liElement.querySelector('.' + RETRY_ICON);
        retryElement.addEventListener('click', function (e) { _this.reloadcanceledFile(e, file, liElement, false); }, false);
    };
    RteUploader.prototype.removeProgressbar = function (li, callType) {
        var _this = this;
        if (!isNOU(li.querySelector('.' + PROGRESS_WRAPPER))) {
            this.progressAnimation = new Animation({ duration: 1250 });
            this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), { name: 'FadeOut' });
            this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), { name: 'FadeOut' });
            setTimeout(function () { _this.animateProgressBar(li, callType); }, 750);
        }
    };
    RteUploader.prototype.animateProgressBar = function (li, callType) {
        if (callType === 'success') {
            if (!isNOU(li.querySelector('.' + STATUS))) {
                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });
                li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);
            }
        }
        else {
            if (!isNOU(li.querySelector('.' + STATUS))) {
                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);
                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });
                li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);
            }
        }
        if (li.querySelector('.' + PROGRESS_WRAPPER)) {
            detach(li.querySelector('.' + PROGRESS_WRAPPER));
        }
    };
    RteUploader.prototype.onSelectFiles = function (args) {
        var targetFiles;
        if (args.type === 'drop') {
            var files = this.sortFilesList = args.dataTransfer.files;
            if (this.browserName !== 'msie' && this.browserName !== 'edge') {
                this.element.files = files;
            }
            if (files.length > 0) {
                targetFiles = this.sortFileList(files);
                this.renderSelectedFiles(args, targetFiles);
            }
        }
        else {
            targetFiles = [].slice.call(args.target.files);
            this.renderSelectedFiles(args, targetFiles);
        }
    };
    RteUploader.prototype.sortFileList = function (filesData) {
        filesData = filesData ? filesData : this.sortFilesList;
        var files = filesData;
        var fileNames = [];
        for (var i = 0; i < files.length; i++) {
            fileNames.push(files[i].name);
        }
        var sortedFileNames = fileNames.sort();
        var sortedFilesData = [];
        for (var _i = 0, sortedFileNames_1 = sortedFileNames; _i < sortedFileNames_1.length; _i++) {
            var name_3 = sortedFileNames_1[_i];
            for (var i = 0; i < files.length; i++) {
                if (name_3 === files[i].name) {
                    sortedFilesData.push(files[i]);
                }
            }
        }
        return sortedFilesData;
    };
    RteUploader.prototype.renderSelectedFiles = function (args, targetFiles, directory, paste) {
        this.base64String = [];
        var eventArgs = {
            event: args,
            cancel: false,
            filesData: [],
            isModified: false,
            modifiedFilesData: [],
            progressInterval: '',
            isCanceled: false,
            currentRequest: null,
            customFormData: null
        };
        if (targetFiles.length < 1) {
            eventArgs.isCanceled = true;
            this.parent.observer.notify(events.selected, eventArgs);
            return;
        }
        this.flag = true;
        var fileData = [];
        for (var i = 0; i < targetFiles.length; i++) {
            var file = directory ? targetFiles[i].file : targetFiles[i];
            this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);
        }
        eventArgs.filesData = fileData;
        if (this.allowedExtensions.indexOf('*') > -1) {
            this.allTypes = true;
        }
        if (!this.allTypes) {
            fileData = this.checkExtension(fileData);
        }
        this.parent.observer.notify(events.selected, eventArgs);
        eventArgs.cancel = true;
        this._internalRenderSelect(eventArgs, fileData);
    };
    RteUploader.prototype._internalRenderSelect = function (eventArgs, fileData) {
        if (!eventArgs.cancel) {
            this.currentRequestHeader = eventArgs.currentRequest;
            this.customFormDatas = eventArgs.customFormData;
            this.selectedFiles = this.selectedFiles.concat(fileData);
            this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';
            if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
                for (var j = 0; j < eventArgs.modifiedFilesData.length; j++) {
                    for (var k = 0; k < fileData.length; k++) {
                        if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {
                            eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;
                        }
                    }
                }
                var dataFiles = this.allTypes ? eventArgs.modifiedFilesData :
                    this.checkExtension(eventArgs.modifiedFilesData);
                this.updateSortedFileList(dataFiles);
                this.filesData = dataFiles;
                if (!this.isForm || this.allowUpload()) {
                    this.checkAutoUpload(dataFiles);
                }
            }
            else {
                this.createFileList(fileData, true);
                this.filesData = this.filesData.concat(fileData);
                if (!this.isForm || this.allowUpload()) {
                    this.checkAutoUpload(fileData);
                }
            }
            if (!isNOU(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {
                this.progressInterval = eventArgs.progressInterval;
            }
            if ((this.filesData.length === this.actionCompleteCount) && this.flag) {
                this.flag = false;
            }
        }
    };
    RteUploader.prototype.allowUpload = function () {
        var allowFormUpload = false;
        if (this.isForm && (!isNOU(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '')) {
            allowFormUpload = true;
        }
        return allowFormUpload;
    };
    RteUploader.prototype.checkAutoUpload = function (fileData) {
        this.upload(fileData);
        this.removeActionButtons();
        this.checkActionButtonStatus();
    };
    RteUploader.prototype.updateSortedFileList = function (filesData) {
        var previousListClone = createElement('div', { id: 'clonewrapper' });
        var added = -1;
        var removedList;
        if (this.listParent) {
            for (var i = 0; i < this.listParent.querySelectorAll('li').length; i++) {
                var liElement = this.listParent.querySelectorAll('li')[i];
                previousListClone.appendChild(liElement.cloneNode(true));
            }
            removedList = this.listParent.querySelectorAll('li');
            for (var _i = 0, removedList_1 = removedList; _i < removedList_1.length; _i++) {
                var item = removedList_1[_i];
                detach(item);
            }
            this.removeActionButtons();
            var oldList = [].slice.call(previousListClone.childNodes);
            detach(this.listParent);
            this.listParent = null;
            this.fileList = [];
            this.createParentUL();
            for (var index = 0; index < filesData.length; index++) {
                for (var j = 0; j < this.filesData.length; j++) {
                    if (this.filesData[j].name === filesData[index].name) {
                        this.listParent.appendChild(oldList[j]);
                        EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);
                        this.fileList.push(oldList[j]);
                        added = index;
                    }
                }
                if (added !== index) {
                    this.createFileList([filesData[index]]);
                }
            }
        }
        else {
            this.createFileList(filesData);
        }
    };
    RteUploader.prototype.updateInitialFileDetails = function (args, targetFiles, file, i, fileData, directory, paste) {
        var fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ?
            getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) : file.name;
        var fileDetails = {
            name: fileName,
            rawFile: file,
            size: file.size,
            status: 'Ready to upload',
            type: this.getFileType(file.name),
            validationMessages: this.validatedFileSize(file.size),
            statusCode: '1',
            id: getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)
        };
        if (paste) {
            fileDetails.fileSource = 'paste';
        }
        fileDetails.status = fileDetails.validationMessages.minSize !== '' ? 'File size is too small' :
            fileDetails.validationMessages.maxSize !== '' ? 'File size is too large' : fileDetails.status;
        if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {
            fileDetails.statusCode = '0';
        }
        fileData.push(fileDetails);
    };
    RteUploader.prototype.wireEvents = function () {
        EventHandler.add(this.element, 'change', this.onSelectFiles, this);
    };
    RteUploader.prototype.unWireEvents = function () {
        EventHandler.remove(this.element, 'change', this.onSelectFiles);
    };
    RteUploader.prototype.destroy = function () {
        this.unWireEvents();
        this.removeEventListener();
    };
    return RteUploader;
}());
export { RteUploader };
