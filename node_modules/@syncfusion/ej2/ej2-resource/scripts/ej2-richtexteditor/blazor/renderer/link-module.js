var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { closest, addClass, removeClass, Browser, select, extend, EventHandler } from '@syncfusion/ej2-base';
import { isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';
import * as events from '../constant';
import { dispatchEvent } from '../util';
import { isIDevice } from '../../src/common/util';
var Link = (function () {
    function Link(parent) {
        this.parent = parent;
        this.rteId = this.parent.element.id;
        this.addEventListener();
    }
    Link.prototype.addEventListener = function () {
        this.parent.observer.on(events.destroy, this.destroy, this);
        this.parent.observer.on(events.keyDown, this.onKeyDown, this);
        this.parent.observer.on(events.unLink, this.removeLink, this);
        this.parent.observer.on(events.insertLink, this.linkDialog, this);
        this.parent.observer.on(events.linkToolbarAction, this.onToolbarAction, this);
        this.parent.observer.on(events.iframeMouseDown, this.onIframeMouseDown, this);
        this.parent.observer.on(events.editAreaClick, this.editAreaClickHandler, this);
        this.parent.observer.on(events.insertCompleted, this.showLinkQuickToolbar, this);
    };
    Link.prototype.removeEventListener = function () {
        this.parent.observer.off(events.destroy, this.destroy);
        this.parent.observer.off(events.keyDown, this.onKeyDown);
        this.parent.observer.off(events.unLink, this.removeLink);
        this.parent.observer.off(events.insertLink, this.linkDialog);
        this.parent.observer.off(events.linkToolbarAction, this.onToolbarAction);
        this.parent.observer.off(events.iframeMouseDown, this.onIframeMouseDown);
        this.parent.observer.off(events.editAreaClick, this.editAreaClickHandler);
        this.parent.observer.off(events.insertCompleted, this.showLinkQuickToolbar);
        EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);
    };
    Link.prototype.linkDialog = function (e, inputDetails) {
        if (this.parent.editorMode === 'HTML' && (e.selectParent.length > 0 && !isNOU(e.selectParent[0].classList) &&
            e.selectParent[0].classList.contains('e-rte-anchor')) && isNOU(inputDetails)) {
            this.editLink(e);
            return;
        }
        this.selectionObj = { selection: e.selection, selectParent: e.selectParent, args: e.args };
        var model = { url: '', text: '', title: '', target: true };
        if (!isNOU(inputDetails)) {
            model = {
                url: inputDetails.url, text: inputDetails.text,
                title: inputDetails.title, target: (inputDetails.target !== '' ? true : false)
            };
        }
        var selectText = (this.parent.editorMode === 'HTML') ? e.selection.getRange(this.parent.getDocument()).toString() : e.text;
        if ((this.parent.editorMode === 'HTML' && isNOU(inputDetails) && ((!isNOU(selectText) && selectText !== '') &&
            (e.selection.range.startOffset === 0) || e.selection.range.startOffset !== e.selection.range.endOffset)) ||
            e.module === 'Markdown') {
            model.text = selectText;
        }
        EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);
        this.parent.dotNetRef.invokeMethodAsync('ShowLinkDialog', model, (!isNOU(inputDetails) ? 'Edit' : null));
        if (this.quickToolObj) {
            this.hideLinkQuickToolbar();
            this.quickToolObj.hideInlineQTBar();
        }
    };
    Link.prototype.insertLink = function (args) {
        var linkTitle;
        var linkUrl = args.url;
        var linkText = args.text;
        if (this.parent.editorMode === 'HTML') {
            linkTitle = args.title;
        }
        var target = args.target ? '_blank' : null;
        if (linkUrl === '') {
            this.checkUrl(true);
            return;
        }
        if (!this.isUrl(linkUrl)) {
            linkText = (linkText === '') ? linkUrl : linkText;
            linkUrl = (!this.parent.enableAutoUrl) ? (linkUrl.indexOf('http') > -1 ? linkUrl : 'http://' + linkUrl) : linkUrl;
        }
        else {
            this.checkUrl(false);
        }
        if (this.parent.editorMode === 'HTML' && isNOU(closest(this.selectionObj.selection.range.startContainer.parentNode, '#' + this.parent.getPanel().id))) {
            this.parent.getEditPanel().focus();
            if (Browser.isIE && this.parent.iframeSettings.enable) {
                this.selectionObj.selection.restore();
            }
            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
            this.selectionObj.selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument());
            this.selectionObj.selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        var value = {
            url: linkUrl, text: linkText, title: linkTitle, target: target,
            selection: this.selectionObj.selection, selectParent: this.selectionObj.selectParent
        };
        this.parent.dotNetRef.invokeMethodAsync('CloseLinkDialog');
        if (isIDevice() && this.parent.iframeSettings.enable) {
            select('iframe', this.parent.element).contentWindow.focus();
        }
        if (this.parent.editorMode === 'HTML') {
            this.selectionObj.selection.restore();
        }
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        var argsValue;
        if (this.selectionObj.args.code === 'KeyK') {
            var event_1 = this.selectionObj.args;
            event_1 = __assign({}, event_1, { target: null });
            var argsVal = { item: { command: 'Links', subCommand: 'CreateLink' }, originalEvent: event_1 };
            extend(this.selectionObj.args, argsVal, true);
            argsValue = argsVal;
        }
        else {
            argsValue = this.selectionObj.args;
        }
        this.parent.formatter.process(this.parent, argsValue, this.selectionObj.args.originalEvent, value);
        this.parent.getEditPanel().focus();
    };
    Link.prototype.isUrl = function (url) {
        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi;
        return regexp.test(url);
    };
    Link.prototype.checkUrl = function (e) {
        var linkUrl = this.parent.element.querySelector('.e-rte-link-dialog .e-rte-linkurl');
        if (e) {
            addClass([linkUrl], 'e-error');
            linkUrl.setSelectionRange(0, linkUrl.value.length);
            linkUrl.focus();
        }
        else {
            removeClass([linkUrl], 'e-error');
        }
    };
    Link.prototype.cancelDialog = function () {
        if (isIDevice()) {
            this.selectionObj.selection.restore();
        }
        else {
            this.parent.getEditPanel().focus();
        }
    };
    Link.prototype.linkDialogClosed = function () {
        if (this.parent.editorMode === 'HTML') {
            this.selectionObj.selection.restore();
        }
        else {
            this.parent.formatter.editorManager.markdownSelection.restore(this.parent.getEditPanel());
        }
    };
    Link.prototype.getAnchorNode = function (element) {
        var selectParent = closest(element, 'a');
        return (selectParent ? selectParent : element);
    };
    Link.prototype.openLink = function (e) {
        var selectParentEle = this.getAnchorNode(e.selectParent[0]);
        if (selectParentEle.classList.contains('e-rte-anchor') || selectParentEle.tagName === 'A') {
            this.parent.formatter.process(this.parent, e.args, e.args, {
                url: selectParentEle.href,
                target: selectParentEle.target === '' ? '_self' : '_blank', selectNode: e.selectNode,
                subCommand: e.args.item.subCommand
            });
        }
    };
    Link.prototype.editLink = function (e) {
        var selectedNode = this.getAnchorNode(e.selectNode[0]);
        var selectParentEle = this.getAnchorNode(e.selectParent[0]);
        selectParentEle = selectedNode.nodeName === 'A' ? selectedNode : selectParentEle;
        if (selectParentEle.classList.contains('e-rte-anchor') || selectParentEle.tagName === 'A') {
            var inputDetails = {
                url: selectParentEle.getAttribute('href'), text: selectParentEle.innerText,
                title: selectParentEle.title, target: selectParentEle.target,
            };
            this.linkDialog(e, inputDetails);
        }
    };
    Link.prototype.removeLink = function (e) {
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        this.parent.formatter.process(this.parent, e.args, e.args, {
            selectNode: e.selectNode, selectParent: e.selectParent, selection: e.selection,
            subCommand: e.args.item.subCommand
        });
        if (isIDevice() && this.parent.iframeSettings.enable) {
            select('iframe', this.parent.element).contentWindow.focus();
        }
        else {
            this.parent.getEditPanel().focus();
        }
        this.hideLinkQuickToolbar();
    };
    Link.prototype.onToolbarAction = function (args) {
        var item = args.args.item;
        switch (item.subCommand) {
            case 'OpenLink':
                this.openLink(args);
                break;
            case 'EditLink':
                this.editLink(args);
                break;
            case 'RemoveLink':
                this.removeLink(args);
                break;
        }
    };
    Link.prototype.editAreaClickHandler = function (e) {
        if (this.parent.readonly) {
            this.hideLinkQuickToolbar();
            return;
        }
        var args = e.args;
        var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
        if (args.which === 2 || (showOnRightClick && args.which === 1) || (!showOnRightClick && args.which === 3)) {
            return;
        }
        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule) {
            var target = args.target;
            target = this.getAnchorNode(target);
            var isPopupOpen = void 0;
            isPopupOpen = document.body.querySelector('#' + this.rteId + '_Link_Quick_Popup').classList.contains('e-rte-pop');
            if (target.nodeName === 'A' && (target.childNodes.length > 0 && target.childNodes[0].nodeName !== 'IMG') &&
                e.args.target.nodeName !== 'IMG') {
                if (isPopupOpen) {
                    return;
                }
                this.showLinkQuickToolbar({
                    args: args,
                    isNotify: false,
                    type: 'Links',
                    elements: [args.target]
                });
            }
            else {
                this.hideLinkQuickToolbar();
            }
        }
    };
    Link.prototype.showLinkQuickToolbar = function (e) {
        if (e.args.action !== 'enter' && e.args.action !== 'space') {
            var pageX = void 0;
            var pageY = void 0;
            if (e.type !== 'Links' || isNOU(this.parent.quickToolbarModule)) {
                return;
            }
            this.quickToolObj = this.parent.quickToolbarModule;
            var parentTop = this.parent.element.getBoundingClientRect().top;
            var parentLeft = this.parent.element.getBoundingClientRect().left;
            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
            var target_1;
            [].forEach.call(e.elements, function (element, index) {
                if (index === 0) {
                    target_1 = ((element.nodeName === '#text') ? (element.parentNode) : element);
                }
            });
            if (e.isNotify) {
                var tbElement = this.parent.getToolbarElement();
                var linkTop = target_1.getBoundingClientRect().top;
                var linkLeft = target_1.getBoundingClientRect().left;
                var linkPos = linkTop - parentTop;
                var tbHeight = (tbElement) ? (tbElement.offsetHeight + this.parent.toolbarModule.getExpandTBarPopHeight()) : 0;
                pageX = (this.parent.iframeSettings.enable) ? parentLeft + linkLeft : target_1.getBoundingClientRect().left;
                pageY = window.pageYOffset + ((this.parent.iframeSettings.enable) ?
                    (parentTop + tbHeight + linkTop) : (parentTop + linkPos));
            }
            else {
                var args = void 0;
                args = e.args.touches ? e.args.changedTouches[0] : args = e.args;
                pageX = (this.parent.iframeSettings.enable) ? window.pageXOffset + parentLeft + args.clientX : args.pageX;
                pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset + parentTop + args.clientY : args.pageY;
            }
            this.quickToolObj.showLinkQTBar(pageX, pageY, range.endContainer, 'Link');
        }
    };
    Link.prototype.hideLinkQuickToolbar = function () {
        if (this.quickToolObj) {
            this.quickToolObj.hideLinkQTBar();
        }
    };
    Link.prototype.onKeyDown = function (event) {
        var originalEvent = event.args;
        switch (originalEvent.action) {
            case 'escape':
                this.parent.dotNetRef.invokeMethodAsync('CloseLinkDialog');
                break;
            case 'insert-link':
                if (this.parent.editorMode === 'HTML') {
                    var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
                    var save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument());
                    var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
                    var selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
                    var eventArgs = {
                        args: event.args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                    };
                    this.linkDialog(eventArgs);
                }
                else {
                    var textArea = this.parent.getEditPanel();
                    this.parent.formatter.editorManager.markdownSelection.save(textArea.selectionStart, textArea.selectionEnd);
                    this.linkDialog({
                        args: {
                            item: { command: 'Links', subCommand: 'Link' },
                            originalEvent: originalEvent
                        },
                        member: 'link',
                        text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.getEditPanel()),
                        module: 'Markdown',
                        name: 'insertLink'
                    });
                }
                originalEvent.preventDefault();
                break;
        }
    };
    Link.prototype.onDocumentClick = function (e) {
        var target = e.target;
        var dlgId = '#' + this.rteId + '_rtelink';
        var tbEle = this.parent.getToolbarElement();
        var tbEleId = '#' + this.rteId + '_toolbar_CreateLink';
        var linkDlgEle = this.parent.element.querySelector(dlgId);
        if (!isNOU(linkDlgEle) && ((!closest(target, dlgId) && this.parent.toolbarSettings.enable &&
            tbEle && !tbEle.contains(e.target)) || (((tbEle && tbEle.contains(e.target)) ||
            this.parent.inlineMode.enable && !closest(target, dlgId)) && !closest(target, tbEleId) && !target.querySelector(tbEleId)))) {
            this.parent.dotNetRef.invokeMethodAsync('CloseLinkDialog');
            this.parent.isBlur = true;
            dispatchEvent(this.parent.element, 'focusout');
        }
    };
    Link.prototype.onIframeMouseDown = function () {
        this.parent.dotNetRef.invokeMethodAsync('CloseLinkDialog');
    };
    Link.prototype.destroy = function () {
        this.removeEventListener();
    };
    return Link;
}());
export { Link };
