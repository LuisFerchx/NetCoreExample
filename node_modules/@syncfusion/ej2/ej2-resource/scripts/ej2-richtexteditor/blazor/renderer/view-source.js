import { removeClass, selectAll, createElement, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
import { decode } from './../util';
import * as events from '../../src/rich-text-editor/base/constant';
import { CLS_EXPAND_OPEN, CLS_TB_ITEM, CLS_ACTIVE } from '../../src/rich-text-editor/base/classes';
var ViewSource = (function () {
    function ViewSource(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    ViewSource.prototype.addEventListener = function () {
        this.parent.observer.on(events.sourceCode, this.sourceCode, this);
        this.parent.observer.on(events.initialEnd, this.onInitialEnd, this);
        this.parent.observer.on(events.updateSource, this.updateSourceCode, this);
        this.parent.observer.on(events.destroy, this.destroy, this);
    };
    ViewSource.prototype.onInitialEnd = function () {
        this.parent.formatter.editorManager.observer.on('keydown-handler', this.onKeyDown, this);
    };
    ViewSource.prototype.removeEventListener = function () {
        this.unWireEvent();
        this.parent.observer.off(events.sourceCode, this.sourceCode);
        this.parent.observer.off(events.updateSource, this.updateSourceCode);
        this.parent.observer.off(events.initialEnd, this.onInitialEnd);
        this.parent.observer.off(events.destroy, this.destroy);
        this.parent.formatter.editorManager.observer.off('keydown-handler', this.onKeyDown);
    };
    ViewSource.prototype.getSourceCode = function () {
        return createElement('textarea', { className: 'e-rte-srctextarea' });
    };
    ViewSource.prototype.wireEvent = function (element) {
        this.keyboardModule = new KeyboardEvents(element, {
            keyAction: this.previewKeyDown.bind(this), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'
        });
        EventHandler.add(this.previewElement, 'mousedown', this.mouseDownHandler, this);
    };
    ViewSource.prototype.unWireEvent = function () {
        if (this.keyboardModule) {
            this.keyboardModule.destroy();
        }
        if (this.previewElement) {
            EventHandler.remove(this.previewElement, 'mousedown', this.mouseDownHandler);
        }
    };
    ViewSource.prototype.wireBaseKeyDown = function () {
        this.keyboardModule = new KeyboardEvents(this.parent.getEditPanel(), {
            keyAction: this.parent.keyDown.bind(this.parent), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'
        });
    };
    ViewSource.prototype.unWireBaseKeyDown = function () {
        this.keyboardModule.destroy();
    };
    ViewSource.prototype.mouseDownHandler = function (e) {
        this.parent.observer.notify(events.sourceCodeMouseDown, { args: e });
    };
    ViewSource.prototype.previewKeyDown = function (event) {
        switch (event.action) {
            case 'html-source':
                this.parent.dotNetRef.invokeMethodAsync('PreviewCodeClient');
                this.updateSourceCode(event);
                event.preventDefault();
                break;
            case 'toolbar-focus':
                if (this.parent.toolbarSettings.enable) {
                    var selector = '.e-toolbar-item[aria-disabled="false"][title] [tabindex]';
                    this.parent.getToolbar().querySelector(selector).focus();
                }
                break;
        }
    };
    ViewSource.prototype.onKeyDown = function (e) {
        switch (e.event.action) {
            case 'html-source':
                e.event.preventDefault();
                this.parent.dotNetRef.invokeMethodAsync('ViewSourceClient');
                this.sourceCode(e);
                e.callBack({
                    requestType: 'SourceCode',
                    editorMode: 'HTML',
                    event: e.event
                });
                break;
        }
    };
    ViewSource.prototype.sourceCode = function (args) {
        var _this = this;
        this.parent.isBlur = false;
        this.parent.dotNetRef.invokeMethodAsync('ActionBeginEvent', { requestType: 'SourceCode', cancel: false }).then(function (sourceArgs) {
            if (!sourceArgs.cancel) {
                var tbItems = selectAll('.' + CLS_TB_ITEM, _this.parent.element);
                if (isNullOrUndefined(_this.previewElement)) {
                    _this.previewElement = _this.getSourceCode();
                }
                _this.parent.updateValueData();
                if (_this.parent.iframeSettings.enable) {
                    var rteContent = void 0;
                    if (isNullOrUndefined(_this.parent.element.querySelector('#' + _this.parent.element.id + '_source-view'))) {
                        rteContent = createElement('div', {
                            className: 'e-source-content', id: _this.parent.element.id + '_source-view'
                        });
                    }
                    else {
                        rteContent = _this.parent.element.querySelector('#' + _this.parent.element.id + '_source-view');
                    }
                    rteContent.appendChild(_this.previewElement);
                    _this.parent.element.appendChild(rteContent);
                    rteContent.style.height = _this.parent.getPanel().style.height;
                    rteContent.style.marginTop = _this.parent.getPanel().style.marginTop;
                    _this.getPanel().value = _this.getTextAreaValue(_this.parent.getPanel());
                    _this.parent.getPanel().style.display = 'none';
                    rteContent.style.display = 'block';
                }
                else {
                    _this.parent.inputElement.parentElement.appendChild(_this.previewElement);
                    _this.getPanel().value = _this.getTextAreaValue(_this.parent.getEditPanel());
                    _this.parent.inputElement.style.display = 'none';
                    _this.previewElement.style.display = 'block';
                }
                _this.parent.isBlur = false;
                if (_this.parent.getToolbar()) {
                    removeClass([_this.parent.getToolbar()], [CLS_EXPAND_OPEN]);
                }
                removeClass(tbItems, [CLS_ACTIVE]);
                _this.parent.setContentHeight('sourceCode', true);
                _this.wireEvent(_this.previewElement);
                _this.unWireBaseKeyDown();
                _this.previewElement.focus();
                _this.parent.updateValue();
                if (!isNullOrUndefined(_this.parent.placeholder) && !_this.parent.iframeSettings.enable) {
                    var placeHolderContainer = _this.parent.element.querySelector('.rte-placeholder');
                    placeHolderContainer.style.display = 'none';
                }
                _this.parent.dotNetRef.invokeMethodAsync('ActionCompleteEvent', { requestType: 'SourceCode' }).then(function (completeArgs) {
                    _this.parent.invokeChangeEvent();
                });
            }
        });
    };
    ViewSource.prototype.updateSourceCode = function (args) {
        var _this = this;
        this.parent.isBlur = false;
        this.parent.dotNetRef.invokeMethodAsync('ActionBeginEvent', { requestType: 'Preview', cancel: false }).then(function (previewArgs) {
            if (!previewArgs.cancel) {
                var editHTML = _this.getPanel();
                var serializeValue = _this.parent.serializeValue(editHTML.value);
                var value = (serializeValue === null || serializeValue === '') ? '<p><br/></p>' : serializeValue;
                if (_this.parent.iframeSettings.enable) {
                    editHTML.parentElement.style.display = 'none';
                    _this.parent.contentPanel.style.display = 'block';
                    _this.parent.getEditPanel().innerHTML = _this.parent.enableHtmlEncode ? decode(value) : value;
                }
                else {
                    editHTML.style.display = 'none';
                    _this.parent.getEditPanel().style.display = 'block';
                    _this.parent.getEditPanel().innerHTML = _this.parent.enableHtmlEncode ? decode(value) : value;
                }
                _this.parent.isBlur = false;
                if (_this.parent.getToolbar()) {
                    removeClass([_this.parent.getToolbar()], [CLS_EXPAND_OPEN]);
                }
                _this.parent.setContentHeight('preview', true);
                _this.unWireEvent();
                _this.wireBaseKeyDown();
                _this.parent.getEditPanel().focus();
                _this.parent.updateValue();
                if (!isNullOrUndefined(_this.parent.placeholder) && _this.parent.getEditPanel().innerText.length === 0) {
                    var placeHolderContainer = _this.parent.element.querySelector('.rte-placeholder');
                    placeHolderContainer.style.display = 'block';
                }
                _this.parent.dotNetRef.invokeMethodAsync('ActionCompleteEvent', { requestType: 'Preview' }).then(function (previewArgs) {
                    _this.parent.invokeChangeEvent();
                });
            }
        });
    };
    ViewSource.prototype.getTextAreaValue = function (element) {
        var currentValue;
        currentValue = this.parent.enableXhtml ? this.parent.getXhtmlString(this.parent.value) : this.parent.value;
        return (element.innerHTML === '<p><br></p>') ||
            (element.childNodes.length === 1 &&
                element.childNodes[0].tagName === 'P' &&
                element.innerHTML.length === 7) ? '' : currentValue;
    };
    ViewSource.prototype.getPanel = function () {
        return this.parent.element.querySelector('.e-rte-srctextarea');
    };
    ViewSource.prototype.getViewPanel = function () {
        return (this.parent.iframeSettings.enable && this.getPanel()) ? this.getPanel().parentElement : this.getPanel();
    };
    ViewSource.prototype.destroy = function () {
        this.removeEventListener();
    };
    return ViewSource;
}());
export { ViewSource };
