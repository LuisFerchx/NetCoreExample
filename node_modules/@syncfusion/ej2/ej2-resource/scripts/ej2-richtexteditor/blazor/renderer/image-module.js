import { addClass, detach, EventHandler, select, Browser } from '@syncfusion/ej2-base';
import { closest, removeClass, isNullOrUndefined as isNOU, createElement } from '@syncfusion/ej2-base';
import * as events from '../constant';
import { CLS_RTE_IMG_BOX_MARK, } from '../classes';
import * as classes from '../classes';
import { dispatchEvent, parseHtml, hasClass, convertToBlob, isIDevice } from '../util';
var Image = (function () {
    function Image(parent) {
        this.pageX = null;
        this.pageY = null;
        this.deletedImg = [];
        this.parent = parent;
        this.rteId = parent.element.id;
        this.addEventListener();
    }
    Image.prototype.addEventListener = function () {
        this.parent.observer.on(events.keyUp, this.onKeyUp, this);
        this.parent.observer.on(events.windowResize, this.onWindowResize, this);
        this.parent.observer.on(events.destroy, this.destroy, this);
        this.parent.observer.on(events.paste, this.imagePaste, this);
        this.parent.observer.on(events.keyDown, this.onKeyDown, this);
        this.parent.observer.on(events.imageSize, this.imageSize, this);
        this.parent.observer.on(events.imageCaption, this.caption, this);
        this.parent.observer.on(events.imageDelete, this.deleteImg, this);
        this.parent.observer.on(events.imageAlt, this.insertAltText, this);
        this.parent.observer.on(events.initialEnd, this.afterRender, this);
        this.parent.observer.on(events.imageLink, this.insertImgLink, this);
        this.parent.observer.on(events.insertImage, this.imageDialog, this);
        this.parent.observer.on(events.dropDownSelect, this.alignmentSelect, this);
        this.parent.observer.on(events.iframeMouseDown, this.onIframeMouseDown, this);
        this.parent.observer.on(events.imageToolbarAction, this.onToolbarAction, this);
        this.parent.observer.on(events.editAreaClick, this.editAreaClickHandler, this);
        this.parent.observer.on(events.insertCompleted, this.showImageQuickToolbar, this);
    };
    Image.prototype.removeEventListener = function () {
        this.parent.observer.off(events.keyUp, this.onKeyUp);
        this.parent.observer.off(events.windowResize, this.onWindowResize);
        this.parent.observer.off(events.destroy, this.destroy);
        this.parent.observer.off(events.paste, this.imagePaste);
        this.parent.observer.off(events.keyDown, this.onKeyDown);
        this.parent.observer.off(events.imageSize, this.imageSize);
        this.parent.observer.off(events.imageCaption, this.caption);
        this.parent.observer.off(events.imageDelete, this.deleteImg);
        this.parent.observer.off(events.imageAlt, this.insertAltText);
        this.parent.observer.off(events.initialEnd, this.afterRender);
        this.parent.observer.off(events.imageLink, this.insertImgLink);
        this.parent.observer.off(events.insertImage, this.imageDialog);
        this.parent.observer.off(events.dropDownSelect, this.alignmentSelect);
        this.parent.observer.off(events.iframeMouseDown, this.onIframeMouseDown);
        this.parent.observer.off(events.imageToolbarAction, this.onToolbarAction);
        this.parent.observer.off(events.editAreaClick, this.editAreaClickHandler);
        this.parent.observer.off(events.insertCompleted, this.showImageQuickToolbar);
        var dropElement = this.parent.iframeSettings.enable ?
            this.parent.inputElement.ownerDocument : this.parent.inputElement;
        dropElement.removeEventListener('drop', this.dragDrop.bind(this), true);
        dropElement.removeEventListener('dragstart', this.dragStart.bind(this), true);
        dropElement.removeEventListener('dragenter', this.dragEnter.bind(this), true);
        dropElement.removeEventListener('dragover', this.dragOver.bind(this), true);
        if (!isNOU(this.parent.getEditPanel())) {
            EventHandler.remove(this.parent.getEditPanel(), Browser.touchEndEvent, this.imageClick);
            this.parent.formatter.editorManager.observer.off(events.checkUndo, this.undoStack);
            if (this.parent.insertImageSettings.resize) {
                EventHandler.remove(this.parent.getEditPanel(), Browser.touchStartEvent, this.resizeStart);
                EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);
                EventHandler.remove(this.parent.getEditPanel(), 'cut', this.onCutHandler);
            }
        }
    };
    Image.prototype.afterRender = function () {
        EventHandler.add(this.parent.getEditPanel(), Browser.touchEndEvent, this.imageClick, this);
        if (this.parent.insertImageSettings.resize) {
            EventHandler.add(this.parent.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);
            EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);
            EventHandler.add(this.parent.getEditPanel(), 'cut', this.onCutHandler, this);
        }
        var dropElement = this.parent.iframeSettings.enable ? this.parent.inputElement.ownerDocument :
            this.parent.inputElement;
        dropElement.addEventListener('drop', this.dragDrop.bind(this), true);
        dropElement.addEventListener('dragstart', this.dragStart.bind(this), true);
        dropElement.addEventListener('dragenter', this.dragOver.bind(this), true);
        dropElement.addEventListener('dragover', this.dragOver.bind(this), true);
    };
    Image.prototype.imageDialog = function (e) {
        this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
        this.uploadUrl = { url: '' };
        this.selectionObj = { selfImage: this, selection: e.selection, args: e.args, selectParent: e.selectParent };
        if ((!isNOU(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown')
            || this.parent.editorMode === 'HTML') {
            var iframe = this.parent.iframeSettings.enable;
            if (this.parent.editorMode === 'HTML' && (!iframe && isNOU(closest(e.selection.range.startContainer.parentNode, '#' +
                this.parent.getPanel().id))
                || (iframe && !hasClass(e.selection.range.startContainer.parentNode.ownerDocument.querySelector('body'), 'e-lib')))) {
                this.parent.getEditPanel().focus();
                var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
                this.imgUploadSave = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument());
                this.imgUploadSelectedParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            }
            else {
                this.imgUploadSave = e.selection;
                this.imgUploadSelectedParent = e.selectParent;
            }
        }
        var obj = { mode: (e.selectNode && e.selectNode[0].nodeName === 'IMG' ? 'Edit' : 'Insert') };
        this.parent.dotNetRef.invokeMethodAsync(events.showImageDialog, obj);
        if (this.quickToolObj) {
            this.quickToolObj.hideImageQTBar();
            if (!isNOU(e.selectParent)) {
                removeClass([e.selectParent[0]], 'e-img-focus');
            }
            this.quickToolObj.hideInlineQTBar();
        }
    };
    Image.prototype.checkImageBack = function (range) {
        if (range.startContainer.nodeName === '#text' && range.startOffset === 0 &&
            !isNOU(range.startContainer.previousSibling) && range.startContainer.previousSibling.nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.previousSibling);
        }
        else if (range.startContainer.nodeName !== '#text' && !isNOU(range.startContainer.childNodes[range.startOffset - 1]) &&
            range.startContainer.childNodes[range.startOffset - 1].nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.childNodes[range.startOffset - 1]);
        }
    };
    Image.prototype.checkImageDel = function (range) {
        if (range.startContainer.nodeName === '#text' && range.startOffset === range.startContainer.textContent.length &&
            !isNOU(range.startContainer.nextSibling) && range.startContainer.nextSibling.nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.nextSibling);
        }
        else if (range.startContainer.nodeName !== '#text' && !isNOU(range.startContainer.childNodes[range.startOffset]) &&
            range.startContainer.childNodes[range.startOffset].nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.childNodes[range.startOffset]);
        }
    };
    Image.prototype.getDropRange = function (x, y) {
        var startRange = this.parent.getDocument().createRange();
        this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.getDocument(), startRange);
        var elem = this.parent.getDocument().elementFromPoint(x, y);
        var startNode = (elem.childNodes.length > 0 ? elem.childNodes[0] : elem);
        var startCharIndexCharacter = 0;
        if (this.parent.inputElement.firstChild.innerHTML === '<br>') {
            startRange.setStart(startNode, startCharIndexCharacter);
            startRange.setEnd(startNode, startCharIndexCharacter);
        }
        else {
            var rangeRect = void 0;
            do {
                startCharIndexCharacter++;
                startRange.setStart(startNode, startCharIndexCharacter);
                startRange.setEnd(startNode, startCharIndexCharacter + 1);
                rangeRect = startRange.getBoundingClientRect();
            } while (rangeRect.left < x && startCharIndexCharacter < startNode.length - 1);
        }
        return startRange;
    };
    Image.prototype.selectRange = function (e) {
        var range;
        if (this.parent.getDocument().caretRangeFromPoint) {
            range = this.parent.getDocument().caretRangeFromPoint(e.clientX, e.clientY);
        }
        else if ((e.rangeParent)) {
            range = this.parent.getDocument().createRange();
            range.setStart(e.rangeParent, e.rangeOffset);
        }
        else {
            range = this.getDropRange(e.clientX, e.clientY);
        }
        this.parent.observer.notify(events.selectRange, { range: range });
    };
    Image.prototype.imageDropInitialized = function (isStream) {
        var e = this.imageDragArgs;
        if (this.parent.element.querySelector('.' + classes.CLS_IMG_RESIZE)) {
            detach(this.imgResizeDiv);
        }
        this.selectRange(this.imageDragArgs);
        if (this.dropFiles.length > 1) {
            return;
        }
        this.parent.observer.notify(events.drop, { args: e });
        var imgFiles = this.dropFiles;
        var fileName = imgFiles[0].name;
        var imgType = fileName.substring(fileName.lastIndexOf('.'));
        var allowedTypes = this.parent.insertImageSettings.allowedTypes;
        for (var i = 0; i < allowedTypes.length; i++) {
            if (imgType.toLocaleLowerCase() === allowedTypes[i].toLowerCase()) {
                if (this.parent.insertImageSettings.saveUrl || isStream) {
                    this.onSelect(this.dropFiles);
                }
                else {
                    var args = { text: '', file: imgFiles[0] };
                    this.imagePaste(args);
                }
            }
        }
    };
    Image.prototype.insertDragImage = function (e, dropFiles) {
        var _this = this;
        e.preventDefault();
        var activePopupElement = this.parent.element.querySelector('' + classes.CLS_POPUP_OPEN);
        this.parent.observer.notify(events.drop, { args: e });
        if (activePopupElement) {
            activePopupElement.classList.add(classes.CLS_HIDE);
        }
        if (dropFiles.length <= 0) {
            var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
            var imgElement = this.parent.inputElement.ownerDocument.querySelector('.' + classes.CLS_RTE_DRAG_IMAGE);
            if (imgElement && imgElement.tagName === 'IMG') {
                if (imgElement.nextElementSibling) {
                    if (imgElement.nextElementSibling.classList.contains(classes.CLS_IMG_INNER)) {
                        range.insertNode(imgElement.parentElement.parentElement);
                    }
                    else {
                        range.insertNode(imgElement);
                    }
                }
                else {
                    range.insertNode(imgElement);
                }
                imgElement.classList.remove(classes.CLS_RTE_DRAG_IMAGE);
                imgElement.addEventListener('load', function () {
                    if (_this.parent.actionCompleteEnabled) {
                        _this.parent.dotNetRef.invokeMethodAsync(events.actionCompleteEvent, null);
                    }
                });
                this.parent.formatter.editorManager.nodeSelection.Clear(this.parent.getDocument());
                var args = e;
                this.resizeStart(args, imgElement);
                this.hideImageQuickToolbar();
            }
        }
    };
    Image.prototype.onSelect = function (dropFiles) {
        var _this = this;
        var proxy = this;
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
        var validFiles = {
            name: '',
            size: 0,
            status: '',
            statusCode: '',
            type: '',
            rawFile: dropFiles[0],
            validationMessages: {}
        };
        this.droppedImage = createElement('IMG');
        this.droppedImage.style.opacity = '0.5';
        this.droppedImage.classList.add(classes.CLS_RTE_IMAGE);
        this.droppedImage.classList.add(classes.CLS_IMGINLINE);
        this.droppedImage.classList.add(classes.CLS_RESIZE);
        var file = validFiles.rawFile;
        var reader = new FileReader();
        reader.addEventListener('load', function () {
            var url = URL.createObjectURL(convertToBlob(reader.result));
            _this.droppedImage.src = proxy.parent.insertImageSettings.saveFormat === 'Blob' ? url : reader.result;
        });
        if (file) {
            reader.readAsDataURL(file);
        }
        range.insertNode(this.droppedImage);
        range.selectNodeContents(this.droppedImage);
        this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.getDocument(), range);
        this.droppedImage.addEventListener('load', function () {
            if (_this.parent.actionCompleteEnabled) {
                _this.parent.dotNetRef.invokeMethodAsync(events.actionCompleteEvent, null);
            }
        });
    };
    Image.prototype.removeDroppedImage = function () {
        detach(this.droppedImage);
    };
    Image.prototype.dropUploadSuccess = function (url, altText) {
        this.droppedImage.style.opacity = '1';
        this.droppedImage.classList.add(classes.CLS_IMG_FOCUS);
        this.droppedImage.src = url;
        this.droppedImage.alt = altText;
        this.showImageQuickToolbar({
            args: this.imageDragArgs, type: 'Images', isNotify: undefined, elements: this.droppedImage
        });
        this.resizeStart(this.imageDragArgs, this.droppedImage);
    };
    Image.prototype.dropUploadChange = function (url, isStream) {
        if (isStream) {
            this.droppedImage.src = url;
            this.droppedImage.style.opacity = '1';
        }
    };
    Image.prototype.imagePaste = function (args) {
        var _this = this;
        if (args.text.length === 0 && !isNOU(args.file)) {
            var proxy_1 = this;
            var reader_1 = new FileReader();
            if (args.args) {
                args.args.preventDefault();
            }
            reader_1.addEventListener('load', function (e) {
                var url = {
                    cssClass: (proxy_1.parent.insertImageSettings.display === 'inline' ? classes.CLS_IMGINLINE : classes.CLS_IMGBREAK),
                    url: _this.parent.insertImageSettings.saveFormat === 'Base64' || !isNOU(args.callBack) ?
                        reader_1.result : URL.createObjectURL(convertToBlob(reader_1.result)),
                    width: {
                        width: proxy_1.parent.insertImageSettings.width, minWidth: proxy_1.parent.insertImageSettings.minWidth,
                        maxWidth: proxy_1.getMaxWidth()
                    },
                    height: {
                        height: proxy_1.parent.insertImageSettings.height, minHeight: proxy_1.parent.insertImageSettings.minHeight,
                        maxHeight: proxy_1.parent.insertImageSettings.maxHeight
                    }
                };
                if (!isNOU(args.callBack)) {
                    args.callBack(url);
                    return;
                }
                else {
                    proxy_1.parent.formatter.process(proxy_1.parent, { item: { command: 'Images', subCommand: 'Image' } }, args.args, url);
                    _this.showPopupToolBar(args, url);
                }
            });
            reader_1.readAsDataURL(args.file);
        }
    };
    Image.prototype.showPopupToolBar = function (e, url) {
        var _this = this;
        var imageSrc = 'img[src="' + url.url + '"]';
        var imageElement = this.parent.inputElement.querySelector(imageSrc);
        var args = {
            args: e.args,
            type: 'Images',
            isNotify: undefined,
            elements: imageElement
        };
        if (imageElement) {
            setTimeout(function () { _this.showImageQuickToolbar(args); _this.resizeStart(e.args, imageElement); }, 0);
        }
    };
    Image.prototype.undoStack = function (args) {
        if (args.subCommand.toLowerCase() === 'undo' || args.subCommand.toLowerCase() === 'redo') {
            for (var i = 0; i < this.parent.formatter.getUndoRedoStack().length; i++) {
                var temp = createElement('div');
                var contentElem = parseHtml(this.parent.formatter.getUndoRedoStack()[i].text);
                temp.appendChild(contentElem);
                var img = temp.querySelectorAll('img');
                if (temp.querySelector('.' + classes.CLS_IMG_RESIZE) && img.length > 0) {
                    for (var j = 0; j < img.length; j++) {
                        img[j].style.outline = '';
                    }
                    detach(temp.querySelector('.' + classes.CLS_IMG_RESIZE));
                    this.parent.formatter.getUndoRedoStack()[i].text = temp.innerHTML;
                }
            }
        }
    };
    Image.prototype.imageResize = function (e) {
        this.resizeBtnInit();
        this.imgEle = e;
        addClass([this.imgEle], 'e-resize');
        this.imgResizeDiv = createElement('span', { className: classes.CLS_IMG_RESIZE, id: this.rteId + events.imgResizeId });
        this.imgResizeDiv.appendChild(createElement('span', {
            className: CLS_RTE_IMG_BOX_MARK + ' e-rte-topLeft', styles: 'cursor: nwse-resize'
        }));
        this.imgResizeDiv.appendChild(createElement('span', {
            className: CLS_RTE_IMG_BOX_MARK + ' e-rte-topRight', styles: 'cursor: nesw-resize'
        }));
        this.imgResizeDiv.appendChild(createElement('span', {
            className: CLS_RTE_IMG_BOX_MARK + ' e-rte-botLeft', styles: 'cursor: nesw-resize'
        }));
        this.imgResizeDiv.appendChild(createElement('span', {
            className: CLS_RTE_IMG_BOX_MARK + ' e-rte-botRight', styles: 'cursor: nwse-resize'
        }));
        if (Browser.isDevice) {
            addClass([this.imgResizeDiv], 'e-mob-rte');
        }
        e.style.outline = '2px solid #4a90e2';
        this.imgResizePos(e, this.imgResizeDiv);
        this.resizeImgDupPos(e);
        this.parent.getEditPanel().appendChild(this.imgResizeDiv);
        EventHandler.add(this.parent.getDocument(), Browser.touchMoveEvent, this.resizing, this);
    };
    Image.prototype.resizeBtnInit = function () {
        return this.resizeBtnStat = { botLeft: false, botRight: false, topRight: false, topLeft: false };
    };
    Image.prototype.imgResizePos = function (e, imgResizeDiv) {
        var pos = this.calcPos(e);
        var top = pos.top;
        var left = pos.left;
        var imgWid = e.width;
        var imgHgt = e.height;
        var borWid = (Browser.isDevice) ? (4 * parseInt((e.style.outline.slice(-3)), 10)) + 2 :
            (2 * parseInt((e.style.outline.slice(-3)), 10)) + 2;
        var devWid = ((Browser.isDevice) ? 0 : 2);
        imgResizeDiv.querySelector('.e-rte-botLeft').style.left = (left - borWid) + 'px';
        imgResizeDiv.querySelector('.e-rte-botLeft').style.top = ((imgHgt - borWid) + top) + 'px';
        imgResizeDiv.querySelector('.e-rte-botRight').style.left = ((imgWid - (borWid - devWid)) + left) + 'px';
        imgResizeDiv.querySelector('.e-rte-botRight').style.top = ((imgHgt - borWid) + top) + 'px';
        imgResizeDiv.querySelector('.e-rte-topRight').style.left = ((imgWid - (borWid - devWid)) + left) + 'px';
        imgResizeDiv.querySelector('.e-rte-topRight').style.top = (top - (borWid)) + 'px';
        imgResizeDiv.querySelector('.e-rte-topLeft').style.left = (left - borWid) + 'px';
        imgResizeDiv.querySelector('.e-rte-topLeft').style.top = (top - borWid) + 'px';
    };
    Image.prototype.resizeImgDupPos = function (e) {
        this.imgDupPos = {
            width: (e.style.height !== '') ? this.imgEle.style.width : e.width + 'px',
            height: (e.style.height !== '') ? this.imgEle.style.height : e.height + 'px'
        };
    };
    Image.prototype.calcPos = function (elem) {
        var ignoreOffset = ['TD', 'TH', 'TABLE', 'A'];
        var parentOffset = { top: 0, left: 0 };
        var doc = elem.ownerDocument;
        var offsetParent = ((elem.offsetParent && (elem.offsetParent.classList.contains('e-img-caption') ||
            ignoreOffset.indexOf(elem.offsetParent.tagName) > -1)) ?
            closest(elem, '#' + this.rteId + '_rte-edit-view') : elem.offsetParent) || doc.documentElement;
        while (offsetParent &&
            (offsetParent === doc.body || offsetParent === doc.documentElement) &&
            offsetParent.style.position === 'static') {
            offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
            parentOffset = offsetParent.getBoundingClientRect();
        }
        return {
            top: elem.offsetTop,
            left: elem.offsetLeft
        };
    };
    Image.prototype.getPointX = function (e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageX;
        }
        else {
            return e.pageX;
        }
    };
    Image.prototype.getPointY = function (e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageY;
        }
        else {
            return e.pageY;
        }
    };
    Image.prototype.pixToPercent = function (expected, parentEle) {
        return expected / parseFloat(getComputedStyle(parentEle).width) * 100;
    };
    Image.prototype.imgDupMouseMove = function (width, height, e) {
        var args = { requestType: 'Images' };
        if ((parseInt(this.parent.insertImageSettings.minWidth, 10) >= parseInt(width, 10) ||
            parseInt(this.getMaxWidth(), 10) <= parseInt(width, 10))) {
            return;
        }
        if (!this.parent.insertImageSettings.resizeByPercent &&
            (parseInt(this.parent.insertImageSettings.minHeight, 10) >= parseInt(height, 10) ||
                parseInt(this.parent.insertImageSettings.maxHeight, 10) <= parseInt(height, 10))) {
            return;
        }
        this.imgEle.parentElement.style.cursor = 'pointer';
        this.setAspectRatio(this.imgEle, parseInt(width, 10), parseInt(height, 10));
        this.resizeImgDupPos(this.imgEle);
        this.imgResizePos(this.imgEle, this.imgResizeDiv);
        this.parent.setContentHeight('', false);
    };
    Image.prototype.setAspectRatio = function (img, expectedX, expectedY) {
        if (isNOU(img.width)) {
            return;
        }
        var width = img.style.width !== '' ? parseInt(img.style.width, 10) : img.width;
        var height = img.style.height !== '' ? parseInt(img.style.height, 10) : img.height;
        if (width > height) {
            if (this.parent.insertImageSettings.resizeByPercent) {
                img.style.width = this.pixToPercent((width / height * expectedY), (img.previousElementSibling || img.parentElement)) + '%';
                img.style.height = null;
                img.removeAttribute('height');
            }
            else if (img.style.width !== '') {
                img.style.width = (width / height * expectedY) + 'px';
                img.style.height = expectedY + 'px';
            }
            else {
                img.setAttribute('width', (width / height * expectedY).toString());
                img.setAttribute('height', expectedY.toString());
            }
        }
        else if (height > width) {
            if (this.parent.insertImageSettings.resizeByPercent) {
                img.style.width = this.pixToPercent(expectedX, (img.previousElementSibling || img.parentElement)) + '%';
                img.style.height = null;
                img.removeAttribute('height');
            }
            else if (img.style.width !== '') {
                img.style.width = expectedX + 'px';
                img.style.height = (height / width * expectedX) + 'px';
            }
            else {
                img.setAttribute('width', expectedX.toString());
                img.setAttribute('height', (height / width * expectedX).toString());
            }
        }
        else {
            if (this.parent.insertImageSettings.resizeByPercent) {
                img.style.width = this.pixToPercent(expectedX, (img.previousElementSibling || img.parentElement)) + '%';
                img.style.height = null;
                img.removeAttribute('height');
            }
            else if (img.style.width !== '') {
                img.style.width = expectedX + 'px';
                img.style.height = expectedX + 'px';
            }
            else {
                img.setAttribute('width', expectedX.toString());
                img.setAttribute('height', expectedX.toString());
            }
        }
    };
    Image.prototype.getMaxWidth = function () {
        var maxWidth = this.parent.insertImageSettings.maxWidth;
        var imgPadding = 12;
        var imgResizeBorder = 2;
        var editEle = this.parent.getEditPanel();
        var eleStyle = window.getComputedStyle(editEle);
        var editEleMaxWidth = editEle.offsetWidth - (imgPadding + imgResizeBorder +
            parseFloat(eleStyle.paddingLeft.split('px')[0]) + parseFloat(eleStyle.paddingRight.split('px')[0]) +
            parseFloat(eleStyle.marginLeft.split('px')[0]) + parseFloat(eleStyle.marginRight.split('px')[0]));
        return isNOU(maxWidth) ? editEleMaxWidth : maxWidth;
    };
    Image.prototype.cancelResizeAction = function () {
        EventHandler.remove(this.parent.getDocument(), Browser.touchMoveEvent, this.resizing);
        EventHandler.remove(this.parent.getDocument(), Browser.touchEndEvent, this.resizeEnd);
        if (this.imgEle && this.imgResizeDiv && this.parent.getEditPanel().contains(this.imgResizeDiv)) {
            detach(this.imgResizeDiv);
            this.imgEle.style.outline = '';
            this.imgResizeDiv = null;
            this.pageX = null;
            this.pageY = null;
        }
    };
    Image.prototype.removeResizeEle = function () {
        EventHandler.remove(this.parent.getDocument(), Browser.touchMoveEvent, this.resizing);
        EventHandler.remove(this.parent.getDocument(), Browser.touchEndEvent, this.resizeEnd);
        detach(this.parent.getEditPanel().querySelector('.e-img-resize'));
    };
    Image.prototype.onWindowResize = function () {
        if (!isNOU(this.parent.getEditPanel().querySelector('.e-img-resize'))) {
            this.cancelResizeAction();
        }
    };
    Image.prototype.editAreaClickHandler = function (e) {
        if (this.parent.readonly) {
            this.hideImageQuickToolbar();
            return;
        }
        var args = e.args;
        var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
        if (args.which === 2 || (showOnRightClick && args.which === 1) || (!showOnRightClick && args.which === 3)) {
            if ((showOnRightClick && args.which === 1) && !isNOU(args.target) &&
                args.target.tagName === 'IMG') {
                this.parent.formatter.editorManager.nodeSelection.Clear(this.parent.getDocument());
                this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.parent.getDocument(), args.target);
            }
            return;
        }
        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule) {
            this.quickToolObj = this.parent.quickToolbarModule;
            var target = args.target;
            var isPopupOpen = void 0;
            isPopupOpen = document.body.querySelector('#' + this.rteId + events.imageQuickPopup).classList.contains('e-rte-pop');
            if (target.nodeName === 'IMG' && this.parent.quickToolbarModule) {
                if (isPopupOpen) {
                    return;
                }
                this.parent.formatter.editorManager.nodeSelection.Clear(this.parent.getDocument());
                this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.parent.getDocument(), target);
                if (isIDevice()) {
                    this.parent.observer.notify(events.selectionSave, e);
                }
                addClass([target], 'e-img-focus');
                this.showImageQuickToolbar({ args: args, type: 'Images', elements: [args.target] });
            }
            else {
                this.hideImageQuickToolbar();
            }
        }
    };
    Image.prototype.showImageQuickToolbar = function (e) {
        var _this = this;
        var type = 'ImageLink';
        if (e.type !== 'Images' || isNOU(this.parent.quickToolbarModule)) {
            return;
        }
        this.quickToolObj = this.parent.quickToolbarModule;
        var args = e.args;
        var target = e.elements;
        [].forEach.call(e.elements, function (element, index) {
            if (index === 0) {
                target = element;
            }
        });
        if (target && !closest(target, 'a')) {
            type = 'Image';
        }
        if (target.nodeName === 'IMG') {
            addClass([target], ['e-img-focus']);
        }
        var pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +
            this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
        if (this.parent.quickToolbarModule) {
            if (e.isNotify) {
                setTimeout(function () { _this.quickToolObj.showImageQTBar(args.pageX, pageY, target, type); }, 400);
            }
            else {
                this.quickToolObj.showImageQTBar(args.pageX, pageY, target, type);
            }
        }
    };
    Image.prototype.hideImageQuickToolbar = function () {
        if (!isNOU(this.parent.getEditPanel().querySelector('.e-img-focus'))) {
            removeClass([this.parent.getEditPanel().querySelector('.e-img-focus')], 'e-img-focus');
            if (this.quickToolObj) {
                this.quickToolObj.hideImageQTBar();
            }
        }
    };
    Image.prototype.onToolbarAction = function (args) {
        if (this.quickToolObj) {
            this.quickToolObj.hideImageQTBar();
            removeClass([args.selectNode[0]], 'e-img-focus');
        }
        this.selectionObj = args;
        if (isIDevice()) {
            this.parent.observer.notify(events.selectionRestore, {});
        }
        var item = args.args.item;
        switch (item.subCommand) {
            case 'Replace':
                this.parent.observer.notify(events.insertImage, args);
                break;
            case 'Caption':
                this.parent.observer.notify(events.imageCaption, args);
                break;
            case 'InsertLink':
                this.parent.observer.notify(events.imageLink, args);
                break;
            case 'AltText':
                this.parent.observer.notify(events.imageAlt, args);
                break;
            case 'Remove':
                this.parent.observer.notify(events.imageDelete, args);
                break;
            case 'Dimension':
                this.parent.observer.notify(events.imageSize, args);
                break;
            case 'OpenImageLink':
                this.openImgLink(args);
                break;
            case 'EditImageLink':
                this.editImgLink(args);
                break;
            case 'RemoveImageLink':
                this.removeImgLink(args);
                break;
        }
    };
    Image.prototype.openImgLink = function (e) {
        var target = e.selectParent[0].parentNode.target === '' ? '_self' : '_blank';
        this.parent.formatter.process(this.parent, e.args, e.args, {
            url: e.selectParent[0].parentNode.href, target: target, selectNode: e.selectNode,
            subCommand: e.args.item.subCommand
        });
    };
    Image.prototype.editImgLink = function (e) {
        var selectParentEle = e.selectParent[0].parentNode;
        var inputDetails = {
            url: selectParentEle.href, target: selectParentEle.target
        };
        this.insertImgLink(e, inputDetails);
    };
    Image.prototype.removeImgLink = function (e) {
        if (Browser.isIE) {
            this.parent.getEditPanel().focus();
        }
        e.selection.restore();
        var isCapLink = (this.parent.getEditPanel().contains(this.captionEle) && select('a', this.captionEle)) ?
            true : false;
        var selectParent = isCapLink ? [this.captionEle] : [e.selectNode[0].parentElement];
        this.parent.formatter.process(this.parent, e.args, e.args, {
            insertElement: e.selectNode[0], selectParent: selectParent, selection: e.selection,
            subCommand: e.args.item.subCommand
        });
        if (this.quickToolObj) {
            this.quickToolObj.hideImageQTBar();
            if (!isNOU(e.selectParent)) {
                removeClass([e.selectParent[0]], 'e-img-focus');
            }
        }
        if (isCapLink) {
            select('.e-img-inner', this.captionEle).focus();
        }
    };
    Image.prototype.caption = function (e) {
        var selectNode = e.selectNode[0];
        if (selectNode.nodeName !== 'IMG') {
            return;
        }
        e.selection.restore();
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        this.cancelResizeAction();
        addClass([selectNode], 'e-rte-image');
        var subCommand = (e.args.item) ?
            e.args.item.subCommand : 'Caption';
        if (!isNOU(closest(selectNode, '.' + classes.CLS_CAPTION))) {
            detach(closest(selectNode, '.' + classes.CLS_CAPTION));
            if (Browser.isIE) {
                this.parent.getEditPanel().focus();
                e.selection.restore();
            }
            if (selectNode.parentElement.tagName === 'A') {
                this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode.parentElement, selectNode: e.selectNode, subCommand: subCommand });
            }
            else {
                this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode, selectNode: e.selectNode, subCommand: subCommand });
            }
        }
        else {
            this.captionEle = createElement('span', {
                className: classes.CLS_CAPTION + ' ' + classes.CLS_RTE_CAPTION,
                attrs: { contenteditable: 'false', draggable: 'false' }
            });
            var imgContain = createElement('span', { className: 'e-img-wrap' });
            var imgInner = createElement('span', { className: 'e-img-inner', attrs: { contenteditable: 'true' } });
            var parent_1 = e.selectNode[0].parentElement;
            if (parent_1.tagName === 'A') {
                parent_1.setAttribute('contenteditable', 'true');
            }
            imgContain.appendChild(parent_1.tagName === 'A' ? parent_1 : e.selectNode[0]);
            imgContain.appendChild(imgInner);
            var imgCaption = this.parent.localeData['imageCaption'];
            imgInner.innerHTML = imgCaption;
            this.captionEle.appendChild(imgContain);
            if (selectNode.classList.contains(classes.CLS_IMGINLINE)) {
                addClass([this.captionEle], classes.CLS_CAPINLINE);
            }
            if (selectNode.classList.contains(classes.CLS_IMGBREAK)) {
                addClass([this.captionEle], classes.CLS_IMGBREAK);
            }
            if (selectNode.classList.contains(classes.CLS_IMGLEFT)) {
                addClass([this.captionEle], classes.CLS_IMGLEFT);
            }
            if (selectNode.classList.contains(classes.CLS_IMGRIGHT)) {
                addClass([this.captionEle], classes.CLS_IMGRIGHT);
            }
            if (selectNode.classList.contains(classes.CLS_IMGCENTER)) {
                addClass([this.captionEle], classes.CLS_IMGCENTER);
            }
            this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: this.captionEle, selectNode: e.selectNode, subCommand: subCommand });
            this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.getDocument(), imgInner.childNodes[0], imgInner.childNodes[0], 0, imgInner.childNodes[0].textContent.length);
        }
        if (this.quickToolObj) {
            this.quickToolObj.hideImageQTBar();
            removeClass([selectNode], 'e-img-focus');
        }
    };
    Image.prototype.insertImgLink = function (e, inputDetails) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        var obj;
        if (!isNOU(inputDetails)) {
            obj = { mode: 'EditLink', newWindow: inputDetails.target ? true : false, url: inputDetails.url };
        }
        else {
            obj = { mode: 'InsertLink', newWindow: true, url: '' };
        }
        this.parent.dotNetRef.invokeMethodAsync(events.showImageDialog, obj);
    };
    Image.prototype.isUrl = function (url) {
        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi;
        return regexp.test(url);
    };
    Image.prototype.insertLink = function (url, target) {
        if (this.selectionObj.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        var linkEle = document.querySelector('.e-rte-img-dialog .e-img-link');
        if (url === '') {
            addClass([linkEle], 'e-error');
            linkEle.setSelectionRange(0, url.length);
            linkEle.focus();
            return;
        }
        if (!this.isUrl(url)) {
            url = 'http://' + url;
        }
        else {
            removeClass([linkEle], 'e-error');
        }
        if (this.parent.editorMode === 'HTML') {
            this.selectionObj.selection.restore();
        }
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        if (this.selectionObj.selectNode[0].parentElement.nodeName === 'A') {
            this.parent.formatter.process(this.parent, this.selectionObj.args, this.selectionObj.args, {
                url: url, target: target, selectNode: this.selectionObj.selectNode,
                subCommand: this.selectionObj.args.item.subCommand
            });
            this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
            return;
        }
        this.parent.formatter.process(this.parent, this.selectionObj.args, this.selectionObj.args, {
            url: url, target: target, selectNode: this.selectionObj.selectNode,
            subCommand: this.selectionObj.args.item.subCommand,
            selection: this.selectionObj.selection
        });
        var captionEle = closest(this.selectionObj.selectNode[0], '.e-img-caption');
        if (captionEle) {
            select('.e-img-inner', captionEle).focus();
        }
        this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
    };
    Image.prototype.insertAltText = function (e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        var selectNodeAltValue = e.selectNode[0].getAttribute('alt');
        var obj = { mode: 'AltText', altText: ((selectNodeAltValue === null) ? '' : selectNodeAltValue) };
        this.parent.dotNetRef.invokeMethodAsync(events.showImageDialog, obj);
    };
    Image.prototype.insertAlt = function (altText) {
        this.selectionObj.selection.restore();
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        this.parent.formatter.process(this.parent, this.selectionObj.args, this.selectionObj.args, {
            altText: altText, selectNode: this.selectionObj.selectNode,
            subCommand: this.selectionObj.args.item.subCommand
        });
        this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
    };
    Image.prototype.deleteImg = function (e, keyCode) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        var args = {
            src: e.selectNode[0].getAttribute('src')
        };
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        e.selection.restore();
        if (this.parent.getEditPanel().querySelector('.e-img-resize')) {
            this.removeResizeEle();
        }
        this.parent.formatter.process(this.parent, e.args, e.args, {
            selectNode: e.selectNode,
            captionClass: classes.CLS_CAPTION,
            subCommand: e.args.item.subCommand
        });
        if (this.quickToolObj) {
            this.quickToolObj.hideImageQTBar();
        }
        this.cancelResizeAction();
        if (isNOU(keyCode) && this.parent.imageDeleteEnabled) {
            this.parent.dotNetRef.invokeMethodAsync('AfterImageDeleteEvent', args);
        }
    };
    Image.prototype.imageSize = function (e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        var selectNode = e.selectNode[0];
        var width = (selectNode.getAttribute('width') === 'auto' ||
            isNOU(selectNode.getAttribute('width'))) ? selectNode.width : selectNode.getClientRects()[0].width;
        var height = (selectNode.getAttribute('height') === 'auto' ||
            isNOU(selectNode.getAttribute('height'))) ? selectNode.height : selectNode.getClientRects()[0].height;
        var obj = {
            mode: 'Dimension', width: width, height: height, maxWidth: this.getMaxWidth()
        };
        this.parent.dotNetRef.invokeMethodAsync(events.showImageDialog, obj);
    };
    Image.prototype.insertSize = function (width, height) {
        this.selectionObj.selection.restore();
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        this.parent.formatter.process(this.parent, this.selectionObj.args, this.selectionObj.args, {
            width: width, height: height, selectNode: this.selectionObj.selectNode,
            subCommand: this.selectionObj.args.item.subCommand
        });
        if (this.imgResizeDiv) {
            this.imgResizePos(this.selectionObj.selectNode[0], this.imgResizeDiv);
        }
        this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
    };
    Image.prototype.alignmentSelect = function (e) {
        var item = e.item;
        if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Images') {
            return;
        }
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
        var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectNodeEle = (selectNodeEle[0].nodeName === 'IMG') ? selectNodeEle : [this.imgEle];
        var args = { args: e, selectNode: selectNodeEle };
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        switch (item.subCommand) {
            case 'JustifyLeft':
                this.alignImage(args, 'JustifyLeft');
                break;
            case 'JustifyCenter':
                this.alignImage(args, 'JustifyCenter');
                break;
            case 'JustifyRight':
                this.alignImage(args, 'JustifyRight');
                break;
            case 'Inline':
                this.inline(args);
                break;
            case 'Break':
                this.break(args);
                break;
        }
        if (this.quickToolObj) {
            this.quickToolObj.hideImageQTBar();
            removeClass([selectNodeEle[0]], 'e-img-focus');
        }
        this.cancelResizeAction();
    };
    Image.prototype.alignImage = function (e, type) {
        var subCommand = (e.args.item) ?
            e.args.item.subCommand : type;
        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });
    };
    Image.prototype.inline = function (e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        var subCommand = (e.args.item) ?
            e.args.item.subCommand : 'Inline';
        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });
    };
    Image.prototype.break = function (e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        var subCommand = (e.args.item) ?
            e.args.item.subCommand : 'Break';
        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });
    };
    Image.prototype.dialogOpened = function () {
        var dialogContent = this.parent.element.querySelector('.e-rte-img-dialog .e-img-content');
        if (isNOU(dialogContent)) {
            return;
        }
        if ((!isNOU(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown')
            || this.parent.editorMode === 'HTML') {
            dialogContent.querySelector('#' + this.rteId + '_insertImage').focus();
        }
        else {
            dialogContent.querySelector('.e-img-url').focus();
        }
    };
    Image.prototype.invokeImageBrowse = function () {
        this.parent.element.querySelector('.e-rte-img-dialog .e-file-select-wrap button').click();
    };
    Image.prototype.imageSelected = function () {
        this.inputUrl.setAttribute('disabled', 'true');
    };
    Image.prototype.imageUploadSuccess = function (url, altText) {
        this.inputUrl = this.parent.element.querySelector('.e-rte-img-dialog .e-img-url');
        if (!isNOU(this.parent.insertImageSettings.path)) {
            this.uploadUrl = {
                url: url, selection: this.imgUploadSave, altText: altText, selectParent: this.imgUploadSelectedParent,
                width: {
                    width: this.parent.insertImageSettings.width, minWidth: this.parent.insertImageSettings.minWidth,
                    maxWidth: this.getMaxWidth()
                }, height: {
                    height: this.parent.insertImageSettings.height, minHeight: this.parent.insertImageSettings.minHeight,
                    maxHeight: this.parent.insertImageSettings.maxHeight
                }
            };
            this.inputUrl.setAttribute('disabled', 'true');
        }
    };
    Image.prototype.imageUploadComplete = function (base64Str, altText) {
        if (this.parent.editorMode === 'HTML' && isNOU(this.parent.insertImageSettings.path)) {
            var url = this.parent.insertImageSettings.saveFormat === 'Base64' ? base64Str :
                URL.createObjectURL(convertToBlob(base64Str));
            this.uploadUrl = {
                url: url, selection: this.imgUploadSave, altText: altText, selectParent: this.imgUploadSelectedParent,
                width: {
                    width: this.parent.insertImageSettings.width, minWidth: this.parent.insertImageSettings.minWidth,
                    maxWidth: this.getMaxWidth()
                }, height: {
                    height: this.parent.insertImageSettings.height, minHeight: this.parent.insertImageSettings.minHeight,
                    maxHeight: this.parent.insertImageSettings.maxHeight
                }
            };
            this.inputUrl.setAttribute('disabled', 'true');
        }
    };
    Image.prototype.imageUploadChange = function (url, isStream) {
        this.modifiedUrl = url;
        this.isStreamUrl = isStream;
    };
    Image.prototype.removing = function () {
        this.inputUrl.removeAttribute('disabled');
        if (this.uploadUrl) {
            this.uploadUrl.url = '';
        }
    };
    Image.prototype.dialogClosed = function () {
        if (this.parent.editorMode === 'HTML') {
            this.selectionObj.selection.restore();
        }
        else {
            this.parent.formatter.editorManager.markdownSelection.restore(this.parent.getEditPanel());
        }
    };
    Image.prototype.insertImageUrl = function () {
        this.inputUrl = this.parent.element.querySelector('.e-rte-img-dialog .e-img-url');
        var url = this.inputUrl.value;
        if (this.isStreamUrl && this.modifiedUrl !== '') {
            this.uploadUrl.url = this.modifiedUrl;
            this.modifiedUrl = '';
        }
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        if (!isNOU(this.uploadUrl) && this.uploadUrl.url !== '') {
            this.uploadUrl.cssClass = this.parent.insertImageSettings.display === 'inline' ? classes.CLS_IMGINLINE : classes.CLS_IMGBREAK;
            this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
            this.parent.formatter.process(this.parent, this.selectionObj.args, this.selectionObj.args.originalEvent, this.uploadUrl);
            if (this.parent.getEditPanel().querySelector('.e-img-resize')) {
                this.imgEle.style.outline = '';
                this.removeResizeEle();
            }
        }
        else if (url !== '') {
            if (this.parent.editorMode === 'HTML' && isNOU(closest(this.selectionObj.selection.range.startContainer.parentNode, '#' + this.parent.getPanel().id))) {
                this.parent.getEditPanel().focus();
                var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
                this.selectionObj.selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument());
                this.selectionObj.selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            }
            var regex = /[\w-]+.(jpg|png|jpeg|gif)/g;
            var matchUrl = (!isNOU(url.match(regex)) && this.parent.editorMode === 'HTML') ? url.match(regex)[0] : '';
            var value = {
                cssClass: (this.parent.insertImageSettings.display === 'inline' ? classes.CLS_IMGINLINE : classes.CLS_IMGBREAK),
                url: url, selection: this.selectionObj.selection, altText: matchUrl,
                selectParent: this.selectionObj.selectParent, width: {
                    width: this.parent.insertImageSettings.width, minWidth: this.parent.insertImageSettings.minWidth,
                    maxWidth: this.getMaxWidth()
                },
                height: {
                    height: this.parent.insertImageSettings.height, minHeight: this.parent.insertImageSettings.minHeight,
                    maxHeight: this.parent.insertImageSettings.maxHeight
                }
            };
            this.parent.formatter.process(this.parent, this.selectionObj.args, this.selectionObj.args.originalEvent, value);
            this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
        }
    };
    Image.prototype.onCutHandler = function () {
        if (this.imgResizeDiv && this.parent.getEditPanel().contains(this.imgResizeDiv)) {
            this.cancelResizeAction();
        }
    };
    Image.prototype.onIframeMouseDown = function () {
        this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
    };
    Image.prototype.onDocumentClick = function (e) {
        var target = e.target;
        if (target.nodeName === 'IMG') {
            this.imgEle = target;
        }
        var dlgEle = document.body.querySelector('#' + this.rteId + '_image.e-rte-img-dialog');
        if (!isNOU(dlgEle) && ((!closest(target, '#' + this.rteId + '_image') && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() &&
            !this.parent.getToolbarElement().contains(e.target)) ||
            (this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) &&
                !closest(target, '#' + this.rteId + '_toolbar_Image') &&
                !target.querySelector('#' + this.rteId + '_toolbar_Image')))) {
            this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
            this.parent.isBlur = true;
            dispatchEvent(this.parent.element, 'focusout');
        }
        if (e.target.tagName !== 'IMG' && this.imgResizeDiv && !this.quickToolObj &&
            this.parent.getEditPanel().contains(this.imgResizeDiv)) {
            this.cancelResizeAction();
        }
        if (this.parent.getEditPanel().querySelector('.e-img-resize')) {
            if (target.tagName !== 'IMG') {
                this.removeResizeEle();
            }
            if (target.tagName !== 'IMG' && !isNOU(this.imgEle)) {
                this.imgEle.style.outline = '';
            }
            else if (!isNOU(this.prevSelectedImgEle) && this.prevSelectedImgEle !== target) {
                this.prevSelectedImgEle.style.outline = '';
            }
        }
    };
    Image.prototype.imageClick = function (e) {
        if (Browser.isDevice) {
            if ((e.target.tagName === 'IMG' &&
                e.target.parentElement.tagName === 'A') ||
                (e.target.tagName === 'IMG')) {
                this.parent.getEditPanel().setAttribute('contenteditable', 'false');
                e.target.focus();
            }
            else {
                if (!this.parent.readonly) {
                    this.parent.getEditPanel().setAttribute('contenteditable', 'true');
                }
            }
        }
        if (e.target.tagName === 'IMG' &&
            e.target.parentElement.tagName === 'A') {
            e.preventDefault();
        }
    };
    Image.prototype.onKeyDown = function (event) {
        var originalEvent = event.args;
        var range;
        var save;
        var selectNodeEle;
        var selectParentEle;
        this.deletedImg = [];
        var isCursor;
        var keyCodeValues = [27, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
            44, 45, 9, 16, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 39, 40, 91, 92, 93, 144, 145, 182, 183];
        if (this.parent.editorMode === 'HTML') {
            range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
            isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
        }
        if (!isCursor && this.parent.editorMode === 'HTML' && keyCodeValues.indexOf(originalEvent.which) < 0) {
            var nodes = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].nodeName === 'IMG') {
                    this.deletedImg.push(nodes[i]);
                }
            }
        }
        if (this.parent.editorMode === 'HTML' && ((originalEvent.which === 8 && originalEvent.code === 'Backspace') ||
            (originalEvent.which === 46 && originalEvent.code === 'Delete'))) {
            var isCursor_1 = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
            if ((originalEvent.which === 8 && originalEvent.code === 'Backspace' && isCursor_1)) {
                this.checkImageBack(range);
            }
            else if ((originalEvent.which === 46 && originalEvent.code === 'Delete' && isCursor_1)) {
                this.checkImageDel(range);
            }
        }
        if (!isNOU(this.parent.formatter.editorManager.nodeSelection) &&
            originalEvent.code !== 'KeyK') {
            range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.getDocument());
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.getDocument());
            selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
            selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            if (!originalEvent.ctrlKey && originalEvent.key && (originalEvent.key.length === 1 || originalEvent.action === 'enter') &&
                (selectParentEle[0].tagName === 'IMG') && selectParentEle[0].parentElement) {
                var prev = selectParentEle[0].parentElement.childNodes[0];
                if (this.parent.getEditPanel().querySelector('.e-img-resize')) {
                    this.removeResizeEle();
                }
                this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.getDocument(), prev, prev, prev.textContent.length, prev.textContent.length);
                removeClass([selectParentEle[0]], 'e-img-focus');
                this.quickToolObj.hideImageQTBar();
            }
        }
        if (originalEvent.ctrlKey && (originalEvent.keyCode === 89 || originalEvent.keyCode === 90)) {
            this.undoStack({ subCommand: (originalEvent.keyCode === 90 ? 'undo' : 'redo') });
        }
        if (originalEvent.keyCode === 8 || originalEvent.keyCode === 46) {
            if (selectNodeEle && selectNodeEle[0].nodeName === 'IMG' && selectNodeEle.length < 1) {
                originalEvent.preventDefault();
                var event_1 = {
                    selectNode: selectNodeEle, selection: save, selectParent: selectParentEle,
                    args: {
                        item: { command: 'Images', subCommand: 'Remove' },
                        originalEvent: originalEvent
                    }
                };
                this.deleteImg(event_1, originalEvent.keyCode);
            }
            if (this.parent.getEditPanel().querySelector('.e-img-resize')) {
                this.removeResizeEle();
            }
        }
        switch (originalEvent.action) {
            case 'escape':
                this.parent.dotNetRef.invokeMethodAsync(events.closeImageDialog);
                break;
            case 'insert-image':
                if (this.parent.editorMode === 'HTML') {
                    this.imageDialog({
                        args: {
                            item: { command: 'Images', subCommand: 'Image' },
                            originalEvent: originalEvent
                        },
                        selectNode: selectNodeEle,
                        selection: save,
                        selectParent: selectParentEle
                    });
                }
                else {
                    this.imageDialog({
                        args: {
                            item: { command: 'Images', subCommand: 'Image' },
                            originalEvent: originalEvent
                        },
                        member: 'image',
                        text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.getEditPanel()),
                        module: 'Markdown',
                        name: 'insertImage'
                    });
                }
                originalEvent.preventDefault();
                break;
        }
    };
    Image.prototype.onKeyUp = function (event) {
        if (!isNOU(this.deletedImg) && this.deletedImg.length > 0) {
            for (var i = 0; i < this.deletedImg.length; i++) {
                var args = {
                    src: this.deletedImg[i].getAttribute('src')
                };
                if (this.parent.imageDeleteEnabled) {
                    this.parent.dotNetRef.invokeMethodAsync('AfterImageDeleteEvent', args);
                }
            }
        }
    };
    Image.prototype.resizeStart = function (e, ele) {
        var _this = this;
        if (this.parent.readonly) {
            return;
        }
        var target = ele ? ele : e.target;
        this.prevSelectedImgEle = this.imgEle;
        if (target.tagName === 'IMG') {
            this.parent.defaultResize(e, false);
            var img = target;
            if (this.imgResizeDiv && this.parent.getEditPanel().contains(this.imgResizeDiv)) {
                detach(this.imgResizeDiv);
            }
            this.imageResize(img);
        }
        if (target.classList.contains('e-rte-imageboxmark')) {
            if (this.parent.formatter.getUndoRedoStack().length === 0) {
                this.parent.formatter.saveData();
            }
            this.pageX = this.getPointX(e);
            this.pageY = this.getPointY(e);
            e.preventDefault();
            e.stopImmediatePropagation();
            this.resizeBtnInit();
            if (this.quickToolObj) {
                this.quickToolObj.hideImageQTBar();
            }
            if (target.classList.contains('e-rte-topLeft')) {
                this.resizeBtnStat.topLeft = true;
            }
            if (target.classList.contains('e-rte-topRight')) {
                this.resizeBtnStat.topRight = true;
            }
            if (target.classList.contains('e-rte-botLeft')) {
                this.resizeBtnStat.botLeft = true;
            }
            if (target.classList.contains('e-rte-botRight')) {
                this.resizeBtnStat.botRight = true;
            }
            if (Browser.isDevice && this.parent.getEditPanel().contains(this.imgResizeDiv) &&
                !this.imgResizeDiv.classList.contains('e-mob-span')) {
                addClass([this.imgResizeDiv], 'e-mob-span');
            }
            else {
                var args = { requestType: 'Images' };
                if (this.parent.onResizeStartEnabled) {
                    this.parent.dotNetRef.invokeMethodAsync('ResizeStartEvent', args).then(function (resizeStartArgs) {
                        if (resizeStartArgs.cancel) {
                            _this.cancelResizeAction();
                        }
                    });
                }
            }
            EventHandler.add(this.parent.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);
        }
    };
    Image.prototype.resizing = function (e) {
        if (this.imgEle.offsetWidth >= this.getMaxWidth()) {
            this.imgEle.style.maxHeight = this.imgEle.offsetHeight + 'px';
        }
        var pageX = this.getPointX(e);
        var pageY = this.getPointY(e);
        var mouseX = (this.resizeBtnStat.botLeft || this.resizeBtnStat.topLeft) ? -(pageX - this.pageX) : (pageX - this.pageX);
        var mouseY = (this.resizeBtnStat.topLeft || this.resizeBtnStat.topRight) ? -(pageY - this.pageY) : (pageY - this.pageY);
        var width = parseInt(this.imgDupPos.width, 10) + mouseX;
        var height = parseInt(this.imgDupPos.height, 10) + mouseY;
        this.pageX = pageX;
        this.pageY = pageY;
        if (this.resizeBtnStat.botRight) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
        else if (this.resizeBtnStat.botLeft) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
        else if (this.resizeBtnStat.topRight) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
        else if (this.resizeBtnStat.topLeft) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
    };
    Image.prototype.resizeEnd = function (e) {
        this.resizeBtnInit();
        this.imgEle.parentElement.style.cursor = 'auto';
        if (Browser.isDevice) {
            removeClass([e.target.parentElement], 'e-mob-span');
        }
        var args = { requestType: 'Images' };
        if (this.parent.onResizeStopEnabled) {
            this.parent.dotNetRef.invokeMethodAsync('ResizeStopEvent', args);
        }
        this.parent.formatter.editorManager.observer.on(events.checkUndo, this.undoStack, this);
        this.parent.formatter.saveData();
    };
    Image.prototype.dragStart = function (e) {
        if (e.target.nodeName === 'IMG') {
            this.parent.dotNetRef.invokeMethodAsync('ActionBeginEvent', e).then(function (actionBeginArgs) {
                if (actionBeginArgs.cancel) {
                    e.preventDefault();
                }
                else {
                    e.dataTransfer.effectAllowed = 'copyMove';
                    e.target.classList.add(classes.CLS_RTE_DRAG_IMAGE);
                }
            });
        }
        else {
            return true;
        }
    };
    ;
    Image.prototype.dragOver = function (e) {
        if ((Browser.info.name === 'edge' && e.dataTransfer.items[0].type.split('/')[0].indexOf('image') > -1) ||
            (Browser.isIE && e.dataTransfer.types[0] === 'Files')) {
            e.preventDefault();
        }
        else {
            return true;
        }
    };
    ;
    Image.prototype.dragEnter = function (e) {
        e.dataTransfer.dropEffect = 'copy';
        e.preventDefault();
    };
    ;
    Image.prototype.dragDrop = function (e) {
        var _this = this;
        this.imageDragArgs = e;
        this.dropFiles = e.dataTransfer.files;
        var imgElement = this.parent.inputElement.ownerDocument.querySelector('.' + classes.CLS_RTE_DRAG_IMAGE);
        if (imgElement && imgElement.tagName === 'IMG') {
            e.preventDefault();
            if (e.dataTransfer.files.length <= 0) {
                this.parent.dotNetRef.invokeMethodAsync('ActionBeginEvent', e).then(function (actionBeginArgs) {
                    if (!actionBeginArgs.cancel) {
                        if (closest(e.target, '#' + _this.rteId + '_toolbar') ||
                            _this.parent.inputElement.contentEditable === 'false') {
                            return;
                        }
                        if (_this.parent.element.querySelector('.' + classes.CLS_IMG_RESIZE)) {
                            detach(_this.imgResizeDiv);
                        }
                        _this.selectRange(e);
                        var uploadArea = _this.parent.element.querySelector('.' + classes.CLS_DROPAREA);
                        if (uploadArea) {
                            return;
                        }
                        _this.insertDragImage(e, _this.dropFiles);
                    }
                });
            }
        }
        else {
            return true;
        }
    };
    Image.prototype.destroy = function () {
        this.prevSelectedImgEle = undefined;
        this.removeEventListener();
    };
    return Image;
}());
export { Image };
