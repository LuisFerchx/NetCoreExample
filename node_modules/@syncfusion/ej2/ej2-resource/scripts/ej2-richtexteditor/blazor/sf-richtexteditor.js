import { SfRichTextEditor } from './sf-richtexteditor-fn';
var RichTextEditor = {
    initialize: function (element, options, dotnetRef) {
        if (element) {
            new SfRichTextEditor(element, options, dotnetRef);
            element.blazor__instance.initialize();
        }
    },
    updateProperties: function (element, options) {
        if (element) {
            element.blazor__instance.updateContext(options);
        }
    },
    setPanelValue: function (element, value) {
        if (element) {
            element.blazor__instance.setPanelValue(value);
        }
    },
    toolbarItemClick: function (element, args, id, targetType) {
        if (element) {
            element.blazor__instance.toolbarItemClick(args, id, targetType);
        }
    },
    toolbarClick: function (element, id) {
        if (element) {
            element.blazor__instance.toolbarClick(id);
        }
    },
    dropDownBeforeOpen: function (element, args) {
        if (element) {
            element.blazor__instance.dropDownBeforeOpen(args);
        }
    },
    dropDownClose: function (element, args) {
        if (element) {
            element.blazor__instance.dropDownClose(args);
        }
    },
    dropDownButtonItemSelect: function (element, args) {
        if (element) {
            element.blazor__instance.dropDownSelect(args);
        }
    },
    colorDropDownBeforeOpen: function (element) {
        if (element) {
            element.blazor__instance.colorDropDownBeforeOpen();
        }
    },
    colorIconSelected: function (element, args, value) {
        if (element) {
            element.blazor__instance.colorIconSelected(args, value);
        }
    },
    colorPickerChanged: function (element, args, value) {
        if (element) {
            element.blazor__instance.colorChanged(args, value);
        }
    },
    cancelLinkDialog: function (element) {
        if (element) {
            element.blazor__instance.cancelLinkDialog();
        }
    },
    cancelImageDialog: function (element) {
        if (element) {
            element.blazor__instance.cancelImageDialog();
        }
    },
    linkDialogClosed: function (element) {
        if (element) {
            element.blazor__instance.linkDialogClosed();
        }
    },
    dialogClosed: function (element, type) {
        if (element) {
            element.blazor__instance.dialogClosed(type);
        }
    },
    insertLink: function (element, args) {
        if (element) {
            element.blazor__instance.insertLink(args);
        }
    },
    invokeImageBrowse: function (element) {
        if (element) {
            element.blazor__instance.invokeImageBrowse();
        }
    },
    countCalculate: function (element) {
        if (element) {
            element.blazor__instance.countCalculate();
        }
    },
    imageRemoving: function (element) {
        if (element) {
            element.blazor__instance.imageRemoving();
        }
    },
    uploadSuccess: function (element, url, altText) {
        if (element) {
            element.blazor__instance.uploadSuccess(url, altText);
        }
    },
    imageSelected: function (element) {
        if (element) {
            element.blazor__instance.imageSelected();
        }
    },
    imageUploadComplete: function (element, base64Str, altText) {
        if (element) {
            element.blazor__instance.imageUploadComplete(base64Str, altText);
        }
    },
    imageUploadChange: function (element, url, isStream) {
        if (element) {
            element.blazor__instance.imageUploadChange(url, isStream);
        }
    },
    dropUploadChange: function (element, url, isStream) {
        if (element) {
            element.blazor__instance.dropUploadChange(url, isStream);
        }
    },
    insertImage: function (element) {
        if (element) {
            element.blazor__instance.insertImage();
        }
    },
    imageDialogOpened: function (element) {
        if (element) {
            element.blazor__instance.imageDialogOpened();
        }
    },
    imageDialogClosed: function (element) {
        if (element) {
            element.blazor__instance.imageDialogClosed();
        }
    },
    propertyChangeHandler: function (element, option) {
        if (element) {
            element.blazor__instance.propertyChangeHandler(option);
        }
    },
    insertTable: function (element, row, column) {
        if (element) {
            element.blazor__instance.insertTable(row, column);
        }
    },
    applyTableProperties: function (element, model) {
        if (element) {
            element.blazor__instance.applyTableProperties(model);
        }
    },
    createTablePopupOpened: function (element) {
        if (element) {
            element.blazor__instance.createTablePopupOpened();
        }
    },
    pasteContent: function (element, pasteOption) {
        if (element) {
            element.blazor__instance.pasteContent(pasteOption);
        }
    },
    imageDropInitialized: function (element, isStream) {
        if (element) {
            element.blazor__instance.imageDropInitialized(isStream);
        }
    },
    preventEditable: function (element) {
        if (element) {
            element.blazor__instance.preventEditable();
        }
    },
    enableEditable: function (element) {
        if (element) {
            element.blazor__instance.enableEditable();
        }
    },
    removeDroppedImage: function (element) {
        if (element) {
            element.blazor__instance.removeDroppedImage();
        }
    },
    dropUploadSuccess: function (element, url, altText) {
        if (element) {
            element.blazor__instance.dropUploadSuccess(url, altText);
        }
    },
    executeCommand: function (element, commandName, value, option) {
        if (element) {
            element.blazor__instance.executeCommand(commandName, value, option);
        }
    },
    getCharCount: function (element) {
        return element && element.blazor__instance.getCharCount();
    },
    focusIn: function (element) {
        return element && element.blazor__instance.focusIn();
    },
    focusOut: function (element) {
        return element && element.blazor__instance.focusOut();
    },
    getContent: function (element) {
        return element && element.blazor__instance.getContent();
    },
    getHtml: function (element) {
        return element && element.blazor__instance.getHtml();
    },
    getSelectedHtml: function (element) {
        return element && element.blazor__instance.getSelectedHtml();
    },
    getSelection: function (element) {
        return element && element.blazor__instance.getSelection();
    },
    getText: function (element) {
        return element && element.blazor__instance.getText();
    },
    print: function (element) {
        return element && element.blazor__instance.print();
    },
    refreshUI: function (element) {
        return element && element.blazor__instance.refreshUI();
    },
    sanitizeHtml: function (element, value) {
        return element && element.blazor__instance.sanitizeHtml(value);
    },
    selectAll: function (element) {
        return element && element.blazor__instance.selectAll();
    },
    selectRange: function (element, range) {
        return element && element.blazor__instance.selectRange(range);
    },
    showFullScreen: function (element) {
        return element && element.blazor__instance.showFullScreen();
    },
    showSourceCode: function (element) {
        return element && element.blazor__instance.showSourceCode();
    },
    insertAlt: function (element, altText) {
        return element && element.blazor__instance.insertAlt(altText);
    },
    insertSize: function (element, width, height) {
        return element && element.blazor__instance.insertSize(width, height);
    },
    insertImageLink: function (element, url, target) {
        return element && element.blazor__instance.insertImageLink(url, target);
    },
    updateContentHeight: function (element) {
        return element && element.blazor__instance.setContentHeight();
    },
    saveSelection: function (element) {
        if (element) {
            element.blazor__instance.saveSelection();
        }
    },
    restoreSelection: function (element) {
        if (element) {
            element.blazor__instance.restoreSelection();
        }
    },
    getXhtml: function (element) {
        return element.blazor__instance.getXhtml();
    },
    destroy: function (element) {
        if (element) {
            element.blazor__instance.destroy();
        }
    }
};
export default RichTextEditor;
