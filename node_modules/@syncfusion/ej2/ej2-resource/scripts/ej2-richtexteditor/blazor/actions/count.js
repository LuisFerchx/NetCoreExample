import { isNullOrUndefined } from '@syncfusion/ej2-base';
import * as events from '../constant';
import { CLS_WARNING, CLS_ERROR, CLS_COUNT } from '../classes';
var Count = (function () {
    function Count(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Count.prototype.renderCount = function () {
        if (this.parent.showCharCount) {
            this.addEventListener();
            this.countElement = this.parent.element.querySelector('.' + CLS_COUNT);
            this.appendCount();
            if (this.parent.maxLength !== -1) {
                this.charCountBackground(this.htmlLength);
            }
        }
    };
    Count.prototype.appendCount = function () {
        this.countElement = this.parent.element.querySelector('.' + CLS_COUNT);
        var htmlText = this.parent.editorMode === 'Markdown' ? this.parent.getEditPanel().value.trim() :
            this.parent.getEditPanel().textContent.trim();
        this.htmlLength = htmlText.length;
        var string = this.parent.maxLength === -1 ? this.htmlLength : this.htmlLength + ' / ' + this.parent.maxLength;
        this.countElement.innerHTML = string;
    };
    Count.prototype.charCountBackground = function (htmlLength) {
        this.countElement = this.parent.element.querySelector('.' + CLS_COUNT);
        var percentage = (htmlLength / this.parent.maxLength) * 100;
        if (percentage < 85) {
            this.countElement.classList.remove(CLS_WARNING);
            this.countElement.classList.remove(CLS_ERROR);
        }
        else if (percentage > 85 && percentage <= 90) {
            this.countElement.classList.remove(CLS_ERROR);
            this.countElement.classList.add(CLS_WARNING);
        }
        else if (percentage > 90) {
            this.countElement.classList.remove(CLS_WARNING);
            this.countElement.classList.add(CLS_ERROR);
        }
    };
    Count.prototype.refresh = function () {
        if (!isNullOrUndefined(this.parent.element) && this.parent.showCharCount) {
            this.appendCount();
            if (this.parent.maxLength !== -1) {
                this.charCountBackground(this.htmlLength);
            }
        }
    };
    Count.prototype.destroy = function () {
        this.countElement = null;
        this.removeEventListener();
    };
    Count.prototype.toggle = function (e) {
        if (this.parent.showCharCount) {
            this.countElement.style.display = (e.member === 'viewSource') ? 'none' : 'block';
        }
    };
    Count.prototype.addEventListener = function () {
        this.parent.observer.on(events.initialEnd, this.renderCount, this);
        this.parent.observer.on(events.keyUp, this.refresh, this);
        this.parent.observer.on(events.count, this.refresh, this);
        this.parent.observer.on(events.refreshBegin, this.refresh, this);
        this.parent.observer.on(events.mouseDown, this.refresh, this);
        this.parent.observer.on(events.destroy, this.destroy, this);
        this.parent.observer.on(events.sourceCode, this.toggle, this);
        this.parent.observer.on(events.updateSource, this.toggle, this);
    };
    Count.prototype.removeEventListener = function () {
        this.parent.observer.off(events.initialEnd, this.renderCount);
        this.parent.observer.off(events.keyUp, this.refresh);
        this.parent.observer.off(events.refreshBegin, this.refresh);
        this.parent.observer.off(events.count, this.refresh);
        this.parent.observer.off(events.mouseDown, this.refresh);
        this.parent.observer.off(events.destroy, this.destroy);
        this.parent.observer.off(events.sourceCode, this.toggle);
        this.parent.observer.off(events.updateSource, this.toggle);
    };
    return Count;
}());
export { Count };
