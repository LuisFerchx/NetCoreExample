import { isNullOrUndefined } from '@syncfusion/ej2-base';
import { getScrollableParent } from '@syncfusion/ej2-popups';
import * as events from '../constant';
import { addClass, removeClass } from '@syncfusion/ej2-base';
import { CLS_FULL_SCREEN, CLS_RTE_OVERFLOW } from '../classes';
var FullScreen = (function () {
    function FullScreen(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    FullScreen.prototype.showFullScreen = function (event) {
        var _this = this;
        if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown') {
            this.parent.quickToolbarModule.hideQuickToolbars();
        }
        this.scrollableParent = getScrollableParent(this.parent.element);
        if (this.parent.actionBeginEnabled) {
            this.parent.dotNetRef.invokeMethodAsync(events.actionBeginEvent, { requestType: 'Maximize', cancel: false }).then(function (fullScreenArgs) {
                if (!fullScreenArgs.cancel) {
                    _this.showActionBeginCallback();
                }
            });
        }
        else {
            this.showActionBeginCallback();
        }
    };
    FullScreen.prototype.showActionBeginCallback = function () {
        this.toggleParentOverflow(true);
        this.parent.setContentHeight();
        this.invokeActionComplete('Maximize');
    };
    FullScreen.prototype.hideFullScreen = function (event) {
        var _this = this;
        if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown') {
            this.parent.quickToolbarModule.hideQuickToolbars();
        }
        var elem = document.querySelectorAll('.' + CLS_RTE_OVERFLOW);
        for (var i = 0; i < elem.length; i++) {
            removeClass([elem[i]], [CLS_RTE_OVERFLOW]);
        }
        if (this.parent.actionBeginEnabled) {
            this.parent.dotNetRef.invokeMethodAsync(events.actionBeginEvent, { requestType: 'Minimize', cancel: false }).then(function (fullScreenArgs) {
                if (!fullScreenArgs.cancel) {
                    _this.hideActionBeginCallback();
                }
            });
        }
        else {
            this.hideActionBeginCallback();
        }
    };
    FullScreen.prototype.hideActionBeginCallback = function () {
        this.parent.setContentHeight();
        this.invokeActionComplete('Minimize');
    };
    FullScreen.prototype.invokeActionComplete = function (type) {
        if (this.parent.actionCompleteEnabled) {
            this.parent.dotNetRef.invokeMethodAsync(events.actionCompleteEvent, { requestType: type });
        }
    };
    FullScreen.prototype.toggleParentOverflow = function (isAdd) {
        if (isNullOrUndefined(this.scrollableParent)) {
            return;
        }
        for (var i = 0; i < this.scrollableParent.length; i++) {
            if (this.scrollableParent[i].nodeName === '#document') {
                var elem = document.querySelector('body');
                addClass([elem], [CLS_RTE_OVERFLOW]);
            }
            else {
                var elem = this.scrollableParent[i];
                addClass([elem], [CLS_RTE_OVERFLOW]);
            }
        }
    };
    FullScreen.prototype.onKeyDown = function (event) {
        var originalEvent = event.args;
        switch (originalEvent.action) {
            case 'full-screen':
                this.parent.dotNetRef.invokeMethodAsync(events.showFullScreenClient);
                this.showFullScreen(event.args);
                originalEvent.preventDefault();
                break;
            case 'escape':
                this.parent.dotNetRef.invokeMethodAsync(events.hideFullScreenClient);
                this.hideFullScreen(event.args);
                originalEvent.preventDefault();
                break;
        }
    };
    FullScreen.prototype.addEventListener = function () {
        this.parent.observer.on(events.enableFullScreen, this.showFullScreen, this);
        this.parent.observer.on(events.disableFullScreen, this.hideFullScreen, this);
        this.parent.observer.on(events.keyDown, this.onKeyDown, this);
        this.parent.observer.on(events.destroy, this.destroy, this);
    };
    FullScreen.prototype.removeEventListener = function () {
        this.parent.observer.off(events.enableFullScreen, this.showFullScreen);
        this.parent.observer.off(events.disableFullScreen, this.hideFullScreen);
        this.parent.observer.off(events.keyDown, this.onKeyDown);
        this.parent.observer.off(events.destroy, this.destroy);
    };
    FullScreen.prototype.destroy = function () {
        if (this.parent.element.classList.contains(CLS_FULL_SCREEN)) {
            this.toggleParentOverflow(false);
        }
        var elem = document.querySelectorAll('.' + CLS_RTE_OVERFLOW);
        for (var i = 0; i < elem.length; i++) {
            removeClass([elem[i]], [CLS_RTE_OVERFLOW]);
        }
        this.removeEventListener();
    };
    return FullScreen;
}());
export { FullScreen };
