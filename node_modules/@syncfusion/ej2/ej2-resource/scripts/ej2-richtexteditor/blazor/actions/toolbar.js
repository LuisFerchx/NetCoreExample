import { Browser, selectAll, addClass, removeClass, select, closest, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';
import { setStyleAttribute, isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';
import * as events from '../constant';
import * as classes from '../classes';
import { isIDevice, setToolbarStatus } from '../util';
import { ToolbarType } from '../../src/rich-text-editor/base/enum';
var Toolbar = (function () {
    function Toolbar(parent) {
        this.isToolbar = false;
        this.isTransformChild = false;
        this.parent = parent;
        this.tbElement = this.parent.getToolbarElement();
        this.checkIsTransformChild();
        this.addEventListener();
    }
    Toolbar.prototype.getToolbarHeight = function () {
        return this.parent.getToolbar().offsetHeight;
    };
    Toolbar.prototype.getExpandTBarPopHeight = function () {
        var popHeight = 0;
        if (this.parent.toolbarSettings.type === ToolbarType.Expand &&
            this.parent.getToolbar().classList.contains(classes.CLS_EXTENDED_TOOLBAR)) {
            var expandPopup = select('.' + classes.CLS_TB_EXTENDED, this.parent.getToolbar());
            if (expandPopup && this.parent.getToolbar().classList.contains(classes.CLS_EXPAND_OPEN)
                || expandPopup && expandPopup.classList.contains(classes.CLS_POPUP_OPEN)) {
                addClass([expandPopup], [classes.CLS_VISIBLE]);
                popHeight = popHeight + expandPopup.offsetHeight;
                removeClass([expandPopup], [classes.CLS_VISIBLE]);
            }
            else {
                removeClass([this.parent.getToolbar()], [classes.CLS_EXPAND_OPEN]);
            }
        }
        return popHeight;
    };
    Toolbar.prototype.updateToolbarStatus = function (args) {
        if (!this.parent.getToolbarElement() || (this.parent.inlineMode.enable && (isIDevice() || !Browser.isDevice))) {
            return;
        }
        var options = {
            args: args,
            dropDownModule: null,
            parent: this.parent,
            tbElements: selectAll('.' + classes.CLS_TB_ITEM, this.parent.getToolbarElement()),
            tbItems: this.parent.toolbarSettings.items
        };
        setToolbarStatus(options, (this.parent.inlineMode.enable ? true : false));
    };
    Toolbar.prototype.checkIsTransformChild = function () {
        this.isTransformChild = false;
        var transformElements = selectAll('[style*="transform"]', document);
        for (var i = 0; i < transformElements.length; i++) {
            if (!isNOU(transformElements[i].contains) && transformElements[i].contains(this.parent.element)) {
                this.isTransformChild = true;
                break;
            }
        }
    };
    Toolbar.prototype.toggleFloatClass = function (e) {
        var topValue;
        var isBody = false;
        var isFloat = false;
        var scrollParent;
        var floatOffset = this.parent.floatingToolbarOffset;
        if (e && this.parent.iframeSettings.enable && this.parent.inputElement.ownerDocument === e.target) {
            scrollParent = e.target.body;
        }
        else if (e && e.target !== document) {
            scrollParent = e.target;
        }
        else {
            isBody = true;
            scrollParent = document.body;
        }
        var tbHeight = this.getToolbarHeight() + this.getExpandTBarPopHeight();
        if (this.isTransformChild) {
            topValue = 0;
            var scrollParentRelativeTop = 0;
            var trgHeight = this.parent.element.offsetHeight;
            if (isBody) {
                var bodyStyle = window.getComputedStyle(scrollParent);
                scrollParentRelativeTop = parseFloat(bodyStyle.marginTop.split('px')[0]) + parseFloat(bodyStyle.paddingTop.split('px')[0]);
            }
            var targetTop = this.parent.element.getBoundingClientRect().top;
            var scrollParentYOffset = (Browser.isMSPointer && isBody) ? window.pageYOffset : scrollParent.parentElement.scrollTop;
            var scrollParentRect = scrollParent.getBoundingClientRect();
            var scrollParentTop = (!isBody) ? scrollParentRect.top : (scrollParentRect.top + scrollParentYOffset);
            var outOfRange = ((targetTop - ((!isBody) ? scrollParentTop : 0)) + trgHeight > tbHeight + floatOffset) ? false : true;
            if (targetTop > (scrollParentTop + floatOffset) || targetTop < -trgHeight || ((targetTop < 0) ? outOfRange : false)) {
                isFloat = false;
                removeClass([this.tbElement], [classes.CLS_TB_ABS_FLOAT]);
            }
            else if (targetTop < (scrollParentTop + floatOffset)) {
                if (targetTop < 0) {
                    topValue = (-targetTop) + scrollParentTop;
                }
                else {
                    topValue = scrollParentTop - targetTop;
                }
                topValue = (isBody) ? topValue - scrollParentRelativeTop : topValue;
                addClass([this.tbElement], [classes.CLS_TB_ABS_FLOAT]);
                isFloat = true;
            }
        }
        else {
            var parent_1 = this.parent.element.getBoundingClientRect();
            if (window.innerHeight < parent_1.top) {
                return;
            }
            topValue = (e && e.target !== document) ? scrollParent.getBoundingClientRect().top : 0;
            if ((parent_1.bottom < (floatOffset + tbHeight + topValue)) || parent_1.bottom < 0 || parent_1.top > floatOffset + topValue) {
                isFloat = false;
            }
            else if (parent_1.top < floatOffset) {
                isFloat = true;
            }
        }
        if (!isFloat) {
            removeClass([this.tbElement], [classes.CLS_TB_FLOAT]);
            setStyleAttribute(this.tbElement, { top: 0 + 'px', width: '100%' });
        }
        else {
            addClass([this.tbElement], [classes.CLS_TB_FLOAT]);
            setStyleAttribute(this.tbElement, { width: this.parent.element.offsetWidth + 'px', top: (floatOffset + topValue) + 'px' });
        }
    };
    Toolbar.prototype.getDOMVisibility = function (el) {
        if (!el.offsetParent && el.offsetWidth === 0 && el.offsetHeight === 0) {
            return false;
        }
        return true;
    };
    Toolbar.prototype.showFixedTBar = function () {
        this.tbElement = this.parent.getToolbarElement();
        addClass([this.tbElement], [classes.CLS_SHOW]);
        if (Browser.isIos) {
            addClass([this.tbElement], [classes.CLS_TB_IOS_FIX]);
        }
    };
    Toolbar.prototype.hideFixedTBar = function () {
        this.tbElement = this.parent.getToolbarElement();
        (!this.isToolbar) ? removeClass([this.tbElement], [classes.CLS_SHOW, classes.CLS_TB_IOS_FIX]) : this.isToolbar = false;
    };
    Toolbar.prototype.dropDownBeforeOpenHandler = function () {
        this.isToolbar = true;
    };
    Toolbar.prototype.addEventListener = function () {
        this.parent.observer.on(events.scroll, this.scrollHandler, this);
        this.parent.observer.on(events.refreshBegin, this.onRefresh, this);
        this.parent.observer.on(events.bindOnEnd, this.toolbarBindEvent, this);
        this.parent.observer.on(events.mouseDown, this.mouseDownHandler, this);
        this.parent.observer.on(events.focusChange, this.focusChangeHandler, this);
        this.parent.observer.on(events.toolbarUpdated, this.updateToolbarStatus, this);
        this.parent.observer.on(events.beforeDropDownOpen, this.dropDownBeforeOpenHandler, this);
    };
    Toolbar.prototype.removeEventListener = function () {
        this.parent.observer.off(events.scroll, this.scrollHandler);
        this.parent.observer.off(events.refreshBegin, this.onRefresh);
        this.parent.observer.off(events.bindOnEnd, this.toolbarBindEvent);
        this.parent.observer.off(events.mouseDown, this.mouseDownHandler);
        this.parent.observer.off(events.focusChange, this.focusChangeHandler);
        this.parent.observer.off(events.toolbarUpdated, this.updateToolbarStatus);
        this.parent.observer.off(events.beforeDropDownOpen, this.dropDownBeforeOpenHandler);
    };
    Toolbar.prototype.wireEvents = function () {
        if (this.parent.inlineMode.enable && isIDevice()) {
            return;
        }
        this.tbElement = this.parent.getToolbarElement();
        EventHandler.add(this.tbElement, 'focusin', this.tbFocusHandler, this);
        EventHandler.add(this.tbElement, 'keydown', this.tbKeydownHandler, this);
    };
    Toolbar.prototype.unWireEvents = function () {
        EventHandler.remove(this.tbElement, 'focusin', this.tbFocusHandler);
        EventHandler.remove(this.tbElement, 'keydown', this.tbKeydownHandler);
    };
    Toolbar.prototype.toolbarBindEvent = function () {
        if (!this.parent.inlineMode.enable) {
            this.keyBoardModule = new KeyboardEvents(this.parent.getToolbarElement(), {
                keyAction: this.toolBarKeyDown.bind(this), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'
            });
        }
    };
    Toolbar.prototype.onRefresh = function () {
        this.parent.dotNetRef.invokeMethodAsync(events.refreshToolbarOverflow);
        this.parent.setContentHeight('', true);
    };
    Toolbar.prototype.tbFocusHandler = function (e) {
        var activeElm = document.activeElement;
        var isToolbaractive = closest(activeElm, '.' + classes.CLS_TOOLBAR);
        if (activeElm === this.parent.getToolbarElement() || isToolbaractive === this.parent.getToolbarElement()) {
            var toolbarItem = this.parent.getToolbarElement().querySelectorAll('.' + classes.CLS_EXPENDED_NAV);
            for (var i = 0; i < toolbarItem.length; i++) {
                if (isNOU(this.parent.getToolbarElement().querySelector('.' + classes.CLS_INSERT_TABLE_BTN))) {
                    toolbarItem[i].setAttribute('tabindex', '0');
                }
                else {
                    toolbarItem[i].setAttribute('tabindex', '1');
                }
            }
        }
    };
    Toolbar.prototype.tbKeydownHandler = function (e) {
        if (e.target.classList.contains(classes.CLS_DROP_DOWN_BTN) ||
            e.target.getAttribute('id') === this.parent.id + events.toolbarCreateTable) {
            e.target.setAttribute('tabindex', '0');
        }
    };
    Toolbar.prototype.toolBarKeyDown = function (e) {
        switch (e.action) {
            case 'escape':
                this.parent.getEditPanel().focus();
                break;
        }
    };
    Toolbar.prototype.scrollHandler = function (e) {
        if (!this.parent.inlineMode.enable) {
            this.tbElement = this.parent.getToolbarElement();
            if (this.parent.toolbarSettings.enableFloating && this.getDOMVisibility(this.tbElement)) {
                this.toggleFloatClass(e.args);
            }
        }
    };
    Toolbar.prototype.mouseDownHandler = function () {
        if (Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {
            this.showFixedTBar();
        }
    };
    Toolbar.prototype.focusChangeHandler = function () {
        if (Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {
            this.isToolbar = false;
            this.hideFixedTBar();
        }
    };
    return Toolbar;
}());
export { Toolbar };
