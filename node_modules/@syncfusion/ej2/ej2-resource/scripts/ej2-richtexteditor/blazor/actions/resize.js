import { EventHandler, Browser, isNullOrUndefined, detach, createElement } from '@syncfusion/ej2-base';
import * as events from '../constant';
import { CLS_RTE_RES_EAST, CLS_RTE_RES_HANDLE, CLS_RTE_RES_CNT, CLS_ICONS } from '../classes';
var Resize = (function () {
    function Resize(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Resize.prototype.addEventListener = function () {
        this.parent.observer.on(events.initialEnd, this.renderResizable, this);
        this.parent.observer.on(events.destroy, this.destroy, this);
    };
    Resize.prototype.renderResizable = function () {
        if (this.parent.enableResize) {
            this.resizer = createElement('div', {
                id: this.parent.id + events.resizeID, className: CLS_ICONS
                    + ' ' + CLS_RTE_RES_HANDLE + ' ' + CLS_RTE_RES_EAST
            });
            this.parent.element.classList.add(CLS_RTE_RES_CNT);
            this.parent.element.appendChild(this.resizer);
            this.parent.setContentHeight();
            this.touchStartEvent = (Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';
            EventHandler.add(this.resizer, 'mousedown', this.resizeStart, this);
            EventHandler.add(this.resizer, this.touchStartEvent, this.resizeStart, this);
        }
    };
    Resize.prototype.resizeStart = function (e) {
        var _this = this;
        if (e.cancelable) {
            e.preventDefault();
        }
        this.wireResizeEvents();
        this.parent.observer.notify(events.resizeInitialized, {});
        var args = { requestType: 'editor' };
        if (this.parent.onResizeStartEnabled) {
            this.parent.dotNetRef.invokeMethodAsync(events.resizeStartEvent, args).then(function (resizeStartArgs) {
                if (resizeStartArgs.cancel) {
                    _this.unwireResizeEvents();
                }
            });
        }
    };
    Resize.prototype.performResize = function (e) {
        var args = { requestType: 'editor' };
        var boundRect = this.parent.element.getBoundingClientRect();
        if (this.isMouseEvent(e)) {
            this.parent.element.style.height = e.clientY - boundRect.top + 'px';
            this.parent.element.style.width = e.clientX - boundRect.left + 'px';
        }
        else {
            var eventType = Browser.info.name !== 'msie' ? e.touches[0] : e;
            this.parent.element.style.height = eventType.clientY - boundRect.top + 'px';
            this.parent.element.style.width = eventType.clientX - boundRect.left + 'px';
        }
        this.parent.refresh();
    };
    Resize.prototype.stopResize = function (e) {
        this.parent.refresh();
        this.unwireResizeEvents();
        var args = { requestType: 'editor' };
        if (this.parent.onResizeStopEnabled) {
            this.parent.dotNetRef.invokeMethodAsync(events.resizeStopEvent, args);
        }
    };
    Resize.prototype.getEventType = function (e) {
        return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';
    };
    Resize.prototype.isMouseEvent = function (e) {
        var isMouse = false;
        if (this.getEventType(e.type) === 'mouse' || (!isNullOrUndefined(e.pointerType) &&
            this.getEventType(e.pointerType) === 'mouse')) {
            isMouse = true;
        }
        return isMouse;
    };
    Resize.prototype.wireResizeEvents = function () {
        EventHandler.add(document, 'mousemove', this.performResize, this);
        EventHandler.add(document, 'mouseup', this.stopResize, this);
        this.touchMoveEvent = (Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';
        this.touchEndEvent = (Browser.info.name === 'msie') ? 'pointerup' : 'touchend';
        EventHandler.add(document, this.touchMoveEvent, this.performResize, this);
        EventHandler.add(document, this.touchEndEvent, this.stopResize, this);
    };
    Resize.prototype.unwireResizeEvents = function () {
        EventHandler.remove(document, 'mousemove', this.performResize);
        EventHandler.remove(document, 'mouseup', this.stopResize);
        EventHandler.remove(document, this.touchMoveEvent, this.performResize);
        EventHandler.remove(document, this.touchEndEvent, this.stopResize);
    };
    Resize.prototype.destroy = function () {
        this.removeEventListener();
    };
    Resize.prototype.removeEventListener = function () {
        this.parent.observer.off(events.initialEnd, this.renderResizable);
        this.parent.element.classList.remove(CLS_RTE_RES_CNT);
        EventHandler.remove(this.resizer, 'mousedown', this.resizeStart);
        EventHandler.remove(this.resizer, this.touchStartEvent, this.resizeStart);
        if (this.resizer) {
            detach(this.resizer);
        }
        this.parent.observer.off(events.destroy, this.destroy);
    };
    return Resize;
}());
export { Resize };
