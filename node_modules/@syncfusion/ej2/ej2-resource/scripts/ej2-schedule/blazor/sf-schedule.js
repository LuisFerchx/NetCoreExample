import { isNullOrUndefined, closest, loadCldr } from '@syncfusion/ej2-base';
import { SfSchedule } from './schedule';
import * as util from './schedule/base/util';
import * as cls from './schedule/base/css-constant';
var Schedule = {
    initialize: function (element, options, viewOptions, dotnetRef) {
        if (element) {
            options.selectedDate = new Date(options.selectedDate);
            options.minDate = new Date(options.minDate);
            options.maxDate = new Date(options.maxDate);
            if (isNullOrUndefined(viewOptions.group.resources)) {
                viewOptions.group.resources = [];
            }
            if (element.blazor__instance) {
                element.blazor__instance.options = options;
                element.blazor__instance.activeViewOptions = viewOptions;
                element.blazor__instance.render(true);
                element.blazor__instance.setPersistence();
            }
            else {
                new SfSchedule(element, options, viewOptions, dotnetRef);
                dotnetRef.invokeMethodAsync('TriggerCreatedEvent');
            }
        }
    },
    loadCldr: function (cultureData) {
        loadCldr(JSON.parse(cultureData));
    },
    createCalendarPopup: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.createCalendarPopup();
        }
    },
    exportSave: function (fileName, fileType) {
        if (navigator.msSaveBlob) {
            var data = window.atob(fileType);
            var bytes = new Uint8Array(data.length);
            for (var i = 0; i < data.length; i++) {
                bytes[i] = data.charCodeAt(i);
            }
            var blob = new Blob([bytes.buffer], { type: 'application/octet-stream' });
            navigator.msSaveBlob(blob, fileName);
        }
        else {
            var link = document.createElement('a');
            link.download = fileName;
            link.href = 'data:application/octet-stream;base64,' + fileType;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    },
    exportToICS: function (icsString, fileName) {
        var buffer = new Blob([icsString], { type: 'data:text/calendar;charset=utf8' });
        fileName = (fileName || 'Calendar') + '.ics';
        if (navigator.msSaveBlob) {
            navigator.msSaveBlob(buffer, fileName);
        }
        else {
            var downloadLink_1 = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
            downloadLink_1.download = fileName;
            downloadLink_1.href = URL.createObjectURL(buffer);
            var event_1 = document.createEvent('MouseEvent');
            event_1.initEvent('click', true, true);
            downloadLink_1.dispatchEvent(event_1);
            setTimeout(function () {
                URL.revokeObjectURL(downloadLink_1.href);
                downloadLink_1.href = undefined;
            });
        }
    },
    scrollTo: function (element, hour, scrollDate) {
        if (element && element.blazor__instance) {
            element.blazor__instance.scrollTo(hour, scrollDate);
        }
    },
    destroy: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.destroy();
        }
    },
    validation: function (element, fieldName, isQuickPopup) {
        if (element && element.blazor__instance) {
            element.blazor__instance.getTooltipPosition(fieldName, isQuickPopup);
        }
    },
    createQuickPopup: function (element, guid, isServerBinding) {
        if (element && element.blazor__instance) {
            element.blazor__instance.createQuickPopup(guid, isServerBinding);
        }
    },
    adjustPopupPosition: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.adjustPopupPosition();
        }
    },
    closeQuickInfoPopup: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.onQuickPopupClose();
        }
    },
    createMoreEventPopup: function (element, clsName, dataDate) {
        if (element && element.blazor__instance) {
            element.blazor__instance.createMoreEventPopup(clsName, dataDate);
        }
    },
    moreEventPopupClose: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.onMoreEventPopupClose();
        }
    },
    dataReady: function styleAttribute(element, groupAdaptive, count, isScrollTop) {
        if (element && element.blazor__instance) {
            element.blazor__instance.uiStateValues.isGroupAdaptive = groupAdaptive;
            element.blazor__instance.dataReady(count, isScrollTop);
        }
    },
    beforeOpenEditor: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.beforeOpenEditor();
        }
    },
    scrollContentReady: function (element, updateHeight) {
        if (element && element.blazor__instance) {
            element.blazor__instance.scrollContentReady(updateHeight);
        }
    },
    scrollToResource: function (element, groupIndex, levelIndex) {
        if (element && element.blazor__instance) {
            element.blazor__instance.scrollToResource(groupIndex, levelIndex);
        }
    },
    printSchedule: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.print();
        }
    },
    inlineEdit: function (element, clickType, isTemplate, guid) {
        if (guid === void 0) { guid = null; }
        if (element && element.blazor__instance) {
            element.blazor__instance.inlineEdit(clickType, isTemplate, guid);
        }
    },
    setWorkHours: function (element, dates, start, end, groupIndex) {
        if (element && element.blazor__instance) {
            element.blazor__instance.setWorkHours(dates, start, end, groupIndex);
        }
    },
    resetWorkHours: function (element, dates, start, end, groupIndex) {
        if (element && element.blazor__instance) {
            element.blazor__instance.resetWorkHours(dates, start, end, groupIndex);
        }
    },
    getSelectedDetails: function (element, isEvent) {
        if (element && element.blazor__instance) {
            if (isEvent) {
                var eventGuid_1;
                var selectedElements = [].slice.call(element.querySelectorAll('.' + cls.APPOINTMENT_BORDER));
                selectedElements.forEach(function (ele) {
                    eventGuid_1.push(ele.getAttribute('data-guid'));
                });
                return JSON.stringify(eventGuid_1);
            }
            else {
                var selectedElements = element.blazor__instance.getSelectedElements();
                var clickArgs = element.blazor__instance.getCellDetails(selectedElements);
                clickArgs.startTime = util.addLocalOffset(clickArgs.startTime);
                clickArgs.endTime = util.addLocalOffset(clickArgs.endTime);
                return JSON.stringify(clickArgs);
            }
        }
        return null;
    },
    ctrlKeySelect: function (element, guid) {
        if (element && element.blazor__instance) {
            element.blazor__instance.ctrlKeySelect(guid);
        }
    },
    getTargetDetails: function (element, left, top, targetType) {
        if (element && element.blazor__instance) {
            var target = document.elementFromPoint(left, top);
            var targetElement = void 0;
            if (target && targetType === 'event') {
                targetElement = closest(target, '.' + cls.APPOINTMENT_CLASS);
                if (targetElement) {
                    return JSON.stringify(targetElement.getAttribute('data-guid'));
                }
            }
            else if (target && targetType === 'cell') {
                targetElement = closest(target, '.' + cls.HEADER_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' + cls.WORK_CELLS_CLASS);
                if (targetElement) {
                    var clickArgs = element.blazor__instance.getCellDetails(targetElement);
                    clickArgs.startTime = util.addLocalOffset(clickArgs.startTime);
                    clickArgs.endTime = util.addLocalOffset(clickArgs.endTime);
                    return JSON.stringify(clickArgs);
                }
            }
            else if (target && targetType === 'resource') {
                targetElement = closest(target, '.' + cls.RESOURCE_CELLS_CLASS);
                return JSON.stringify(targetElement.getAttribute('data-group-index'));
            }
            return null;
        }
        return null;
    }
};
export default Schedule;
