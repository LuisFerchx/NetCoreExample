import { Browser, isNullOrUndefined, Touch, formatUnit, remove, closest } from '@syncfusion/ej2-base';
import { EventHandler, Internationalization, removeClass, addClass, getElement, createElement } from '@syncfusion/ej2-base';
import { Popup, isCollide } from '@syncfusion/ej2-popups';
import { VerticalViews } from './schedule/renderer/vertical-view';
import { TimelineViews } from './schedule/renderer/timeline-view';
import { Month } from './schedule/renderer/month';
import { MonthAgenda } from './schedule/renderer/month-agenda';
import { TimelineMonth } from './schedule/renderer/timeline-month';
import { Year } from './schedule/renderer/year';
import { Agenda } from './schedule/renderer/agenda';
import { WorkCellInteraction } from './schedule/actions/work-cells';
import { KeyboardInteraction } from './schedule/actions/keyboard';
import { EventBase } from './schedule/event-renderer/event-base';
import * as cls from './schedule/base/css-constant';
import * as util from './schedule/base/util';
import { Resize } from './schedule/actions/resize';
import { DragAndDrop } from './schedule/actions/drag';
import { VirtualScroll } from './schedule/actions/virtual-scroll';
import { InlineEdit } from './schedule/event-renderer/inline-edit';
var SfSchedule = (function () {
    function SfSchedule(element, options, viewOptions, dotnetRef) {
        this.element = element;
        this.element.blazor__instance = this;
        this.dotNetRef = dotnetRef;
        this.options = options;
        this.activeViewOptions = viewOptions;
        this.isAdaptive = Browser.isDevice;
        this.uiStateValues = {
            expand: false, isInitial: true, left: 0, top: 0, isGroupAdaptive: false,
            isIgnoreOccurrence: false, groupIndex: 0, action: false, isBlock: false
        };
        this.render();
    }
    SfSchedule.prototype.render = function (isPrevent) {
        if (isPrevent === void 0) { isPrevent = false; }
        this.setHeight();
        this.workCellAction = new WorkCellInteraction(this);
        this.initializeLayout(this.options.currentView);
        this.eventBase = new EventBase(this);
        if (this.options.allowKeyboardInteraction && !this.keyboardInteractionModule) {
            this.keyboardInteractionModule = new KeyboardInteraction(this);
        }
        else if (!this.options.allowKeyboardInteraction && this.keyboardInteractionModule) {
            this.keyboardInteractionModule.destroy();
        }
        if (this.options.allowDragAndDrop) {
            this.dragAndDropModule = new DragAndDrop(this);
        }
        if (this.options.allowResizing) {
            this.resizeModule = new Resize(this);
        }
        if (this.options.allowInline) {
            this.inlineModule = new InlineEdit(this);
        }
        if (!isPrevent) {
            this.wireEvents();
        }
    };
    SfSchedule.prototype.initializeLayout = function (viewName) {
        if (this.activeView) {
            this.activeView.destroy();
        }
        switch (viewName) {
            case 'Day':
            case 'Week':
            case 'WorkWeek':
                this.activeView = new VerticalViews(this);
                break;
            case 'TimelineDay':
            case 'TimelineWorkWeek':
            case 'TimelineWeek':
                this.activeView = new TimelineViews(this);
                break;
            case 'Month':
                this.activeView = new Month(this);
                break;
            case 'MonthAgenda':
                this.activeView = new MonthAgenda(this);
                break;
            case 'TimelineMonth':
                this.activeView = new TimelineMonth(this);
                break;
            case 'Year':
            case 'TimelineYear':
                this.activeView = new Year(this);
                break;
            case 'Agenda':
                this.activeView = new Agenda(this);
                break;
        }
        if (!this.activeView) {
            return;
        }
        this.uiStateValues.isGroupAdaptive = this.isAdaptive && this.activeViewOptions.group.resources.length > 0 &&
            this.activeViewOptions.group.enableCompactView;
        if (this.virtualScrollModule) {
            this.virtualScrollModule = null;
        }
        if (this.options.currentView.indexOf('Timeline') !== -1 && this.activeViewOptions.allowVirtualScrolling
            && this.activeViewOptions.group.resources.length > 0 && !this.uiStateValues.isGroupAdaptive) {
            this.virtualScrollModule = new VirtualScroll(this);
            this.uiStateValues.top = 0;
        }
        this.globalize = new Internationalization(this.options.locale);
        this.activeView.getRenderDates();
        this.activeView.renderLayout();
    };
    SfSchedule.prototype.scrollContentReady = function (updateHeight) {
        if (this.virtualScrollModule) {
            if (updateHeight) {
                this.virtualScrollModule.updateVirtualTrackHeight(this.element.querySelector('.' + cls.VIRTUAL_TRACK_CLASS));
                var timeIndicator = this.element.querySelector('.' + cls.CURRENT_TIMELINE_CLASS);
                if (!isNullOrUndefined(timeIndicator)) {
                    timeIndicator.style.height =
                        this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS).offsetHeight + 'px';
                }
                var data = { cssProperties: this.getCssProperties() };
                this.onScrollUiUpdate(data);
                return;
            }
            this.virtualScrollModule.setTranslateValue();
        }
    };
    SfSchedule.prototype.scrollToResource = function (groupIndex, levelIndex) {
        var scrollElement = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        if (this.options.currentView.indexOf('Timeline') < 0 ||
            (this.options.currentView === 'TimelineYear' && this.activeViewOptions.orientation === 'Horizontal')) {
            levelIndex = this.activeViewOptions.group.byDate ? levelIndex + 1 : levelIndex;
            var offsetTarget = this.element.querySelectorAll('.' + cls.DATE_HEADER_WRAP_CLASS + ' tbody tr')[levelIndex];
            scrollElement.scrollLeft = offsetTarget.children[groupIndex].offsetLeft;
        }
        else {
            if (this.virtualScrollModule && this.options.currentView !== 'TimelineYear') {
                var virtual = this.element.querySelector('.e-virtual-track');
                var resWrap = this.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);
                var averageRowHeight = Math.round(virtual.offsetHeight / parseInt(resWrap.getAttribute('data-expanded-count'), 10));
                scrollElement.scrollTop = (groupIndex * averageRowHeight)
                    - (((this.virtualScrollModule.bufferCount - 1) * averageRowHeight));
                this.virtualScrollModule.virtualScrolling();
                if (this.options.rowAutoHeight) {
                    var td = this.element.querySelector("." + cls.WORK_CELLS_CLASS + "[data-group-index=\"" + groupIndex + "\"]");
                    if (td && !td.parentElement.classList.contains(cls.HIDDEN_CLASS)) {
                        scrollElement.scrollTop =
                            (scrollElement.scrollTop < td.offsetTop) ? td.offsetTop : scrollElement.scrollTop + td.offsetTop;
                    }
                }
                else {
                    scrollElement.scrollTop = (groupIndex * averageRowHeight);
                }
            }
            else {
                var td = this.element.querySelector("." + cls.WORK_CELLS_CLASS + "[data-group-index=\"" + groupIndex + "\"]");
                if (td && !td.parentElement.classList.contains(cls.HIDDEN_CLASS)) {
                    scrollElement.scrollTop = td.offsetTop;
                }
            }
        }
    };
    SfSchedule.prototype.dataReady = function (count, isScrollTop) {
        if (this.activeView) {
            var cloneElements = [].slice.call(this.element.querySelectorAll('.e-schedule-event-clone'));
            cloneElements.forEach(function (element) {
                remove(element);
            });
            this.activeView.onDataReady({}, count, isScrollTop);
        }
    };
    SfSchedule.prototype.isTimelineView = function () {
        return this.options.currentView.indexOf('Timeline') !== -1;
    };
    SfSchedule.prototype.isAllDayCell = function (td) {
        if (['Month', 'TimelineMonth', 'TimelineYear', 'MonthAgenda'].indexOf(this.options.currentView) > -1 ||
            td.classList.contains(cls.ALLDAY_CELLS_CLASS) ||
            td.classList.contains(cls.HEADER_CELLS_CLASS) || !this.activeViewOptions.timeScale.enable) {
            return true;
        }
        if (this.isTimelineView() && this.activeViewOptions.headerRows.length > 0 &&
            this.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {
            return true;
        }
        return false;
    };
    SfSchedule.prototype.getDateFromElement = function (td) {
        var dateString = td.getAttribute('data-date');
        if (!isNullOrUndefined(dateString)) {
            var dateInMS = parseInt(dateString, 10);
            var date = new Date(dateInMS);
            var localDate = new Date(+date + (date.getTimezoneOffset() * 60000));
            return new Date(localDate.getTime() + (localDate.getTimezoneOffset() - date.getTimezoneOffset()) * 60000);
        }
        return undefined;
    };
    SfSchedule.prototype.getMsFromDate = function (date) {
        return new Date(+date - (date.getTimezoneOffset() * 60000)).getTime();
    };
    SfSchedule.prototype.getTimeString = function (date) {
        return this.globalize.formatDate(date, { format: this.options.timeFormat, type: 'time' });
    };
    SfSchedule.prototype.getDateTime = function (date) {
        return date instanceof Date ? new Date(date.getTime()) : new Date(date);
    };
    SfSchedule.prototype.getStartEndTime = function (startEndTime) {
        if (!isNullOrUndefined(startEndTime) && startEndTime !== '') {
            var startEndDate = this.resetTime(this.getCurrentTime());
            var timeString = startEndTime.split(':');
            if (timeString.length === 2) {
                startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);
            }
            return startEndDate;
        }
        return null;
    };
    SfSchedule.prototype.resetTime = function (date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    };
    SfSchedule.prototype.getCurrentTime = function () {
        return new Date();
    };
    SfSchedule.prototype.boundaryValidation = function (pageY, pageX) {
        var autoScrollDistance = 30;
        var scrollEdges = { left: false, right: false, top: false, bottom: false };
        var viewBoundaries = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS).getBoundingClientRect();
        if ((pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset) &&
            (pageY > viewBoundaries.top + window.pageYOffset)) {
            scrollEdges.top = true;
        }
        if ((pageY > (viewBoundaries.bottom - autoScrollDistance) + window.pageYOffset) &&
            (pageY < viewBoundaries.bottom + window.pageYOffset)) {
            scrollEdges.bottom = true;
        }
        if ((pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset) &&
            (pageX > viewBoundaries.left + window.pageXOffset)) {
            scrollEdges.left = true;
        }
        if ((pageX > (viewBoundaries.right - autoScrollDistance) + window.pageXOffset) &&
            (pageX < viewBoundaries.right + window.pageXOffset)) {
            scrollEdges.right = true;
        }
        return scrollEdges;
    };
    SfSchedule.prototype.onCellMouseDown = function (e) {
        if (this.keyboardInteractionModule) {
            this.keyboardInteractionModule.onCellMouseDown(e);
        }
    };
    SfSchedule.prototype.getNavigateView = function () {
        if (this.isTimelineView()) {
            return this.options.currentView === 'TimelineMonth' || this.options.currentView === 'TimelineYear' ? 'TimelineDay' : 'Agenda';
        }
        return 'Day';
    };
    SfSchedule.prototype.addSelectedClass = function (cells, focusCell) {
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            cell.setAttribute('aria-selected', 'true');
        }
        addClass(cells, cls.SELECTED_CELL_CLASS);
        if (focusCell) {
            focusCell.setAttribute('tabindex', '0');
            focusCell.focus();
        }
    };
    SfSchedule.prototype.removeSelectedClass = function () {
        var selectedCells = this.getSelectedElements();
        for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {
            var cell = selectedCells_1[_i];
            cell.setAttribute('aria-selected', 'false');
            cell.removeAttribute('tabindex');
        }
        removeClass(selectedCells, cls.SELECTED_CELL_CLASS);
    };
    SfSchedule.prototype.setWorkHours = function (dates, start, end, groupIndex) {
        var cells = [];
        cells = this.getWorkHourCells(dates, start, end, groupIndex);
        addClass(cells, cls.WORK_HOURS_CLASS);
    };
    SfSchedule.prototype.resetWorkHours = function (dates, start, end, groupIndex) {
        if (dates === void 0) { dates = this.activeView.renderDates; }
        if (dates && start && end) {
            var cells = this.getWorkHourCells(dates, start, end, groupIndex);
            removeClass(cells, cls.WORK_HOURS_CLASS);
        }
        else {
            var workHourCells = [].slice.call(this.element.querySelectorAll('.' + cls.WORK_HOURS_CLASS));
            removeClass(workHourCells, cls.WORK_HOURS_CLASS);
        }
    };
    SfSchedule.prototype.getWorkHourCells = function (dates, start, end, groupIndex) {
        if (['Agenda', 'MonthAgenda', 'Month', 'TimelineMonth'].indexOf(this.options.currentView) > -1) {
            return [];
        }
        var startHour = this.getStartEndTime(start);
        var endHour = this.getStartEndTime(end);
        var tableEle = this.getContentTable();
        if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour) || !tableEle) {
            return [];
        }
        startHour.setMilliseconds(0);
        endHour.setMilliseconds(0);
        var viewStartHour = this.activeView.getStartHour();
        if (startHour < viewStartHour) {
            startHour = viewStartHour;
        }
        var viewEndHour = this.activeView.getEndHour();
        if (endHour > viewEndHour) {
            endHour = viewEndHour;
        }
        var msMajorInterval = this.activeViewOptions.timeScale.interval * util.MS_PER_MINUTE;
        var msInterval = msMajorInterval / this.activeViewOptions.timeScale.slotCount;
        var startIndex = Math.round((startHour.getTime() - viewStartHour.getTime()) / msInterval);
        var endIndex = Math.ceil((endHour.getTime() - viewStartHour.getTime()) / msInterval);
        var tempStartIndex = startIndex;
        var tempEndIndex = endIndex;
        var cells = [];
        for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
            var date = dates_1[_i];
            date = this.getDateTime(date);
            this.resetTime(date);
            var renderDates = this.activeView.renderDates;
            var colIndex = this.getIndexOfDate(renderDates, date);
            if (colIndex >= 0) {
                if (this.isTimelineView()) {
                    var slotsPerDay = Math.round((viewEndHour.getTime() - viewStartHour.getTime()) / msInterval);
                    startIndex = tempStartIndex + (colIndex * slotsPerDay);
                    endIndex = tempEndIndex + (colIndex * slotsPerDay);
                }
                for (var i = startIndex; i < endIndex; i++) {
                    if (this.isTimelineView()) {
                        var rowIndex = (!isNullOrUndefined(groupIndex)) ? groupIndex : 0;
                        cells.push(tableEle.rows[rowIndex].cells[i]);
                    }
                    else {
                        if (!isNullOrUndefined(groupIndex)) {
                            var tds = [].slice.call(tableEle.rows[i].querySelectorAll('.' + cls.WORK_CELLS_CLASS + '[data-group-index="' + groupIndex + '"]'));
                            cells.push(tds[colIndex]);
                        }
                        else {
                            cells.push(tableEle.rows[i].cells[colIndex]);
                        }
                    }
                }
            }
        }
        return cells;
    };
    SfSchedule.prototype.getCellDetails = function (tdCol) {
        var td = (tdCol instanceof Array) ? tdCol : [tdCol];
        var firstTd = getElement(td[0]);
        var lastTd = getElement(td.slice(-1)[0]);
        var startTime = this.getDateFromElement(firstTd);
        var endTime = this.getDateFromElement(lastTd);
        if (isNullOrUndefined(startTime) || isNullOrUndefined(endTime)) {
            return undefined;
        }
        var endDateFromColSpan = this.isTimelineView() && !isNullOrUndefined(lastTd.getAttribute('colSpan')) &&
            this.activeViewOptions.headerRows.length > 0;
        var duration = endDateFromColSpan ? parseInt(lastTd.getAttribute('colSpan'), 10) : 1;
        if (!this.activeViewOptions.timeScale.enable || endDateFromColSpan || lastTd.classList.contains(cls.ALLDAY_CELLS_CLASS) ||
            lastTd.classList.contains(cls.HEADER_CELLS_CLASS)) {
            endTime = util.addDays(new Date(endTime.getTime()), duration);
        }
        else {
            endTime = this.activeView.getEndDateFromStartDate(endTime);
        }
        var data = {
            startTime: startTime,
            endTime: endTime,
            isAllDay: this.isAllDayCell(firstTd),
            element: firstTd
        };
        var groupIndex = firstTd.getAttribute('data-group-index');
        if (!isNullOrUndefined(groupIndex)) {
            data.groupIndex = parseInt(groupIndex, 10);
        }
        return data;
    };
    SfSchedule.prototype.getSelectedElements = function () {
        return [].slice.call(this.element.querySelectorAll('.' + cls.SELECTED_CELL_CLASS));
    };
    SfSchedule.prototype.selectCell = function (element) {
        this.removeSelectedClass();
        this.addSelectedClass([element], element);
    };
    SfSchedule.prototype.getAllDayRow = function () {
        return this.element.querySelector('.' + cls.ALLDAY_ROW_CLASS);
    };
    SfSchedule.prototype.getTableRows = function () {
        return [].slice.call(this.element.querySelectorAll('.' + cls.CONTENT_TABLE_CLASS + ' tbody tr:not(.' + cls.HIDDEN_CLASS + ')'));
    };
    SfSchedule.prototype.getWorkCellElements = function () {
        return [].slice.call(this.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS));
    };
    SfSchedule.prototype.getContentTable = function () {
        return this.element.querySelector('.e-content-table tbody');
    };
    SfSchedule.prototype.getIndexOfDate = function (collection, date) {
        return collection.map(Number).indexOf(+date);
    };
    SfSchedule.prototype.setHeight = function () {
        this.element.style.height = formatUnit(this.options.height);
    };
    SfSchedule.prototype.setDimensions = function () {
        this.setHeight();
        var data = { cssProperties: this.getCssProperties() };
        this.onScrollUiUpdate(data);
    };
    SfSchedule.prototype.getCssProperties = function () {
        var cssProps = {
            border: this.options.enableRtl ? 'borderLeftWidth' : 'borderRightWidth',
            padding: this.options.enableRtl ? 'paddingLeft' : 'paddingRight',
            rtlBorder: this.options.enableRtl ? 'borderRightWidth' : 'borderLeftWidth',
            rtlPadding: this.options.enableRtl ? 'paddingRight' : 'paddingLeft'
        };
        return cssProps;
    };
    SfSchedule.prototype.onScrollUiUpdate = function (args) {
        if (this.activeView) {
            this.activeView.onScrollUiUpdate(args);
        }
    };
    SfSchedule.prototype.onVirtualScroll = function () {
        if (this.virtualScrollModule) {
            this.virtualScrollModule.virtualScrolling();
        }
    };
    SfSchedule.prototype.removeNewEventElement = function () {
        var eventClone = this.element.querySelector('.e-new-event');
        if (!isNullOrUndefined(eventClone)) {
            remove(eventClone);
        }
    };
    SfSchedule.prototype.closeSidebar = function (e) {
        var sidebar = this.element.querySelector('.e-sidebar');
        if (closest(e.target, '.e-icon-menu,.e-sidebar') && sidebar && sidebar.classList.contains('e-open')) {
            e.preventDefault();
            return;
        }
    };
    SfSchedule.prototype.closeHeaderPopup = function (e) {
        var closestEle = closest(e.target, '.e-date-range,.e-header-popup,.e-day,.e-selected');
        var element = this.element.querySelector('.e-header-popup');
        if (!isNullOrUndefined(closestEle)) {
            return;
        }
        if (element && this.headerPopup) {
            this.headerPopup.hide();
        }
    };
    SfSchedule.prototype.closeQuickPopup = function (e) {
        var classNames = '.' + cls.POPUP_WRAPPER_CLASS + ',.' + cls.HEADER_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS +
            ',.' + cls.WORK_CELLS_CLASS + ',.' + cls.APPOINTMENT_CLASS + ',.e-popup';
        var closestEle = closest(e.target, classNames);
        var element = this.element.querySelector('.e-quick-popup-wrapper');
        if (!isNullOrUndefined(closestEle)) {
            return;
        }
        if (element && element.childElementCount > 0 && this.quickPopup) {
            this.quickPopup.hide();
        }
        if (closest(e.target, '.' + cls.APPOINTMENT_CLASS + ',.' + cls.HEADER_CELLS_CLASS)) {
            this.removeNewEventElement();
        }
        if (!closest(e.target, classNames) && this.quickPopup) {
            this.quickPopup.hide();
            this.removeNewEventElement();
        }
    };
    SfSchedule.prototype.beforeOpenEditor = function () {
        this.onClosePopup();
        this.removeNewEventElement();
    };
    SfSchedule.prototype.createCalendarPopup = function () {
        var headerPopupEle = this.element.querySelector('.e-header-popup');
        if (headerPopupEle && !this.headerPopup) {
            this.headerPopup = new Popup(headerPopupEle, {
                actionOnScroll: 'hide',
                targetType: 'relative',
                relateTo: this.isAdaptive ? this.element.querySelector('.e-schedule-toolbar') :
                    this.element.querySelector('.e-date-range'),
                position: { X: 'left', Y: 'bottom' },
                enableRtl: this.options.enableRtl
            });
            this.headerPopup.isStringTemplate = true;
        }
        if (this.headerPopup) {
            if (this.headerPopup.element.classList.contains(cls.POPUP_OPEN)) {
                this.headerPopup.hide();
            }
            else {
                this.headerPopup.show();
            }
        }
    };
    SfSchedule.prototype.ctrlKeySelect = function (guid) {
        if (!this.isAdaptive) {
            this.selectedElements = [];
            this.selectedElements = [].slice.call(this.element.querySelectorAll('.' + cls.APPOINTMENT_BORDER));
            var target = this.element.querySelector('.' + cls.APPOINTMENT_CLASS + '[data-guid="' + guid + '"]');
            this.eventBase.getSelectedEventElements(target);
        }
    };
    SfSchedule.prototype.createQuickPopup = function (guid, isServerBinding) {
        if (this.isAdaptive && isNullOrUndefined(guid)) {
            var newEventClone = this.element.querySelector('.' + cls.NEW_EVENT_CLASS);
            if (isNullOrUndefined(newEventClone)) {
                newEventClone = createElement('div', {
                    className: cls.NEW_EVENT_CLASS,
                    innerHTML: '<div class="e-title">New Event</div>'
                });
            }
            this.currentCell.appendChild(newEventClone);
            return;
        }
        var popupEle = this.element.querySelector('.e-quick-popup-wrapper');
        var isEventPopup;
        if (!isNullOrUndefined(guid)) {
            isEventPopup = true;
            this.currentCell = this.element.querySelector('.e-appointment[data-guid="' + guid + '"]');
            this.activeEventData = { element: this.currentCell, guid: [guid] };
        }
        if (isNullOrUndefined(this.currentCell)) {
            this.currentCell = this.element.querySelector('.e-table-container');
        }
        var isWorkCell = this.currentCell.classList.contains(cls.WORK_CELLS_CLASS) ||
            this.currentCell.classList.contains(cls.ALLDAY_CELLS_CLASS);
        if (isWorkCell && this.getSelectedElements().length === 0) {
            this.selectCell(this.currentCell);
        }
        if (popupEle && !this.quickPopup) {
            this.quickPopup = new Popup(popupEle, {
                targetType: (this.isAdaptive ? 'container' : 'relative'),
                enableRtl: this.options.enableRtl,
                relateTo: this.currentCell,
                open: this.quickPopupOpen.bind(this),
                hideAnimation: (this.isAdaptive ? { name: 'ZoomOut' } : { name: 'FadeOut', duration: 150 }),
                showAnimation: (this.isAdaptive ? { name: 'ZoomIn' } : { name: 'FadeIn', duration: 150 }),
                collision: (this.isAdaptive ? { X: 'fit', Y: 'fit' } :
                    (this.options.enableRtl ? { X: 'flip', Y: 'fit' } : { X: 'none', Y: 'fit' })),
                position: (this.isAdaptive || this.options.enableRtl ? { X: 'left', Y: 'top' } : { X: 'right', Y: 'top' }),
                viewPortElement: (this.isAdaptive ? document.body : this.element),
                zIndex: (this.isAdaptive ? 1004 : 3)
            });
            this.quickPopup.isStringTemplate = true;
        }
        if (this.quickPopup) {
            if (this.isAdaptive) {
                addClass([this.quickPopup.element], 'e-device');
            }
            this.quickPopup.relateTo = this.currentCell;
            if (isEventPopup) {
                this.applyEventColor();
            }
            this.adjustPopupPosition();
        }
        if (isServerBinding) {
            this.eventBase.removeSelectedAppointmentClass();
            this.eventBase.addSelectedAppointments([].slice.call(this.element.querySelectorAll('div[data-guid="' + guid + '"]')));
            this.activeEventData.element.focus();
        }
    };
    SfSchedule.prototype.applyEventColor = function () {
        var colorField = '';
        if (this.options.currentView === 'Agenda' || this.options.currentView === 'MonthAgenda') {
            colorField = this.options.enableRtl ? 'border-right-color' : 'border-left-color';
        }
        else {
            colorField = 'background-color';
        }
        var color = this.activeEventData.element.style[colorField];
        if (color === '') {
            return;
        }
        var colorEle = this.quickPopup.element.querySelector('.' + cls.POPUP_HEADER_CLASS);
        var footerEle = this.quickPopup.element.querySelector('.' + cls.POPUP_FOOTER_CLASS);
        if (footerEle) {
            colorEle = this.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS);
            if (colorEle) {
                colorEle.style.borderLeftColor = color;
                color = "rgba(" + color.match(/\d+/g).join() + ",0.3)";
            }
        }
        if (colorEle) {
            colorEle.style.backgroundColor = color;
        }
    };
    SfSchedule.prototype.inlineEdit = function (clickType, isTemplate, guid) {
        if (guid === void 0) { guid = null; }
        this.inlineModule.inlineEdit(clickType, isTemplate, guid);
    };
    SfSchedule.prototype.inlineCrudActions = function (target) {
        if (closest(target, '.' + cls.INLINE_APPOINTMENT_CLASS)) {
            var saveObj = this.inlineModule.generateEventData(target);
            saveObj.startTime = util.addLocalOffset(saveObj.startTime);
            saveObj.endTime = util.addLocalOffset(saveObj.endTime);
            this.dotNetRef.invokeMethodAsync('AddInlineAppointment', saveObj, saveObj.groupIndex);
        }
        else {
            var sub = target.value;
            this.dotNetRef.invokeMethodAsync('SaveInlineAppointment', sub);
        }
        this.inlineModule.removeInlineAppointmentElement();
    };
    SfSchedule.prototype.quickPopupOpen = function () {
        if (this.isAdaptive) {
            this.quickPopup.element.style.top = '0px';
            return;
        }
        if (this.quickPopup.element.querySelector('.' + cls.CELL_POPUP_CLASS)) {
            var subjectElement = this.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS);
            if (subjectElement) {
                subjectElement.focus();
            }
        }
        else {
            var editElement = this.quickPopup.element.querySelector('.' + cls.EDIT_EVENT_CLASS);
            if (editElement) {
                editElement.focus();
            }
            var editIcon = this.quickPopup.element.querySelector('.' + cls.EDIT_CLASS);
            if (editIcon) {
                editIcon.focus();
            }
        }
    };
    SfSchedule.prototype.adjustPopupPosition = function () {
        var display = this.quickPopup.element.style.display;
        this.quickPopup.element.style.display = 'block';
        if (this.isAdaptive) {
            this.quickPopup.element.removeAttribute('style');
            this.quickPopup.element.style.display = 'block';
            this.quickPopup.element.style.height = formatUnit((this.isTapHold) ? 65 : window.innerHeight);
        }
        else {
            this.quickPopup.offsetX = 10;
            this.quickPopup.collision = { X: this.options.enableRtl ? 'flip' : 'none', Y: 'fit' };
            this.quickPopup.position = { X: this.options.enableRtl ? 'left' : 'right', Y: 'top' };
            this.quickPopup.dataBind();
            this.quickPopup.refreshPosition(null, true);
            var collide = isCollide(this.quickPopup.element, this.element);
            if (collide.indexOf(this.options.enableRtl ? 'left' : 'right') > -1) {
                this.quickPopup.offsetX = -this.currentCell.offsetWidth - 10 - this.quickPopup.element.offsetWidth;
                this.quickPopup.dataBind();
                var leftCollide = isCollide(this.quickPopup.element, this.element);
                if (leftCollide.indexOf('left') > -1) {
                    this.quickPopup.position = { X: 'center', Y: 'center' };
                    this.quickPopup.collision = { X: 'fit', Y: 'fit' };
                    this.quickPopup.offsetX = -(this.quickPopup.element.offsetWidth / 2);
                    this.quickPopup.dataBind();
                }
            }
            if (this.virtualScrollModule && (collide.indexOf('top') > -1 || collide.indexOf('bottom') > -1)) {
                var element = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS + ' table');
                var translateY = util.getTranslateY(element);
                this.quickPopup.offsetY = translateY;
                this.quickPopup.dataBind();
            }
        }
        this.quickPopup.element.style.display = display;
        this.quickPopup.dataBind();
        this.quickPopup.show();
    };
    SfSchedule.prototype.onQuickPopupClose = function (isPreventFocus) {
        if (isPreventFocus === void 0) { isPreventFocus = false; }
        this.isTapHold = false;
        if (this.quickPopup && this.quickPopup.element.classList.contains(cls.POPUP_OPEN)) {
            this.quickPopup.hide();
        }
        if (!isPreventFocus) {
            this.eventBase.focusElement();
        }
    };
    SfSchedule.prototype.onClosePopup = function () {
        if (this.quickPopup) {
            this.quickPopup.hide();
        }
        this.eventBase.focusElement();
    };
    SfSchedule.prototype.createMoreEventPopup = function (clsName, dataDate) {
        var popupEle = this.element.querySelector('.e-more-popup-wrapper');
        if (popupEle && !this.morePopup) {
            this.morePopup = new Popup(popupEle, {
                targetType: (this.isAdaptive ? 'container' : 'relative'),
                enableRtl: this.options.enableRtl,
                hideAnimation: { name: 'ZoomOut', duration: 300 },
                showAnimation: { name: 'ZoomIn', duration: 300 },
                collision: (this.isAdaptive ? { X: 'fit', Y: 'fit' } :
                    (this.options.enableRtl ? { X: 'flip', Y: 'fit' } : { X: 'flip', Y: 'flip' })),
                viewPortElement: (this.isAdaptive ? document.body : this.element),
                zIndex: (this.isAdaptive ? 1002 : 2)
            });
            this.morePopup.isStringTemplate = true;
        }
        if (this.morePopup) {
            var appointments = this.morePopup.element.querySelectorAll('.e-appointment');
            for (var i = 0; i < appointments.length; i++) {
                var ele = appointments[i];
                this.eventBase.wireAppointmentEvents(ele, this.options.currentView === 'Year' ? true : false, true);
            }
            this.morePopup.relateTo = this.element.querySelector('.' + clsName + '[data-date="' + dataDate + '"]');
            this.morePopup.show();
        }
    };
    SfSchedule.prototype.onMoreEventPopupClose = function () {
        if (this.morePopup && this.morePopup.element.classList.contains(cls.POPUP_OPEN)) {
            this.onQuickPopupClose();
            this.morePopup.hide();
        }
    };
    SfSchedule.prototype.getTooltipPosition = function (fieldName, isQuickPopup) {
        var dlgContent;
        if (isQuickPopup) {
            dlgContent = this.element.querySelector('.e-quick-popup-wrapper');
        }
        else {
            dlgContent = document.querySelector('#' + this.element.id + '_dialog_wrapper' + ' .e-dlg-content');
        }
        var fieldEle = isQuickPopup ? dlgContent.querySelector('#' + 'QuickInfo' + fieldName) : dlgContent.querySelector('#' + fieldName);
        var inputClient = fieldEle.getBoundingClientRect();
        var dlgClient = dlgContent.getBoundingClientRect();
        var toolTipPos = {};
        toolTipPos[fieldName] = 'top:' + (inputClient.bottom - dlgClient.top + dlgContent.scrollTop + 9) +
            'px;left:' + (inputClient.left - dlgClient.left + dlgContent.scrollLeft + inputClient.width / 2) + 'px;';
        this.dotNetRef.invokeMethodAsync('ErrorPositioning', toolTipPos, isQuickPopup);
    };
    SfSchedule.prototype.scrollTo = function (hour, scrollDate) {
        scrollDate = isNullOrUndefined(scrollDate) ? scrollDate : this.getDateTime(scrollDate);
        if (this.activeView.scrollToDate && isNullOrUndefined(hour) && scrollDate) {
            this.activeView.scrollToDate(scrollDate);
        }
        else if (this.activeView.scrollToHour) {
            this.activeView.scrollToHour(hour, scrollDate);
        }
    };
    SfSchedule.prototype.print = function () {
        var printEle = this.element;
        var currentView = this.options.currentView;
        var clone = printEle.cloneNode(true);
        clone.id = this.element.id + '_print';
        document.body.appendChild(clone);
        var getScrollableElement = function (scrollElement) {
            if (currentView === 'MonthAgenda') {
                return scrollElement.querySelector('.e-appointment-wrap');
            }
            return scrollElement.querySelector('.e-content-wrap');
        };
        var scrollEle = getScrollableElement(this.element);
        var top = scrollEle.scrollTop;
        var left = scrollEle.scrollLeft;
        var links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('link, style'));
        var reference = '';
        links.forEach(function (link) {
            reference += link.outerHTML;
        });
        var div = createElement('div');
        clone.style.width = this.element.offsetWidth + 'px';
        var elementWidth = Math.round((parseInt(clone.style.width, 10)) / 100) * 100;
        div.appendChild(clone);
        var printWindow = window.open('', 'print', 'height=550,width=' + elementWidth + ',tabbar=no');
        printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML +
            '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');
        printWindow.document.close();
        printWindow.focus();
        setTimeout(function () {
            var scrollableEle = getScrollableElement(printWindow.document.body);
            scrollableEle.scrollLeft = left;
            scrollableEle.scrollTop = top;
            var headerTimeCellsScroll = printWindow.document.querySelector('.e-date-header-wrap');
            if (currentView.indexOf('Timeline') !== -1) {
                headerTimeCellsScroll.scrollLeft = left;
            }
            if (currentView === 'Day' || currentView === 'Week' || currentView === 'WorkWeek') {
                var timeCellsScroll = printWindow.document.querySelector('.e-time-cells-wrap');
                timeCellsScroll.scrollTop = top;
                headerTimeCellsScroll.scrollLeft = left;
            }
            if (currentView === 'Month') {
                headerTimeCellsScroll.scrollLeft = left;
            }
            printWindow.print();
            printWindow.close();
        }, 2000);
    };
    SfSchedule.prototype.wireEvents = function () {
        this.wireTouchEvents();
        EventHandler.add(window, 'resize', this.onScheduleResize, this);
        EventHandler.add(window, 'orientationchange', this.onScheduleResize, this);
        EventHandler.add(document, Browser.touchStartEvent, this.onDocumentClick, this);
    };
    SfSchedule.prototype.unwireEvents = function () {
        this.unwireTouchEvents();
        EventHandler.remove(window, 'resize', this.onScheduleResize);
        EventHandler.remove(window, 'orientationchange', this.onScheduleResize);
        EventHandler.remove(document, Browser.touchStartEvent, this.onDocumentClick);
    };
    SfSchedule.prototype.wireTouchEvents = function () {
        var element = this.element.querySelector('.' + cls.TABLE_CONTAINER_CLASS);
        if (element && isNullOrUndefined(this.touchObj)) {
            this.touchObj = new Touch(element, {
                tapHold: this.tapHoldHandler.bind(this)
            });
        }
    };
    SfSchedule.prototype.unwireTouchEvents = function () {
        if (this.touchObj) {
            this.touchObj.destroy();
        }
    };
    SfSchedule.prototype.tapHoldHandler = function (e) {
        var target = closest(e.originalEvent.target, '.' + cls.APPOINTMENT_CLASS);
        if (!isNullOrUndefined(target) && this.isAdaptive) {
            var guid = target.getAttribute('data-guid');
            this.isTapHold = true;
            this.selectedElements = [].slice.call(this.element.querySelectorAll('.' + cls.APPOINTMENT_BORDER));
            this.eventBase.getSelectedEventElements(target);
            this.dotNetRef.invokeMethodAsync('OnTapHold', guid, this.isTapHold);
            return;
        }
    };
    SfSchedule.prototype.onScheduleResize = function () {
        this.onClosePopup();
        if (this.morePopup) {
            this.morePopup.hide();
        }
        this.activeView.resetColWidth();
        this.onScrollUiUpdate({ cssProperties: this.getCssProperties(), isPreventScrollUpdate: true });
        this.dataReady();
    };
    SfSchedule.prototype.onDocumentClick = function (e) {
        if (this.options.allowInline) {
            var target_1 = this.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);
            if (target_1 && target_1.value !== '') {
                this.inlineCrudActions(target_1);
            }
            else {
                this.inlineModule.removeInlineAppointmentElement();
            }
        }
        this.closeHeaderPopup(e);
        this.closeSidebar(e);
        this.closeQuickPopup(e);
        if (this.eventBase) {
            this.eventBase.appointmentBorderRemove(e);
        }
        var target = e.target;
        if (this.morePopup && !closest(target, '.' + cls.MORE_POPUP_WRAPPER_CLASS) && !target.classList.contains(cls.MORE_INDICATOR_CLASS)
            && (!closest(target, '.' + cls.POPUP_OPEN)) && !closest(target, '.' + cls.WORK_CELLS_CLASS)) {
            this.morePopup.hide();
        }
    };
    SfSchedule.prototype.setPersistence = function () {
        if (this.options.enablePersistence) {
            var props = { selectedDate: this.options.selectedDate, currentView: this.options.currentView };
            var contentWrap = this.element.querySelector('.e-content-wrap');
            if (!isNullOrUndefined(contentWrap)) {
                props.top = contentWrap.scrollTop;
                props.left = contentWrap.scrollLeft;
            }
            window.localStorage.setItem(this.element.id, JSON.stringify(props));
        }
    };
    SfSchedule.prototype.destroy = function () {
        this.isDestroyed = true;
        this.setPersistence();
        this.unwireEvents();
        if (this.headerPopup) {
            this.headerPopup.destroy();
        }
        if (this.quickPopup) {
            this.quickPopup.destroy();
        }
        if (this.morePopup) {
            this.morePopup.destroy();
        }
        if (this.keyboardInteractionModule) {
            this.keyboardInteractionModule.destroy();
        }
        if (this.activeView) {
            this.activeView.destroy();
            this.activeView = null;
        }
    };
    return SfSchedule;
}());
export { SfSchedule };
