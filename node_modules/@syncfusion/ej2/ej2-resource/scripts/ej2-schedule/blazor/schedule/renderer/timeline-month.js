var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { formatUnit } from '@syncfusion/ej2-base';
import { Month } from './month';
import * as util from '../base/util';
import * as cls from '../base/css-constant';
import { TimelineEvent } from '../event-renderer/timeline-view';
var TimelineMonth = (function (_super) {
    __extends(TimelineMonth, _super);
    function TimelineMonth(parent) {
        var _this = _super.call(this, parent) || this;
        _this.isInverseTableSelect = true;
        return _this;
    }
    TimelineMonth.prototype.onDataReady = function (args) {
        var appointment = new TimelineEvent(this.parent, 'day');
        appointment.renderAppointments();
    };
    TimelineMonth.prototype.getLeftPanelElement = function () {
        return this.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);
    };
    TimelineMonth.prototype.scrollTopPanel = function (target) {
        _super.prototype.scrollTopPanel.call(this, target);
        this.scrollHeaderLabels(target);
    };
    TimelineMonth.prototype.setContentHeight = function (content, leftPanelElement, height) {
        if (leftPanelElement) {
            leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));
        }
        content.style.height = formatUnit(height);
    };
    TimelineMonth.prototype.getMonthStart = function (currentDate) {
        var monthStart = util.firstDateOfMonth(util.resetTime(currentDate));
        return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
    };
    TimelineMonth.prototype.getMonthEnd = function (currentDate) {
        var monthStart = util.firstDateOfMonth(util.resetTime(currentDate));
        return util.lastDateOfMonth(util.addMonths(new Date(+monthStart), this.parent.activeViewOptions.interval - 1));
    };
    return TimelineMonth;
}(Month));
export { TimelineMonth };
