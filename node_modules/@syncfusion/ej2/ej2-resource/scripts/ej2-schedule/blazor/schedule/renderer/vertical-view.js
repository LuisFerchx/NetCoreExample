var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { isNullOrUndefined, EventHandler, formatUnit, Browser } from '@syncfusion/ej2-base';
import { createElement, remove, addClass, removeClass, prepend } from '@syncfusion/ej2-base';
import { ViewBase } from './view-base';
import { VerticalEvent } from '../event-renderer/vertical-view';
import { MonthEvent } from '../event-renderer/month';
import * as util from '../base/util';
import * as cls from '../base/css-constant';
export var ADD_BORDER_LENGTH = 4;
export var DEFAULT_ALL_DAY_ROW_LENGTH = 4;
var VerticalViews = (function (_super) {
    __extends(VerticalViews, _super);
    function VerticalViews(parent) {
        var _this = _super.call(this, parent) || this;
        _this.isInverseTableSelect = true;
        _this.baseCssClass = 'e-vertical-view';
        return _this;
    }
    VerticalViews.prototype.onDataReady = function () {
        if (this.parent.activeViewOptions.timeScale.enable) {
            var appointment = new VerticalEvent(this.parent);
            appointment.renderAppointments();
        }
        else {
            var appointment = new MonthEvent(this.parent);
            appointment.renderAppointments();
        }
    };
    VerticalViews.prototype.onContentScroll = function (e) {
        this.parent.removeNewEventElement();
        var target = e.target;
        this.parent.onVirtualScroll();
        this.scrollLeftPanel(target);
        this.scrollTopPanel(target);
        if (!this.parent.isAdaptive) {
            this.parent.uiStateValues.top = target.scrollTop;
        }
        this.parent.uiStateValues.left = target.scrollLeft;
        if (!isNullOrUndefined(this.parent.quickPopup)) {
            this.parent.quickPopup.hide();
        }
        this.parent.setPersistence();
    };
    VerticalViews.prototype.onApaptiveMove = function (e) {
        if (this.parent.uiStateValues.action) {
            e.preventDefault();
        }
    };
    VerticalViews.prototype.scrollLeftPanel = function (target) {
        var leftPanel = this.getLeftPanelElement();
        if (!isNullOrUndefined(leftPanel)) {
            leftPanel.scrollTop = target.scrollTop;
        }
    };
    VerticalViews.prototype.onScrollUiUpdate = function (args) {
        var headerBarHeight = this.getHeaderBarHeight();
        var timecells = this.getLeftPanelElement();
        var content = this.getContentAreaElement();
        var header = this.getDatesHeaderElement();
        var scrollerHeight = this.parent.element.offsetHeight - headerBarHeight - header.offsetHeight;
        this.setColWidth(content);
        this.setContentHeight(content, timecells, scrollerHeight);
        var scrollBarWidth = util.getScrollBarWidth();
        header.firstElementChild.style[args.cssProperties.rtlBorder] = '';
        header.style[args.cssProperties.rtlPadding] = '';
        if (content.offsetWidth - content.clientWidth > 0) {
            header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
            header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
        }
        else {
            header.firstElementChild.style[args.cssProperties.border] = '';
            header.style[args.cssProperties.padding] = '';
        }
        if (!args.isPreventScrollUpdate) {
            if (this.parent.uiStateValues.isInitial) {
                this.scrollToWorkHour();
                this.parent.uiStateValues.isInitial = false;
            }
            else {
                if (timecells) {
                    timecells.scrollTop = this.parent.uiStateValues.top;
                }
                content.scrollTop = this.parent.uiStateValues.top;
                content.scrollLeft = this.parent.uiStateValues.left;
            }
        }
        if (this.parent.activeViewOptions.timeScale.enable) {
            this.highlightCurrentTime();
        }
        this.retainScrollPosition();
    };
    VerticalViews.prototype.setContentHeight = function (element, leftPanelElement, height) {
        if (!isNullOrUndefined(leftPanelElement)) {
            leftPanelElement.style.height = (this.parent.options.height === 'auto') ? 'auto'
                : formatUnit(height - this.getScrollXIndent(element));
        }
        element.style.height = (this.parent.options.height === 'auto') ? 'auto' : formatUnit(height);
    };
    VerticalViews.prototype.scrollToWorkHour = function () {
        if (this.parent.options.workHours.highlight) {
            var firstWorkHourCell = this.element.querySelector('.' + cls.WORK_HOURS_CLASS);
            if (firstWorkHourCell) {
                this.getContentAreaElement().scrollTop = firstWorkHourCell.offsetTop;
                this.parent.uiStateValues.top = firstWorkHourCell.offsetTop;
                this.parent.uiStateValues.left = 0;
            }
        }
    };
    VerticalViews.prototype.scrollToHour = function (hour, scrollDate) {
        var date = this.parent.getStartEndTime(hour);
        if (isNullOrUndefined(date) || !isNullOrUndefined(scrollDate)) {
            return;
        }
        this.getContentAreaElement().scrollTop = this.getTopFromDateTime(date);
    };
    VerticalViews.prototype.isWorkHourRange = function (date) {
        return (this.getStartHour().getTime() <= date.getTime()) && (this.getEndHour().getTime() >= date.getTime());
    };
    VerticalViews.prototype.highlightCurrentTime = function () {
        var _this = this;
        if (this.parent.activeViewOptions.headerRows && this.parent.activeViewOptions.headerRows.length > 0 &&
            this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {
            return;
        }
        var curEle = [].slice.call(this.element.querySelectorAll('.' + cls.CURRENT_DAY_CLASS));
        if (curEle.length > 0) {
            removeClass(curEle, cls.CURRENT_DAY_CLASS);
        }
        var curDate = util.addLocalOffset(new Date(new Date().setHours(0, 0, 0, 0)));
        var queryString = '.' + cls.DATE_HEADER_CLASS + '[data-date="' + curDate.getTime().toString() + '"]';
        curEle = [].slice.call(this.element.querySelectorAll(queryString));
        for (var _i = 0, curEle_1 = curEle; _i < curEle_1.length; _i++) {
            var ele = curEle_1[_i];
            addClass([ele], cls.CURRENT_DAY_CLASS);
        }
        if (this.parent.options.showTimeIndicator && this.isWorkHourRange(this.parent.getCurrentTime())) {
            var currentDateIndex = this.getCurrentTimeIndicatorIndex();
            var timeCellsWrap = this.getLeftPanelElement();
            if (!isNullOrUndefined(timeCellsWrap)) {
                removeClass(timeCellsWrap.querySelectorAll('.' + cls.HIDE_CHILDS_CLASS), cls.HIDE_CHILDS_CLASS);
            }
            if (currentDateIndex.length > 0) {
                var workCells = [].slice.call(this.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS));
                if (workCells.length > 0) {
                    this.changeCurrentTimePosition();
                }
                if (isNullOrUndefined(this.currentTimeIndicatorTimer)) {
                    this.currentTimeIndicatorTimer = window.setInterval(function () { _this.changeCurrentTimePosition(); }, util.MS_PER_MINUTE);
                }
            }
            else {
                this.clearCurrentTimeIndicatorTimer();
            }
        }
        else {
            this.clearCurrentTimeIndicatorTimer();
        }
    };
    VerticalViews.prototype.getCurrentTimeIndicatorIndex = function () {
        var currentDateIndex = [];
        var elements = [].slice.call(this.element.querySelectorAll('.e-timeline-wrapper'));
        var currentDateInMS = util.addLocalOffset(new Date(new Date().setHours(0, 0, 0, 0))).getTime().toString();
        for (var i = 0, length_1 = elements.length; i < length_1; i++) {
            if (elements[i].getAttribute('data-date') === currentDateInMS) {
                currentDateIndex.push(i);
            }
        }
        return currentDateIndex;
    };
    VerticalViews.prototype.clearCurrentTimeIndicatorTimer = function () {
        if (!isNullOrUndefined(this.currentTimeIndicatorTimer)) {
            window.clearInterval(this.currentTimeIndicatorTimer);
            this.currentTimeIndicatorTimer = null;
            this.removeCurrentTimeIndicatorElements();
        }
    };
    VerticalViews.prototype.removeCurrentTimeIndicatorElements = function () {
        var queryString = '.' + cls.PREVIOUS_TIMELINE_CLASS + ',.' + cls.CURRENT_TIMELINE_CLASS + ',.' + cls.CURRENT_TIME_CLASS;
        var timeIndicator = [].slice.call(this.element.querySelectorAll(queryString));
        for (var _i = 0, timeIndicator_1 = timeIndicator; _i < timeIndicator_1.length; _i++) {
            var indicator = timeIndicator_1[_i];
            remove(indicator);
        }
    };
    VerticalViews.prototype.changeCurrentTimePosition = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeCurrentTimeIndicatorElements();
        var currentDateIndex = this.getCurrentTimeIndicatorIndex();
        var firstRow = this.parent.getContentTable().rows[0];
        var top = this.getTopFromDateTime(this.parent.getCurrentTime());
        var topInPx = formatUnit(top);
        var rowIndex = Math.floor(top / firstRow.cells[0].offsetHeight);
        if (isNullOrUndefined(rowIndex) || isNaN(rowIndex)) {
            return;
        }
        var curTimeWrap = [].slice.call(this.element.querySelectorAll('.' + cls.TIMELINE_WRAPPER_CLASS));
        for (var i = 0, length_2 = currentDateIndex[0]; i < length_2; i++) {
            curTimeWrap[i].appendChild(createElement('div', { className: cls.PREVIOUS_TIMELINE_CLASS, styles: 'top:' + topInPx }));
        }
        for (var _i = 0, currentDateIndex_1 = currentDateIndex; _i < currentDateIndex_1.length; _i++) {
            var day = currentDateIndex_1[_i];
            curTimeWrap[day].appendChild(createElement('div', { className: cls.CURRENT_TIMELINE_CLASS, styles: 'top:' + topInPx }));
        }
        var currentTimeEle = createElement('div', {
            innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
            className: cls.CURRENT_TIME_CLASS,
            styles: 'top:' + topInPx
        });
        var timeCellsWrap = this.getLeftPanelElement();
        if (isNullOrUndefined(timeCellsWrap)) {
            return;
        }
        var timeTrs = [].slice.call(timeCellsWrap.querySelectorAll('tr'));
        if (rowIndex <= timeTrs.length) {
            removeClass(timeCellsWrap.querySelectorAll('.' + cls.HIDE_CHILDS_CLASS), cls.HIDE_CHILDS_CLASS);
            addClass([timeTrs[rowIndex].lastElementChild], cls.HIDE_CHILDS_CLASS);
            prepend([currentTimeEle], timeCellsWrap);
            currentTimeEle.style.top = formatUnit(currentTimeEle.offsetTop - (currentTimeEle.offsetHeight / 2));
        }
    };
    VerticalViews.prototype.getTopFromDateTime = function (date) {
        var startHour = this.getStartHour();
        var diffInMinutes = ((date.getHours() - startHour.getHours()) * 60) + (date.getMinutes() - startHour.getMinutes());
        return (diffInMinutes * this.getWorkCellHeight() * this.parent.activeViewOptions.timeScale.slotCount) /
            this.parent.activeViewOptions.timeScale.interval;
    };
    VerticalViews.prototype.getWorkCellHeight = function () {
        return this.element.querySelector('.' + cls.WORK_CELLS_CLASS).offsetHeight;
    };
    VerticalViews.prototype.renderLayout = function () {
        this.element = this.parent.element.querySelector('.' + cls.TABLE_WRAP_CLASS);
        var headerCells = [].slice.call(this.element.querySelectorAll('.' + cls.DATE_HEADER_WRAP_CLASS + ' td.' + cls.HEADER_CELLS_CLASS));
        for (var _i = 0, headerCells_1 = headerCells; _i < headerCells_1.length; _i++) {
            var cell = headerCells_1[_i];
            EventHandler.clearEvents(cell);
            this.wireMouseEvents(cell);
        }
        var alldayCells = [].slice.call(this.element.querySelectorAll('.' + cls.DATE_HEADER_WRAP_CLASS + ' td.' + cls.ALLDAY_CELLS_CLASS));
        for (var _a = 0, alldayCells_1 = alldayCells; _a < alldayCells_1.length; _a++) {
            var cell = alldayCells_1[_a];
            EventHandler.clearEvents(cell);
            this.wireCellEvents(cell);
        }
        if (this.parent.virtualScrollModule) {
            this.parent.virtualScrollModule.setTranslateValue();
        }
        var wrap = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        var contentBody = this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS + ' tbody');
        EventHandler.clearEvents(contentBody);
        this.wireCellEvents(contentBody);
        EventHandler.clearEvents(wrap);
        EventHandler.add(wrap, 'scroll', this.onContentScroll, this);
        EventHandler.add(wrap, Browser.touchMoveEvent, this.onApaptiveMove, this);
        this.parent.setDimensions();
    };
    VerticalViews.prototype.wireCellEvents = function (element) {
        EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
        this.wireMouseEvents(element);
    };
    VerticalViews.prototype.wireMouseEvents = function (element) {
        EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);
        if (!this.parent.isAdaptive) {
            EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
        }
    };
    VerticalViews.prototype.getLeftPanelElement = function () {
        return this.element.querySelector('.' + cls.TIME_CELLS_WRAP_CLASS);
    };
    VerticalViews.prototype.getEndDateFromStartDate = function (start) {
        var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * util.MS_PER_MINUTE;
        var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;
        var end = new Date(start.getTime());
        end.setMilliseconds(end.getMilliseconds() + msInterval);
        return end;
    };
    VerticalViews.prototype.destroy = function () {
        this.clearCurrentTimeIndicatorTimer();
        if (this.element) {
            var contentScrollableEle = this.getContentAreaElement();
            if (contentScrollableEle) {
                EventHandler.remove(contentScrollableEle, 'scroll', this.onContentScroll);
            }
            this.element = null;
        }
    };
    return VerticalViews;
}(ViewBase));
export { VerticalViews };
