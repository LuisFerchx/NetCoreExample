import { addClass, createElement, closest, remove, removeClass } from '@syncfusion/ej2-base';
import { VerticalEvent } from './vertical-view';
import { MonthEvent } from './month';
import { TimelineEvent } from './timeline-view';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
var InlineEdit = (function () {
    function InlineEdit(parent) {
        this.parent = parent;
    }
    InlineEdit.prototype.inlineEdit = function (clickType, isTemplate, guid) {
        if (guid === void 0) { guid = null; }
        if (clickType === 'Cell') {
            this.removeInlineAppointmentElement();
            this.cellEdit();
        }
        else {
            if (isTemplate) {
                return;
            }
            var activeEvent = this.parent.element.querySelector('.e-appointment[data-guid="' + guid + '"]');
            if (this.parent.element.querySelector('.e-more-popup-wrapper') &&
                this.parent.element.querySelector('.e-more-popup-wrapper').classList.contains('e-popup-open')) {
                activeEvent = this.parent.element.querySelector('.e-more-popup-wrapper .e-appointment[data-guid="' + guid + '"]');
            }
            if (this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS) !==
                activeEvent.querySelector('.' + cls.INLINE_SUBJECT_CLASS)) {
                this.removeInlineAppointmentElement();
            }
            this.eventEdit(activeEvent);
        }
    };
    InlineEdit.prototype.cellEdit = function () {
        var saveObj = this.generateEventData();
        var cellIndex = this.parent.activeCellsData.element.cellIndex;
        var count = this.getEventDaysCount(saveObj);
        if (count > 1) {
            count = Math.round(count);
            count--;
            cellIndex = cellIndex - count;
        }
        var start = new Date('' + saveObj.startTime).getTime();
        var end = new Date('' + saveObj.endTime).getTime();
        var resIndex = saveObj.groupIndex || 0;
        if (this.parent.options.currentView === 'Day' || this.parent.options.currentView === 'Week' ||
            this.parent.options.currentView === 'WorkWeek') {
            var dayIndex = saveObj.startTime.getDay();
            this.createVerticalViewInline(saveObj, dayIndex, resIndex, cellIndex);
        }
        else if (this.parent.options.currentView === 'Month') {
            this.createMonthViewInline(saveObj, resIndex, start, end);
        }
        else {
            this.createTimelineViewInline(saveObj, start, end, resIndex);
        }
        var inlineSubject = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);
        if (inlineSubject) {
            inlineSubject.focus();
        }
    };
    InlineEdit.prototype.createInlineAppointmentElement = function () {
        var inlineAppointmentElement = createElement('div', {
            className: cls.APPOINTMENT_CLASS + ' ' + cls.INLINE_APPOINTMENT_CLASS
        });
        var inlineDetails = createElement('div', { className: cls.APPOINTMENT_DETAILS });
        inlineAppointmentElement.appendChild(inlineDetails);
        var inline = createElement('input', { className: cls.INLINE_SUBJECT_CLASS });
        inlineDetails.appendChild(inline);
        return inlineAppointmentElement;
    };
    InlineEdit.prototype.removeInlineAppointmentElement = function () {
        var inlineAppointment = [].slice.call(this.parent.element.querySelectorAll('.' + cls.INLINE_APPOINTMENT_CLASS));
        if (inlineAppointment.length > 0) {
            inlineAppointment.forEach(function (node) { return remove(node); });
        }
        var inlineSubject = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);
        if (inlineSubject) {
            var appointmentSubject = closest(inlineSubject, '.' + cls.APPOINTMENT_CLASS);
            removeClass([appointmentSubject.querySelector('.' + cls.SUBJECT_CLASS)], cls.DISABLE_CLASS);
            remove(inlineSubject);
        }
    };
    InlineEdit.prototype.createVerticalViewInline = function (saveObj, dayIndex, resIndex, daysCount) {
        var count = this.getEventDaysCount(saveObj);
        var verticalEvent = new VerticalEvent(this.parent);
        verticalEvent.initializeValues();
        var index = 0;
        if (count >= 1) {
            verticalEvent.allDayElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_CELLS_CLASS));
            var allDayElements = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_APPOINTMENT_CLASS));
            var allDayLevel = 0;
            if (allDayElements.length > 0) {
                allDayLevel = Math.floor(this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).getBoundingClientRect().height /
                    allDayElements[0].offsetHeight) - 1;
            }
            verticalEvent.allDayLevel = allDayLevel;
            verticalEvent.renderAllDayEvents(saveObj, index, resIndex, daysCount);
        }
        else {
            verticalEvent.renderNormalEvents(saveObj, index, resIndex, daysCount);
        }
    };
    InlineEdit.prototype.createMonthViewInline = function (saveObj, index, start, end) {
        var count = this.getEventDaysCount(saveObj);
        var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);
        var monthEvent = new MonthEvent(this.parent);
        monthEvent.dateRender = this.parent.activeView.renderDates;
        var renderDates = this.parent.activeView.renderDates;
        var workDays = this.parent.activeViewOptions.workDays;
        if (this.parent.activeCellsData.groupIndex >= 0) {
            monthEvent.workCells = [].slice.call(this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS + '[data-group-index="' + index + '"]'));
        }
        else {
            monthEvent.workCells = [].slice.call(this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS));
        }
        monthEvent.cellWidth = monthEvent.workCells[0].offsetWidth;
        monthEvent.cellHeight = monthEvent.workCells[0].offsetHeight;
        monthEvent.eventHeight = util.getElementHeightFromClass(this.parent.element, cls.APPOINTMENT_CLASS);
        monthEvent.getSlotDates(workDays);
        var filteredDates = monthEvent.getRenderedDates(renderDates);
        var splittedEvents = monthEvent.splitEvent(saveObject, filteredDates || renderDates);
        for (var _i = 0, splittedEvents_1 = splittedEvents; _i < splittedEvents_1.length; _i++) {
            var eventData = splittedEvents_1[_i];
            monthEvent.renderEvents(eventData, index);
        }
        var inlineSubject = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);
        inlineSubject.focus();
    };
    InlineEdit.prototype.createTimelineViewInline = function (saveObj, start, end, resIndex) {
        var count = this.getEventDaysCount(saveObj);
        var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);
        var timelineView = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? 'hour' : 'day');
        timelineView.dateRender = this.parent.activeView.renderDates;
        timelineView.eventContainers = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_CONTAINER_CLASS));
        if (this.parent.activeCellsData.groupIndex >= 0) {
            timelineView.workCells = [].slice.call(this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS + '[data-group-index="' + resIndex + '"]'));
        }
        else {
            timelineView.workCells = [].slice.call(this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS));
        }
        var workCell = this.parent.element.querySelector('.' + cls.WORK_CELLS_CLASS);
        timelineView.inlineValue = this.parent.options.allowInline;
        timelineView.cellWidth = workCell.offsetWidth;
        timelineView.cellHeight = workCell.offsetHeight;
        var dayLength = this.parent.element.querySelectorAll('.' + cls.CONTENT_TABLE_CLASS + ' tbody tr').length === 0 ?
            0 : this.parent.element.querySelectorAll('.' + cls.CONTENT_TABLE_CLASS + ' tbody tr')[0].children.length;
        timelineView.slotsPerDay = dayLength / timelineView.dateRender.length;
        timelineView.eventHeight = util.getElementHeightFromClass(timelineView.parent.element, cls.APPOINTMENT_CLASS);
        timelineView.renderEvents(saveObject, resIndex);
    };
    InlineEdit.prototype.getEventDaysCount = function (saveObj) {
        var startDate = saveObj.startTime;
        var endDate = saveObj.endTime;
        var daysCount = Math.abs(endDate.getTime() - startDate.getTime()) / util.MS_PER_DAY;
        return daysCount;
    };
    InlineEdit.prototype.generateEventData = function (target) {
        var inlineElement = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);
        var subject = inlineElement ? inlineElement.value : target ? target.innerHTML : '';
        var saveObj = {};
        saveObj.subject = subject;
        saveObj.startTime = this.parent.activeCellsData.startTime;
        saveObj.endTime = this.parent.activeCellsData.endTime;
        saveObj.isAllDay = this.parent.activeCellsData.isAllDay;
        if (this.parent.activeCellsData.groupIndex >= 0) {
            saveObj.groupIndex = this.parent.activeCellsData.groupIndex;
        }
        return saveObj;
    };
    InlineEdit.prototype.eventEdit = function (activeEvent) {
        var inlineSubject = this.parent.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS);
        var subject;
        if (inlineSubject) {
            subject = inlineSubject.value;
        }
        else {
            var subEle = activeEvent.querySelector('.' + cls.SUBJECT_CLASS);
            var timeEle = activeEvent.querySelector('.' + cls.APPOINTMENT_TIME);
            subject = subEle.innerText;
            inlineSubject = createElement('input', { className: cls.INLINE_SUBJECT_CLASS, attrs: { value: subject } });
            addClass([subEle], cls.DISABLE_CLASS);
            if (closest(activeEvent, '.' + cls.MORE_POPUP_WRAPPER_CLASS)) {
                activeEvent.insertBefore(inlineSubject, subEle);
            }
            else if (['Agenda', 'MonthAgenda'].indexOf(this.parent.options.currentView) > -1) {
                var subjectWrap = activeEvent.querySelector('.' + cls.SUBJECT_WRAP);
                subjectWrap.insertBefore(inlineSubject, subjectWrap.firstChild);
            }
            else {
                var elementSelector = ['TimelineWeek', 'TimelineMonth'].indexOf(this.parent.options.currentView) > -1 ?
                    '.e-inner-wrap' : '.e-appointment-details';
                activeEvent.querySelector(elementSelector).insertBefore(inlineSubject, timeEle);
            }
        }
        inlineSubject.focus();
        inlineSubject.setSelectionRange(subject.length, subject.length);
    };
    return InlineEdit;
}());
export { InlineEdit };
