var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { createElement, setStyleAttribute, closest, removeClass } from '@syncfusion/ej2-base';
import { EventBase } from './event-base';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
export var ADD_EMPTY_LENGTH = 5;
var BLOCK_INDICATOR_WIDTH = 24;
var MonthEvent = (function (_super) {
    __extends(MonthEvent, _super);
    function MonthEvent(parent) {
        var _this = _super.call(this, parent) || this;
        _this.renderedEvents = [];
        _this.allDayLevel = 0;
        _this.moreIndicatorHeight = 19;
        _this.monthHeaderHeight = 0;
        _this.maxHeight = _this.parent.options.enableMaxHeight && !_this.parent.options.enableIndicator
            && !_this.parent.options.rowAutoHeight;
        _this.withIndicator = _this.parent.options.enableMaxHeight && _this.parent.options.enableIndicator
            && !_this.parent.options.rowAutoHeight;
        _this.maxOrIndicator = (_this.maxHeight || _this.withIndicator);
        _this.moreIndicatorHeight =
            (_this.parent.options.rowAutoHeight && _this.parent.options.ignoreWhitespace) ? 0 : _this.moreIndicatorHeight;
        _this.eventTop = _this.parent.options.currentView === 'Month' ? 10 : 0;
        return _this;
    }
    MonthEvent.prototype.renderAppointments = function () {
        var eventsClass = '.' + cls.APPOINTMENT_CLASS + ', .' + cls.MORE_INDICATOR_CLASS;
        var blockEventClass = '.' + cls.BLOCK_APPOINTMENT_CLASS + ', .' + cls.BLOCK_INDICATOR_CLASS;
        var elementList = [].slice.call(this.parent.element.querySelectorAll(eventsClass + ', ' + blockEventClass));
        var workCell = this.parent.element.querySelector('.e-work-cells');
        if (!workCell) {
            return;
        }
        var conWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        if (this.parent.options.rowAutoHeight) {
            this.parent.uiStateValues.top = conWrap.scrollTop;
            this.parent.uiStateValues.left = conWrap.scrollLeft;
        }
        this.removeHeightProperty(cls.CONTENT_TABLE_CLASS);
        for (var i = 0; i < elementList.length; i++) {
            removeClass([elementList[i]], 'e-event-action');
            this.removedPositionedStyles(elementList[i]);
        }
        var content = workCell.offsetParent;
        this.cellHeight = content.offsetHeight / (content.querySelector('tbody').childElementCount);
        this.cellWidth = content.offsetWidth / (content.querySelector('tbody tr').childElementCount);
        var currentPanel = this.parent.element.querySelector('.e-current-panel');
        var appHeight = util.getElementHeightFromClass(currentPanel, cls.APPOINTMENT_CLASS);
        this.dateRender = this.parent.activeView.renderDates;
        for (var i = 0; i < elementList.length; i++) {
            var ele = elementList[i];
            var startTime = this.getStartTime(ele);
            var overlapCount = this.getOverLapCount(ele);
            var diffInDays = this.getDataCount(ele);
            var appWidth = (diffInDays * this.cellWidth) - 5;
            var appLeft = 0;
            var appRight = 0;
            var resIndex = this.getGroupIndex(ele);
            var cellTd = this.getCellTd(resIndex, startTime);
            var target = closest(cellTd, 'tr');
            this.monthHeaderHeight = this.parent.options.currentView === 'Month' ? cellTd.firstElementChild.offsetHeight : 0;
            var height = this.monthHeaderHeight + ((overlapCount + 1) * appHeight) + this.moreIndicatorHeight;
            if (this.parent.options.rowAutoHeight) {
                this.updateCellHeight(target.firstElementChild, height);
            }
            var top_1 = cellTd.offsetTop;
            var appTop = this.monthHeaderHeight + ((ele.classList.contains('e-block-appointment')) ? top_1 :
                top_1 + (overlapCount * appHeight)) + this.eventTop;
            appLeft = (this.parent.options.enableRtl) ? 0 : cellTd.offsetLeft;
            appRight = (this.parent.options.enableRtl) ? cellTd.parentElement.offsetWidth - cellTd.offsetLeft - this.cellWidth : 0;
            if (!ele.classList.contains('e-more-indicator')) {
                if (!ele.classList.contains('e-block-indicator')) {
                    setStyleAttribute(ele, {
                        'width': appWidth + 'px', 'left': appLeft + 'px', 'right': appRight + 'px', 'top': appTop + 'px'
                    });
                    if (this.maxOrIndicator) {
                        this.setMaxEventHeight(ele, cellTd);
                    }
                    if (ele.classList.contains('e-block-appointment')) {
                        setStyleAttribute(ele, {
                            'height': cellTd.offsetHeight - (appTop - cellTd.offsetTop) + 'px'
                        });
                    }
                    if (ele.classList.contains('e-appointment')) {
                        this.parent.eventBase.wireAppointmentEvents(ele);
                    }
                }
                else {
                    this.updateBlockIndicator(ele, appRight, appLeft, cellTd);
                }
            }
            else {
                this.updateMoreIndicator(ele, appRight, appLeft, top_1);
            }
        }
        this.updateRowHeight(appHeight);
    };
    MonthEvent.prototype.removedPositionedStyles = function (ele) {
        ele.style.removeProperty('width');
        ele.style.removeProperty('height');
        ele.style.removeProperty('left');
        ele.style.removeProperty('right');
        ele.style.removeProperty('top');
        ele.style.removeProperty('display');
    };
    MonthEvent.prototype.updateMoreIndicator = function (ele, right, left, top) {
        var appArea = this.cellHeight - this.moreIndicatorHeight;
        setStyleAttribute(ele, {
            'top': top + appArea + 'px', 'width': this.cellWidth - 2 + 'px', 'left': left + 'px', 'right': right + 'px'
        });
    };
    MonthEvent.prototype.updateBlockIndicator = function (ele, right, left, cell) {
        if (this.parent.options.enableRtl) {
            ele.style.right = (right + this.cellWidth) - BLOCK_INDICATOR_WIDTH + 'px';
        }
        else {
            ele.style.left = (left + this.cellWidth) - BLOCK_INDICATOR_WIDTH + 'px';
        }
        ele.style.top = cell.offsetTop + cell.firstElementChild.offsetTop + 22 + 'px';
        ele.style.position = 'absolute';
    };
    MonthEvent.prototype.setMaxEventHeight = function (event, cell) {
        var headerHeight = this.parent.options.currentView === 'Month' ?
            util.getOuterHeight(cell.querySelector('.' + cls.DATE_HEADER_CLASS)) : 0;
        var height = (cell.offsetHeight - headerHeight) - (this.maxHeight ? 0 : this.moreIndicatorHeight);
        setStyleAttribute(event, { 'height': height + 'px', 'align-items': 'center' });
    };
    MonthEvent.prototype.getCellTd = function (resIndex, date) {
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            return this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS +
                ' ' + 'tbody td[data-group-index="' + resIndex.toString() + '"][data-date="' + date.getTime() + '"]');
        }
        return this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS +
            ' ' + 'tbody td[data-date="' + date.getTime() + '"]');
    };
    MonthEvent.prototype.getGroupIndex = function (ele) {
        var index = parseInt(ele.getAttribute('data-group-index'), 10);
        return index ? index : 0;
    };
    MonthEvent.prototype.getOverLapCount = function (ele) {
        return parseInt(ele.getAttribute('data-index'), 10);
    };
    MonthEvent.prototype.getTotalLength = function (ele) {
        return parseInt(ele.getAttribute('data-total-length'), 10);
    };
    MonthEvent.prototype.getRowCount = function (ele) {
        return parseInt(ele.getAttribute('data-row-index'), 10);
    };
    MonthEvent.prototype.getStartTime = function (ele) {
        return new Date(parseInt(ele.getAttribute('data-start'), 10));
    };
    MonthEvent.prototype.getEndTime = function (ele) {
        return new Date(parseInt(ele.getAttribute('data-end'), 10));
    };
    MonthEvent.prototype.getDataCount = function (ele) {
        return parseInt(ele.getAttribute('data-total-length'), 10);
    };
    MonthEvent.prototype.updateRowHeight = function (appHeight) {
        if (this.parent.options.rowAutoHeight) {
            this.updateBlockElements();
            this.updateNormalEventElements(appHeight);
            this.updateBlockIndicatorEle();
            var data = {
                cssProperties: this.parent.getCssProperties(),
                isPreventScrollUpdate: true,
                scrollPosition: { left: this.parent.uiStateValues.left, top: this.parent.uiStateValues.top }
            };
            this.parent.onScrollUiUpdate(data);
        }
    };
    MonthEvent.prototype.updateBlockIndicatorEle = function () {
        var blockElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.BLOCK_INDICATOR_CLASS));
        for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {
            var element = blockElement_1[_i];
            var startTime = this.getStartTime(element);
            var resIndex = this.getGroupIndex(element);
            var cellTd = this.getCellTd(resIndex, startTime);
            var appLeft = (this.parent.options.enableRtl) ? 0 : cellTd.offsetLeft;
            var appRight = (this.parent.options.enableRtl) ?
                cellTd.parentElement.offsetWidth - cellTd.offsetLeft - this.cellWidth : 0;
            this.updateBlockIndicator(element, appRight, appLeft, cellTd);
        }
    };
    MonthEvent.prototype.updateBlockElements = function () {
        var blockElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.BLOCK_APPOINTMENT_CLASS));
        for (var _i = 0, blockElement_2 = blockElement; _i < blockElement_2.length; _i++) {
            var element = blockElement_2[_i];
            var startTime = this.getStartTime(element);
            var resIndex = this.getGroupIndex(element);
            var cellTd = this.getCellTd(resIndex, startTime);
            var height = cellTd.offsetHeight - this.monthHeaderHeight - 1;
            var width = Math.round(element.offsetWidth / cellTd.offsetWidth);
            width = (cellTd.offsetWidth * width);
            var appLeft = (this.parent.options.enableRtl) ? 0 : cellTd.offsetLeft;
            var appRight = (this.parent.options.enableRtl) ?
                cellTd.parentElement.offsetWidth - cellTd.offsetLeft - this.cellWidth : 0;
            var appTop = cellTd.offsetTop + this.monthHeaderHeight + this.eventTop;
            setStyleAttribute(element, {
                'width': width + 'px', 'left': appLeft + 'px', 'right': appRight + 'px', 'height': height + 'px', 'top': appTop + 'px'
            });
        }
    };
    MonthEvent.prototype.updateNormalEventElements = function (appHeight) {
        var blockElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_CLASS));
        for (var _i = 0, blockElement_3 = blockElement; _i < blockElement_3.length; _i++) {
            var element = blockElement_3[_i];
            var startTime = this.getStartTime(element);
            var resIndex = this.getGroupIndex(element);
            var cellTd = this.getCellTd(resIndex, startTime);
            var overlapCount = this.getOverLapCount(element);
            var appLeft = (this.parent.options.enableRtl) ? 0 : cellTd.offsetLeft;
            var appRight = (this.parent.options.enableRtl) ?
                cellTd.parentElement.offsetWidth - cellTd.offsetLeft - this.cellWidth : 0;
            var top_2 = this.monthHeaderHeight +
                cellTd.offsetTop + (overlapCount * appHeight) + this.eventTop;
            setStyleAttribute(element, {
                'left': appLeft + 'px', 'right': appRight + 'px', 'top': top_2 + 'px'
            });
        }
    };
    MonthEvent.prototype.updateCellHeight = function (cell, height) {
        if ((height > cell.offsetHeight)) {
            setStyleAttribute(cell, { 'height': height + 'px' });
        }
    };
    MonthEvent.prototype.getSlotDates = function (workDays) {
        this.slots = [];
        var dates = this.dateRender.map(function (date) { return +date; });
        var noOfDays = this.parent.activeViewOptions.showWeekend ? util.WEEK_LENGTH : workDays.length;
        while (dates.length > 0) {
            this.slots.push(dates.splice(0, noOfDays));
        }
    };
    MonthEvent.prototype.renderEvents = function (event, resIndex, eventsList) {
        var startTime = event.startTime;
        var day = this.parent.getIndexOfDate(this.dateRender, util.resetTime(startTime));
        var diffInDays = event.data.count;
        var appWidth = (diffInDays * this.cellWidth) - 5;
        var cellTd = this.workCells[day];
        var appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
        setStyleAttribute(appointmentElement, { 'width': appWidth + 'px' });
        this.renderEventElement(appointmentElement, cellTd);
    };
    MonthEvent.prototype.renderEventElement = function (appointmentElement, cellTd) {
        var wrapper = createElement('div', { className: cls.APPOINTMENT_WRAPPER_CLASS });
        wrapper.appendChild(appointmentElement);
        cellTd.appendChild(wrapper);
    };
    MonthEvent.prototype.removeHeightProperty = function (selector) {
        var rows = [].slice.call(this.parent.element.querySelectorAll('.' + selector + ' tbody tr'));
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
            var row = rows_1[_i];
            row.firstElementChild.style.height = '';
        }
    };
    return MonthEvent;
}(EventBase));
export { MonthEvent };
