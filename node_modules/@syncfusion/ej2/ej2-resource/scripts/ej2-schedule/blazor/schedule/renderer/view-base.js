import { isNullOrUndefined, setStyleAttribute, formatUnit } from '@syncfusion/ej2-base';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
var ViewBase = (function () {
    function ViewBase(parent) {
        this.parent = parent;
    }
    ViewBase.prototype.onDataReady = function (args) {
    };
    ViewBase.prototype.getScrollXIndent = function (content) {
        return content.offsetHeight - content.clientHeight > 0 ? util.getScrollBarWidth() : 0;
    };
    ViewBase.prototype.scrollTopPanel = function (target) {
        this.getDatesHeaderElement().firstElementChild.scrollLeft = target.scrollLeft;
    };
    ViewBase.prototype.scrollHeaderLabels = function (target) {
        var headerTable = this.element.querySelector('.e-date-header-wrap table');
        var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll('colgroup col').length;
        var applyLeft = function (headerCells, isRtl) {
            var currentCell;
            var tdLeft = 0;
            var colSpan = 0;
            var hiddenLeft = isRtl ? target.scrollWidth - target.offsetWidth - target.scrollLeft : target.scrollLeft;
            for (var _i = 0, headerCells_2 = headerCells; _i < headerCells_2.length; _i++) {
                var cell = headerCells_2[_i];
                colSpan += parseInt(cell.getAttribute('colSpan'), 10);
                if (colSpan > Math.floor(hiddenLeft / colWidth)) {
                    currentCell = cell;
                    break;
                }
                tdLeft += cell.offsetWidth;
            }
            if (!isNullOrUndefined(currentCell)) {
                currentCell.children[0].style[isRtl ? 'right' : 'left'] = (hiddenLeft - tdLeft) + 'px';
            }
        };
        var classNames = ['.e-header-year-cell', '.e-header-month-cell', '.e-header-week-cell', '.e-header-cells'];
        for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
            var className = classNames_1[_i];
            var headerCells = [].slice.call(this.element.querySelectorAll(className));
            if (headerCells.length > 0) {
                for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
                    var element = headerCells_1[_a];
                    element.children[0].style[this.parent.options.enableRtl ? 'right' : 'left'] = '';
                }
                applyLeft(headerCells, this.parent.options.enableRtl);
            }
        }
    };
    ViewBase.prototype.getHeaderBarHeight = function (includeResHeight) {
        if (includeResHeight === void 0) { includeResHeight = false; }
        var headerBarHeight = 2;
        var headerBar = this.parent.element.querySelector('.' + cls.HEADER_TOOLBAR);
        if (headerBar) {
            headerBarHeight += util.getOuterHeight(headerBar);
        }
        if (this.parent.uiStateValues.isGroupAdaptive || includeResHeight) {
            var resHeader = this.parent.element.querySelector('.' + cls.RESOURCE_HEADER_TOOLBAR);
            if (resHeader) {
                headerBarHeight += resHeader.offsetHeight;
            }
        }
        return headerBarHeight;
    };
    ViewBase.prototype.getDatesHeaderElement = function () {
        return this.element.querySelector('.' + cls.DATE_HEADER_CONTAINER_CLASS);
    };
    ViewBase.prototype.highlightCurrentTime = function () {
    };
    ViewBase.prototype.getStartHour = function () {
        var startHour = this.parent.getStartEndTime(this.parent.activeViewOptions.startHour);
        if (isNullOrUndefined(startHour)) {
            startHour = new Date(2000, 0, 0, 0);
        }
        return startHour;
    };
    ViewBase.prototype.getEndHour = function () {
        var endHour = this.parent.getStartEndTime(this.parent.activeViewOptions.endHour);
        if (isNullOrUndefined(endHour)) {
            endHour = new Date(2000, 0, 0, 0);
        }
        return endHour;
    };
    ViewBase.prototype.isCurrentDate = function (date) {
        return date.setHours(0, 0, 0, 0) === this.parent.getCurrentTime().setHours(0, 0, 0, 0);
    };
    ViewBase.prototype.isCurrentMonth = function (date) {
        return date.getFullYear() ===
            this.parent.getCurrentTime().getFullYear() && date.getMonth() === this.parent.getCurrentTime().getMonth();
    };
    ViewBase.prototype.isWorkDay = function (date, workDays) {
        if (workDays === void 0) { workDays = this.parent.activeViewOptions.workDays; }
        if (workDays.indexOf(date.getDay()) >= 0) {
            return true;
        }
        return false;
    };
    ViewBase.prototype.isWorkHour = function (date, startHour, endHour, workDays) {
        if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour)) {
            return false;
        }
        startHour.setMilliseconds(0);
        endHour.setMilliseconds(0);
        return !(util.getDateInMs(date) < util.getDateInMs(startHour) || util.getDateInMs(date) >= util.getDateInMs(endHour) ||
            !this.isWorkDay(date, workDays));
    };
    ViewBase.prototype.getRenderDates = function (workDays) {
        var renderDates = [];
        if (this.parent.options.currentView === 'Week' || this.parent.options.currentView === 'TimelineWeek') {
            var selectedDate = util.resetTime(this.parent.options.selectedDate);
            var start = util.getWeekFirstDate(selectedDate, this.parent.activeViewOptions.firstDayOfWeek);
            for (var i = 0, length_1 = util.WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {
                if (this.parent.activeViewOptions.showWeekend) {
                    renderDates.push(start);
                }
                else {
                    if (this.isWorkDay(start, workDays)) {
                        renderDates.push(start);
                    }
                }
                start = util.addDays(start, 1);
            }
        }
        else if (this.parent.options.currentView === 'WorkWeek' || this.parent.options.currentView === 'TimelineWorkWeek') {
            var date = util.resetTime(this.parent.options.selectedDate);
            var start = util.getWeekFirstDate(date, this.parent.activeViewOptions.firstDayOfWeek);
            for (var i = 0, length_2 = util.WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {
                if (this.isWorkDay(start, workDays)) {
                    renderDates.push(start);
                }
                start = util.addDays(start, 1);
            }
        }
        else {
            var start = util.resetTime(this.parent.options.selectedDate);
            do {
                if (this.parent.activeViewOptions.showWeekend) {
                    renderDates.push(start);
                }
                else {
                    if (this.isWorkDay(start, workDays)) {
                        renderDates.push(start);
                    }
                }
                start = util.addDays(start, 1);
            } while (this.parent.activeViewOptions.interval !== renderDates.length);
        }
        if (!workDays) {
            this.renderDates = renderDates;
        }
        return renderDates;
    };
    ViewBase.prototype.getColElements = function () {
        return [].slice.call(this.element.querySelectorAll('.' + cls.CONTENT_WRAP_CLASS + ' col, .' + cls.DATE_HEADER_WRAP_CLASS + ' col'));
    };
    ViewBase.prototype.setColWidth = function (content) {
        if (this.parent.isTimelineView()) {
            var colElements = this.getColElements();
            var contentBody = this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS + ' tbody');
            var colWidth_1 = Math.ceil(contentBody.offsetWidth / (colElements.length / 2));
            colElements.forEach(function (col) { return setStyleAttribute(col, { 'width': formatUnit(colWidth_1) }); });
            if (content.offsetHeight !== content.clientHeight) {
                var leftPanelSelector = "." + cls.MONTH_HEADER_WRAPPER + ",." + cls.RESOURCE_COLUMN_WRAP_CLASS;
                var leftPanel = this.parent.element.querySelector(leftPanelSelector);
                if (!isNullOrUndefined(leftPanel)) {
                    setStyleAttribute(leftPanel, { 'height': formatUnit(content.clientHeight) });
                }
            }
        }
    };
    ViewBase.prototype.resetColWidth = function () {
        var colElements = this.getColElements();
        for (var _i = 0, colElements_1 = colElements; _i < colElements_1.length; _i++) {
            var col = colElements_1[_i];
            col.style.width = '';
        }
    };
    ViewBase.prototype.getContentAreaElement = function () {
        return this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
    };
    ViewBase.prototype.scrollToDate = function (scrollDate) {
        if (['Month', 'TimelineMonth'].indexOf(this.parent.options.currentView) === -1 || isNullOrUndefined(scrollDate)) {
            return;
        }
        var scrollWrap = this.getContentAreaElement();
        var tdDate = this.parent.getMsFromDate(new Date(util.resetTime(new Date(+scrollDate)).getTime()));
        var dateElement = scrollWrap.querySelector("." + cls.WORK_CELLS_CLASS + "[data-date=\"" + tdDate + "\"]");
        if (this.parent.options.currentView === 'Month' && dateElement) {
            scrollWrap.scrollTop = dateElement.offsetTop;
        }
        if (this.parent.options.currentView === 'TimelineMonth' && dateElement) {
            if (!this.parent.options.enableRtl) {
                scrollWrap.scrollLeft = dateElement.offsetLeft;
            }
            else {
                scrollWrap.scrollLeft = -(this.parent.getContentTable().offsetWidth - dateElement.offsetLeft - dateElement.offsetWidth);
            }
        }
    };
    ViewBase.prototype.getPanel = function () {
        return this.element;
    };
    ViewBase.prototype.retainScrollPosition = function () {
        if (this.parent.options.enablePersistence) {
            var contentWrap = this.element.querySelector('.e-content-wrap');
            if (!isNullOrUndefined(contentWrap)) {
                var props = JSON.parse(window.localStorage.getItem(this.parent.element.id));
                if (!isNullOrUndefined(props)) {
                    var top_1 = props.top;
                    var left = props.left;
                    if (!isNullOrUndefined(top_1) && !isNullOrUndefined(left)) {
                        contentWrap.scrollTop = top_1;
                        contentWrap.scrollLeft = left;
                    }
                }
            }
        }
    };
    return ViewBase;
}());
export { ViewBase };
