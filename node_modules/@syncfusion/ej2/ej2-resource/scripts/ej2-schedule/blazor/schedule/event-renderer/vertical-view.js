import { formatUnit, setStyleAttribute, addClass, removeClass, EventHandler } from '@syncfusion/ej2-base';
import * as util from '../base/util';
import * as cls from '../base/css-constant';
export var ADD_BORDER_LENGTH = 4;
export var DEFAULT_ALL_DAY_ROW_LENGTH = 4;
var VerticalEvent = (function () {
    function VerticalEvent(parent) {
        this.allDayLevel = 0;
        this.moreIndicatorTop = 0;
        this.parent = parent;
        this.slotCount = parent.activeViewOptions.timeScale.slotCount;
        this.interval = parent.activeViewOptions.timeScale.interval;
        this.element = this.parent.activeView.getPanel();
    }
    VerticalEvent.prototype.renderAppointments = function () {
        var expandCollapse = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_SECTION_CLASS);
        if (expandCollapse) {
            EventHandler.remove(expandCollapse, 'click', this.rowExpandCollapse);
            EventHandler.add(expandCollapse, 'click', this.rowExpandCollapse, this);
        }
        var workCell = this.parent.element.querySelector('.' + cls.WORK_CELLS_CLASS);
        if (!workCell) {
            return;
        }
        var contentWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        var normalElementList = [].slice.call(contentWrap.querySelectorAll('.' + cls.APPOINTMENT_CLASS));
        var blockElementList = [].slice.call(contentWrap.querySelectorAll('.' + cls.BLOCK_APPOINTMENT_CLASS));
        var elementList = normalElementList.concat(blockElementList);
        var cellHeight = 0;
        var cellWidth = 0;
        var content = workCell.offsetParent;
        cellHeight = content.offsetHeight / (content.querySelector('tbody').childElementCount);
        cellWidth = content.offsetWidth / (content.querySelector('tbody tr').childElementCount);
        for (var i = 0; i < elementList.length; i++) {
            var ele = elementList[i];
            removeClass([ele], 'e-event-action');
            var columnCount = this.getColumn(ele);
            var widthSize = this.getAppWidth(this.getColumnCounts(ele));
            ele.style.top =
                ((this.getTopStartDuration(ele) / (this.parent.activeViewOptions.timeScale.interval /
                    this.parent.activeViewOptions.timeScale.slotCount * 60000)) * cellHeight) + 'px';
            ele.style.left = this.getEventLeft(widthSize, columnCount);
            ele.style.width = ele.classList.contains(cls.BLOCK_APPOINTMENT_CLASS) ? '100%' : widthSize;
            ele.style.height = ((((this.getTopStartDuration(ele) + this.getDuration(ele)) /
                (this.parent.activeViewOptions.timeScale.interval /
                    this.parent.activeViewOptions.timeScale.slotCount * 60000)) * cellHeight) -
                ((this.getTopStartDuration(ele) / (this.parent.activeViewOptions.timeScale.interval /
                    this.parent.activeViewOptions.timeScale.slotCount * 60000)) * cellHeight)) + 'px';
            this.parent.eventBase.wireAppointmentEvents(ele);
        }
        var allDayRowTop = this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).offsetTop;
        var allDaylementList = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_APPOINTMENT_CLASS));
        var appHeight = allDaylementList.length > 0 ? allDaylementList[0].offsetHeight : 0;
        var allDayWrapper = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS));
        this.setAllDayRowHeight(0);
        for (var j = 0; j < allDayWrapper.length; j++) {
            var eleList = allDayWrapper[j].children;
            for (var i = 0; i < eleList.length; i++) {
                var ele = eleList[i];
                var allDayRowHeight = 0;
                if (!ele.classList.contains(cls.ROW_COUNT_WRAPPER_CLASS)) {
                    if (this.parent.uiStateValues.expand) {
                        removeClass([ele], cls.EVENT_COUNT_CLASS);
                    }
                    var rowCount = this.getRowCount(ele);
                    var totalLength = this.getTotalLength(ele);
                    this.allDayLevel = (this.allDayLevel < rowCount) ? rowCount : this.allDayLevel;
                    ele.style.top = allDayRowTop + (rowCount * appHeight) + 'px';
                    ele.style.width = (cellWidth * totalLength) - 15 + 'px';
                    allDayRowHeight = ((!this.parent.uiStateValues.expand && this.allDayLevel > 3) ?
                        (DEFAULT_ALL_DAY_ROW_LENGTH * appHeight) : ((this.allDayLevel + 1) * appHeight)) + ADD_BORDER_LENGTH;
                    this.parent.eventBase.wireAppointmentEvents(ele);
                    this.setAllDayRowHeight(allDayRowHeight);
                }
                else {
                    this.moreIndicatorTop = allDayRowTop + (DEFAULT_ALL_DAY_ROW_LENGTH * appHeight);
                    if (!this.parent.uiStateValues.expand) {
                        ele.style.top = this.moreIndicatorTop + 'px';
                        allDayRowHeight = (DEFAULT_ALL_DAY_ROW_LENGTH * appHeight) + ADD_BORDER_LENGTH;
                        this.setAllDayRowHeight(allDayRowHeight);
                    }
                }
            }
        }
        var moreIndicatorElement = [].slice.call(this.element.querySelectorAll('.' + cls.MORE_INDICATOR_CLASS));
        for (var i = 0; i < moreIndicatorElement.length; i++) {
            EventHandler.clearEvents(moreIndicatorElement[i]);
            EventHandler.add(moreIndicatorElement[i], 'click', this.rowExpandCollapse, this);
        }
        this.parent.setDimensions();
    };
    VerticalEvent.prototype.getAppWidth = function (overlapEvents) {
        var width = this.parent.options.currentView === 'Day' ? 97 : 94;
        var tempWidth = ((width - overlapEvents) / overlapEvents);
        return (tempWidth < 0 ? 0 : tempWidth) + '%';
    };
    VerticalEvent.prototype.getEventLeft = function (appWidth, index) {
        var tempLeft = (parseFloat(appWidth) + 1) * index;
        return (tempLeft > 99 ? 99 : tempLeft) + '%';
    };
    VerticalEvent.prototype.setAllDayRowHeight = function (height) {
        var allDayElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_CELLS_CLASS));
        for (var i = 0; i < allDayElement.length; i++) {
            allDayElement[i].style.height = (height / 12) + 'em';
        }
    };
    VerticalEvent.prototype.getRowCount = function (ele) {
        return parseInt(ele.getAttribute('data-row-index'), 10);
    };
    VerticalEvent.prototype.getTotalLength = function (ele) {
        return parseInt(ele.getAttribute('data-total-length'), 10);
    };
    VerticalEvent.prototype.getDuration = function (ele) {
        return parseInt(ele.getAttribute('data-duration'), 10);
    };
    VerticalEvent.prototype.getTopStartDuration = function (ele) {
        return parseInt(ele.getAttribute('data-top-start-duration'), 10);
    };
    VerticalEvent.prototype.getColumnCounts = function (ele) {
        return parseInt(ele.getAttribute('data-columns-count'), 10);
    };
    VerticalEvent.prototype.getColumn = function (ele) {
        return parseInt(ele.getAttribute('data-columns'), 10);
    };
    VerticalEvent.prototype.rowExpandCollapse = function () {
        var target = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_SECTION_CLASS);
        this.parent.uiStateValues.expand = target.classList.contains(cls.APPOINTMENT_ROW_EXPAND_CLASS);
        var allDaylementList = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_APPOINTMENT_CLASS));
        var appHeight = allDaylementList.length > 0 ? allDaylementList[0].offsetHeight : 0;
        var rowHeight;
        if (this.parent.uiStateValues.expand) {
            target.setAttribute('title', 'Collapse-all-day-section');
            target.setAttribute('aria-label', 'Collapse section');
            rowHeight = ((this.allDayLevel + 1) * appHeight) + ADD_BORDER_LENGTH;
        }
        else {
            target.setAttribute('title', 'Expand-all-day-section');
            target.setAttribute('aria-label', 'Expand section');
            rowHeight = (DEFAULT_ALL_DAY_ROW_LENGTH * appHeight) + ADD_BORDER_LENGTH;
        }
        this.setAllDayRowHeight(rowHeight);
        this.addOrRemoveClass();
        this.parent.setDimensions();
    };
    VerticalEvent.prototype.addOrRemoveClass = function () {
        var _this = this;
        var moreEvents = [].slice.call(this.parent.element.querySelectorAll('.e-more-event'));
        moreEvents.filter(function (element) {
            if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {
                addClass([element], cls.EVENT_COUNT_CLASS);
                element.setAttribute('tabindex', '-1');
            }
            else {
                removeClass([element], cls.EVENT_COUNT_CLASS);
                element.setAttribute('tabindex', '0');
            }
        });
        var moreEventCount = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_SECTION_CLASS);
        if (this.parent.uiStateValues.expand) {
            removeClass([moreEventCount], cls.APPOINTMENT_ROW_EXPAND_CLASS);
            addClass([moreEventCount], cls.APPOINTMENT_ROW_COLLAPSE_CLASS);
        }
        else {
            removeClass([moreEventCount], cls.APPOINTMENT_ROW_COLLAPSE_CLASS);
            addClass([moreEventCount], cls.APPOINTMENT_ROW_EXPAND_CLASS);
        }
        if (this.allDayLevel > 2) {
            removeClass([moreEventCount], cls.DISABLE_CLASS);
        }
        else {
            addClass([moreEventCount], cls.DISABLE_CLASS);
        }
        var countCell = [].slice.call(this.element.querySelectorAll('.' + cls.ROW_COUNT_WRAPPER_CLASS));
        countCell.filter(function (element) {
            if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {
                removeClass([element], cls.DISABLE_CLASS);
                element.style.top = _this.moreIndicatorTop + 'px';
            }
            else {
                addClass([element], cls.DISABLE_CLASS);
            }
        });
    };
    VerticalEvent.prototype.initializeValues = function () {
        this.cellHeight =
            parseFloat(this.parent.element.querySelector('.e-content-wrap tbody tr').getBoundingClientRect().height.toFixed(2));
    };
    VerticalEvent.prototype.getHeight = function (start, end) {
        var appHeight = (end.getTime() - start.getTime()) / (60 * 1000) * (this.cellHeight * this.slotCount) / this.interval;
        appHeight = (appHeight <= 0) ? this.cellHeight : appHeight;
        return appHeight;
    };
    VerticalEvent.prototype.renderNormalEvents = function (eventObj, dayIndex, resource, dayCount) {
        var record = eventObj;
        var eStart = record.startTime;
        var eEnd = record.endTime;
        var topValue = 0;
        var appHeight = this.getHeight(eStart, eEnd);
        topValue = this.getTopValue(eStart, dayIndex);
        var appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
        setStyleAttribute(appointmentElement, {
            'width': (this.getEventWidth()),
            'height': appHeight + 'px', 'top': topValue + 'px'
        });
        var index = this.parent.activeViewOptions.group.byDate ? (dayIndex) + resource : dayCount;
        var appointmentWrap = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_WRAPPER_CLASS));
        appointmentWrap[index].appendChild(appointmentElement);
    };
    VerticalEvent.prototype.getEventWidth = function () {
        var width = this.parent.options.currentView === 'Day' ? 97 : 94;
        return (width < 0 ? 0 : width) + '%';
    };
    VerticalEvent.prototype.getTopValue = function (date, day) {
        var currentDate = util.resetTime(this.parent.activeView.renderDates[day]);
        var tDay = new Date();
        tDay.setHours(0, 0, 0, 0);
        var startEndHours = this.parent.eventBase.getStEdHours(currentDate, this.parent.activeView.getStartHour(), this.parent.activeView.getEndHour());
        var startHour = startEndHours.startHour;
        var diffInMinutes = ((date.getHours() - startHour.getHours()) * 60) + (date.getMinutes() - startHour.getMinutes());
        return (diffInMinutes * this.cellHeight * this.slotCount) / this.interval;
    };
    VerticalEvent.prototype.renderAllDayEvents = function (eventObj, dayIndex, resource, dayCount) {
        var record = eventObj;
        var allDayRowCell = this.parent.element.querySelector('.' + cls.ALLDAY_CELLS_CLASS + ':first-child');
        var cellTop = allDayRowCell.offsetTop;
        var appWidth = 0;
        var topValue = 1;
        var allDayIndex = 0;
        record.Index = allDayIndex;
        this.allDayLevel = (this.allDayLevel < allDayIndex) ? allDayIndex : this.allDayLevel;
        var widthAdjustment = this.parent.options.currentView === 'Day' ? 4 : 7;
        appWidth = 100 - widthAdjustment;
        var wIndex = this.parent.activeViewOptions.group.byDate ? (dayIndex) + resource : dayCount;
        var eventWrapper = this.parent.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS +
            ':nth-child(' + (wIndex + 1) + ')');
        var appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
        eventWrapper.appendChild(appointmentElement);
        topValue += cellTop + 1;
        setStyleAttribute(appointmentElement, { 'width': appWidth + '%', 'top': formatUnit(topValue) });
        addClass([appointmentElement], cls.ALLDAY_APPOINTMENT_CLASS);
    };
    return VerticalEvent;
}());
export { VerticalEvent };
