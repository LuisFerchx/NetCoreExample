var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { createElement, closest, Draggable, extend, formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';
import { addClass, remove, removeClass, setStyleAttribute, Browser, EventHandler } from '@syncfusion/ej2-base';
import { ActionBase } from '../actions/action-base';
import { MonthEvent } from '../event-renderer/month';
import { TimelineEvent } from '../event-renderer/timeline-view';
import { VerticalEvent } from '../event-renderer/vertical-view';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
var MINUTES_PER_DAY = 1440;
var DragAndDrop = (function (_super) {
    __extends(DragAndDrop, _super);
    function DragAndDrop() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.widthUptoCursorPoint = 0;
        _this.heightUptoCursorPoint = 0;
        _this.cursorPointIndex = 0;
        _this.isHeaderRows = false;
        _this.isTimelineDayProcess = false;
        _this.widthPerMinute = 0;
        _this.heightPerMinute = 0;
        _this.minDiff = 0;
        _this.isStepDragging = false;
        _this.isMorePopupOpened = false;
        _this.isAllDayDrag = false;
        _this.isMultiSelect = false;
        _this.multiData = [];
        _this.updatedData = [];
        _this.swagData = [];
        _this.startTime = 0;
        _this.isAllDayTarget = false;
        _this.targetTd = null;
        _this.cloneElements = [];
        return _this;
    }
    DragAndDrop.prototype.wireDragEvent = function (element) {
        if (element.ej2_instances) {
            var dragInstance = [].slice.call(element.ej2_instances);
            dragInstance.forEach(function (instance) { return instance.destroy(); });
        }
        var dragObj = new Draggable(element, {
            abort: '.' + cls.EVENT_RESIZE_CLASS,
            clone: true,
            isDragScroll: true,
            enableTapHold: this.parent.isAdaptive,
            enableTailMode: (this.parent.options.eventDragArea) ? true : false,
            cursorAt: (this.parent.options.eventDragArea) ? { left: -20, top: -20 } : { left: 0, top: 0 },
            dragArea: (this.parent.options.eventDragArea) ?
                document.querySelector(this.parent.options.eventDragArea) :
                this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS),
            dragStart: this.dragStart.bind(this),
            drag: this.drag.bind(this),
            dragStop: this.dragStop.bind(this),
            enableAutoScroll: false,
            helper: this.dragHelper.bind(this),
            queryPositionInfo: this.dragPosition.bind(this)
        });
        if (!(dragObj.enableTapHold && Browser.isDevice && Browser.isTouch)) {
            EventHandler.remove(element, 'touchstart', dragObj.initialize);
        }
    };
    DragAndDrop.prototype.dragHelper = function (e) {
        var _this = this;
        this.setDragActionDefaultValues();
        this.actionObj.element = e.element;
        this.actionObj.action = 'drag';
        var elements = [];
        if (!this.parent.options.allowMultiDrag || isNullOrUndefined(this.parent.selectedElements) ||
            this.parent.selectedElements.length === 0 || (this.parent.selectedElements.length > 0 &&
            this.parent.selectedElements.indexOf(this.actionObj.element) === -1)) {
            elements = [e.element];
        }
        else {
            elements = this.parent.selectedElements;
            this.isMultiSelect = true;
        }
        elements.forEach(function (ele) {
            var cloneElement = _this.createCloneElement(ele);
            if (ele.getAttribute('data-guid') === _this.actionObj.element.getAttribute('data-guid')) {
                _this.actionObj.clone = cloneElement;
                if (!_this.parent.options.eventDragArea && _this.parent.options.currentView !== 'Month' &&
                    _this.parent.activeViewOptions.timeScale.enable && !_this.parent.isTimelineView() &&
                    !_this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {
                    setStyleAttribute(_this.actionObj.clone, { cursor: 'move', left: '0%', right: '0%', width: '100%' });
                }
                _this.actionObj.clone.style.top = formatUnit(_this.actionObj.element.offsetTop);
            }
            _this.actionObj.cloneElement.push(cloneElement);
            _this.cloneElements.push(cloneElement);
            _this.actionObj.originalElement.push(ele);
        });
        return this.actionObj.clone;
    };
    DragAndDrop.prototype.dragPosition = function (e) {
        if (this.parent.options.eventDragArea) {
            return { left: e.left, top: e.top };
        }
        var cellHeight = (this.actionObj.cellHeight / this.actionObj.slotInterval) * this.actionObj.interval;
        var leftValue = formatUnit(0);
        if (this.parent.isTimelineView() || this.parent.options.currentView === 'Month' ||
            (!this.parent.isTimelineView() && !this.parent.activeViewOptions.timeScale.enable)) {
            leftValue = formatUnit(this.actionObj.clone.offsetLeft);
        }
        var topValue;
        if ((this.parent.options.currentView === 'Month' || this.parent.isTimelineView() ||
            !this.parent.activeViewOptions.timeScale.enable ||
            (!isNullOrUndefined(this.actionObj.clone.offsetParent) &&
                this.actionObj.clone.offsetParent.classList.contains(cls.MORE_EVENT_POPUP_CLASS)))) {
            topValue = formatUnit(this.actionObj.clone.offsetTop);
        }
        else if (this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {
            topValue = formatUnit(this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).offsetTop);
            setStyleAttribute(this.actionObj.clone, {
                width: formatUnit(Math.ceil(this.actionObj.clone.offsetWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth),
                right: this.parent.options.enableRtl && formatUnit(0)
            });
        }
        else {
            if (this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS) &&
                !this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {
                setStyleAttribute(this.actionObj.clone, {
                    height: formatUnit(this.actionObj.cellHeight),
                    width: formatUnit(this.actionObj.cellWidth - 1),
                    pointerEvents: 'none'
                });
            }
            var top_1 = parseInt(e.top, 10);
            top_1 = top_1 < 0 ? 0 : top_1;
            topValue = formatUnit(Math.ceil(top_1 / cellHeight) * cellHeight);
            var scrollHeight = this.parent.element.querySelector('.e-content-wrap').scrollHeight;
            var cloneBottom = parseInt(topValue, 10) + this.actionObj.clone.offsetHeight;
            if (cloneBottom > scrollHeight) {
                topValue = (parseInt(topValue, 10) - (cloneBottom - scrollHeight)) + 'px';
            }
        }
        return { left: leftValue, top: topValue };
    };
    DragAndDrop.prototype.setDragActionDefaultValues = function () {
        this.actionObj.action = 'drag';
        this.actionObj.isAllDay = null;
        this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;
        this.actionObj.interval = this.actionObj.slotInterval;
        var workCell = this.parent.element.querySelector('.' + cls.WORK_CELLS_CLASS);
        this.actionObj.cellWidth = workCell.offsetWidth;
        this.actionObj.cellHeight = workCell.offsetHeight;
    };
    DragAndDrop.prototype.dragStart = function (e) {
        var _this = this;
        var eventGuids = [];
        var eventGuid = this.actionObj.element.getAttribute('data-guid');
        if (this.isMultiSelect) {
            this.parent.selectedElements.forEach(function (ele) {
                var guid = ele.getAttribute('data-guid');
                if (eventGuids.indexOf(guid) === -1) {
                    eventGuids.push(guid);
                }
            });
        }
        var dragArgs = {
            cancel: false,
            excludeSelectors: null,
            interval: this.actionObj.interval,
            navigation: { enable: false, timeDelay: 2000 },
            scroll: { enable: true, scrollBy: 30, timeDelay: 100 }
        };
        var args = JSON.stringify(dragArgs);
        this.parent.dotNetRef.invokeMethodAsync('OnDragStart', args, eventGuid, eventGuids).then(function (dragData) {
            var dragEventArgs = dragData.dragEventArgs;
            _this.actionObj.isAllDay = dragData.isAllDay;
            _this.actionObj.event = extend({}, dragData, null, true);
            delete (_this.actionObj.event.dragEventArgs);
            _this.actionObj.event.startTime = new Date(_this.actionObj.event.startTime);
            _this.actionObj.event.endTime = new Date(_this.actionObj.event.endTime);
            var eventObj = extend({}, _this.actionObj.event, null, true);
            if (dragEventArgs.cancel || (!isNullOrUndefined(_this.actionObj.element) &&
                isNullOrUndefined(_this.actionObj.element.parentElement))) {
                var dragObj = _this.actionObj.element.ej2_instances[0];
                if (!isNullOrUndefined(dragObj)) {
                    dragObj.intDestroy(e.event);
                }
                _this.actionObj.action = '';
                _this.removeCloneElementClasses();
                _this.removeCloneElement();
                return;
            }
            else {
                e.bindEvents(e.dragElement);
            }
            _this.actionClass('addClass');
            if (_this.isMultiSelect && !isNullOrUndefined(dragData.selectedData)) {
                delete (_this.actionObj.event.selectedData);
                delete (eventObj.selectedData);
                _this.startTime = eventObj.startTime.getTime();
                _this.getSelectedData(dragData.selectedData);
            }
            _this.parent.uiStateValues.action = true;
            _this.actionObj.start = eventObj.startTime;
            _this.actionObj.end = eventObj.endTime;
            _this.actionObj.groupIndex = parseInt(_this.actionObj.element.getAttribute('data-group-index') || '0', 10);
            _this.actionObj.interval = dragEventArgs.interval;
            _this.actionObj.navigation = dragEventArgs.navigation;
            _this.actionObj.scroll = dragEventArgs.scroll;
            _this.actionObj.excludeSelectors = dragEventArgs.excludeSelectors;
            var viewElement = _this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
            _this.scrollArgs = { element: viewElement, width: viewElement.scrollWidth, height: viewElement.scrollHeight };
            _this.widthPerMinute = (_this.actionObj.cellWidth / _this.actionObj.slotInterval) * _this.actionObj.interval;
            _this.heightPerMinute = (_this.actionObj.cellHeight / _this.actionObj.slotInterval) * _this.actionObj.interval;
            _this.widthUptoCursorPoint = 0;
            _this.heightUptoCursorPoint = 0;
            _this.cursorPointIndex = -1;
            _this.isHeaderRows = false;
            _this.isTimelineDayProcess = false;
            _this.minDiff = 0;
            _this.isMorePopupOpened = false;
            _this.daysVariation = -1;
            _this.isAllDayTarget = _this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS);
            if ((_this.parent.isTimelineView() || !_this.parent.activeViewOptions.timeScale.enable)) {
                if (!isNullOrUndefined(_this.actionObj.clone.offsetParent) &&
                    _this.actionObj.clone.offsetParent.classList.contains(cls.MORE_EVENT_POPUP_CLASS)) {
                    _this.isMorePopupOpened = true;
                }
                var rows = _this.parent.activeViewOptions.headerRows;
                _this.isHeaderRows = rows.length > 0 && rows[rows.length - 1].option !== 'Hour' &&
                    rows[rows.length - 1].option !== 'Date';
                _this.isTimelineDayProcess = !_this.parent.activeViewOptions.timeScale.enable || _this.isHeaderRows ||
                    _this.parent.options.currentView === 'TimelineMonth' || (rows.length > 0 && rows[rows.length - 1].option === 'Date');
                _this.isStepDragging = !_this.isTimelineDayProcess && (_this.actionObj.slotInterval !== _this.actionObj.interval);
                if (_this.isTimelineDayProcess) {
                    _this.timelineEventModule = new TimelineEvent(_this.parent, 'day');
                }
                else {
                    _this.timelineEventModule = new TimelineEvent(_this.parent, 'hour');
                }
            }
            if (_this.parent.options.currentView === 'Month' || _this.parent.options.currentView === 'TimelineYear' ||
                (!_this.parent.isTimelineView() && !_this.parent.activeViewOptions.timeScale.enable)) {
                _this.startTime = util.resetTime(new Date(_this.startTime)).getTime();
                _this.updateOriginalElement(_this.actionObj.clone);
                var appDetail = _this.actionObj.clone.querySelector('.e-appointment-details');
                _this.cloneEventDetail = appDetail ? appDetail : _this.actionObj.clone.querySelector('.e-subject');
                _this.monthEvent = new MonthEvent(_this.parent);
            }
            if (_this.parent.options.currentView === 'Day' || _this.parent.options.currentView === 'Week' ||
                _this.parent.options.currentView === 'WorkWeek') {
                _this.verticalEvent = new VerticalEvent(_this.parent);
            }
        });
    };
    DragAndDrop.prototype.getSelectedData = function (eventsData) {
        var _this = this;
        eventsData.forEach(function (eventObj) {
            eventObj.startTime = new Date(eventObj.startTime);
            eventObj.endTime = new Date(eventObj.endTime);
            _this.multiData.push(eventObj);
        });
    };
    DragAndDrop.prototype.drag = function (e) {
        this.parent.onQuickPopupClose(this.isMultiSelect);
        if ((!isNullOrUndefined(e.target)) && e.target.classList.contains(cls.DISABLE_DATES)) {
            return;
        }
        var eventObj = extend({}, this.actionObj.event, null, true);
        var eventArgs = this.getPageCoordinates(e);
        this.actionObj.Y = this.actionObj.pageY = eventArgs.pageY;
        this.actionObj.X = this.actionObj.pageX = eventArgs.pageX;
        this.actionObj.target = e.target;
        this.widthUptoCursorPoint = (this.widthUptoCursorPoint === 0) ?
            Math.ceil((Math.abs(this.actionObj.clone.getBoundingClientRect().left - this.actionObj.X) / this.widthPerMinute)) *
                this.widthPerMinute : this.widthUptoCursorPoint;
        this.widthUptoCursorPoint = this.isMorePopupOpened ? this.actionObj.cellWidth : this.widthUptoCursorPoint;
        this.heightUptoCursorPoint = (this.heightUptoCursorPoint === 0) ?
            Math.ceil((Math.abs(this.actionObj.clone.getBoundingClientRect().top - this.actionObj.Y) / this.heightPerMinute)) *
                this.heightPerMinute : this.heightUptoCursorPoint;
        this.isAllDayDrag = (this.parent.activeViewOptions.timeScale.enable) ?
            this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS) :
            this.actionObj.event.isAllDay;
        if (this.isStepDragging && this.minDiff === 0) {
            this.calculateMinutesDiff(eventObj);
        }
        if ((this.parent.options.currentView === 'Month' || this.isAllDayDrag) && this.daysVariation < 0) {
            var date = this.parent.getDateFromElement(this.actionObj.target);
            if (!isNullOrUndefined(date)) {
                var currentDate = util.resetTime(date);
                var startDate = util.resetTime(eventObj.startTime);
                this.daysVariation = (currentDate.getTime() - startDate.getTime()) / util.MS_PER_DAY;
            }
            else {
                this.daysVariation = 0;
            }
        }
        else {
            this.daysVariation = 0;
        }
        if (this.parent.options.eventDragArea) {
            var targetElement = eventArgs.target;
            this.actionObj.clone.style.top = formatUnit(targetElement.offsetTop);
            this.actionObj.clone.style.left = formatUnit(targetElement.offsetLeft);
            var currentTarget = closest(targetElement, '.' + cls.ROOT);
            if (!currentTarget) {
                this.actionObj.clone.style.height = '';
                this.actionObj.clone.style.width = '';
            }
            else {
                if (!(this.parent.options.currentView === 'Week' || this.parent.options.currentView === 'WorkWeek'
                    || this.parent.options.currentView === 'Day')) {
                    this.actionObj.clone.style.width = formatUnit(this.actionObj.element.offsetWidth);
                }
            }
        }
        this.updateScrollPosition();
        this.updateNavigatingPosition(e);
        this.updateDraggingDateTime(e);
        var dragArgs = {
            data: eventObj, event: e, element: this.actionObj.element, startTime: this.actionObj.start,
            endTime: this.actionObj.end
        };
        if (this.parent.activeViewOptions.group.resources.length > 0) {
            dragArgs.groupIndex = this.actionObj.groupIndex;
        }
    };
    DragAndDrop.prototype.calculateMinutesDiff = function (eventObj) {
        if (this.parent.options.enableRtl) {
            this.minDiff =
                ((this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint) / this.widthPerMinute) * this.actionObj.interval;
        }
        else {
            this.minDiff = (this.widthUptoCursorPoint / this.widthPerMinute) * this.actionObj.interval;
        }
        var startDate = eventObj.startTime;
        var startTime = this.parent.activeView.renderDates[0];
        var startEndHours = util.getStartEndHours(startTime, this.parent.activeView.getStartHour(), this.parent.activeView.getEndHour());
        if (startEndHours.startHour.getTime() > startDate.getTime()) {
            this.minDiff = this.minDiff + ((startEndHours.startHour.getTime() - startDate.getTime()) / util.MS_PER_MINUTE);
        }
    };
    DragAndDrop.prototype.dragStop = function (e) {
        this.removeCloneElementClasses();
        this.removeCloneElement();
        clearInterval(this.actionObj.navigationInterval);
        this.actionObj.navigationInterval = null;
        clearInterval(this.actionObj.scrollInterval);
        this.actionObj.scrollInterval = null;
        this.actionClass('removeClass');
        this.parent.uiStateValues.action = false;
        this.actionObj.action = null;
        if (this.isAllowDrop(e)) {
            return;
        }
        var eventGuid = this.actionObj.element.getAttribute('data-guid');
        var startTime = util.addLocalOffset(this.actionObj.start);
        var endTime = util.addLocalOffset(this.actionObj.end);
        var selectedData = [];
        if (this.updatedData.length > 0) {
            this.updatedData.forEach(function (data) {
                selectedData.push({
                    startTime: util.addLocalOffset(data.startTime),
                    endTime: util.addLocalOffset(data.endTime),
                    isAllDay: data.isAllDay,
                    guid: data.guid
                });
            });
        }
        var isSameResource = (this.parent.activeViewOptions.group.resources.length > 0) ?
            parseInt(this.actionObj.element.getAttribute('data-group-index'), 10) === this.actionObj.groupIndex : true;
        var groupIndex = (this.parent.activeViewOptions.group.resources.length > 0) ? this.actionObj.groupIndex : -1;
        var indexCol = [];
        if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.allowGroupEdit) {
            var originalElement = this.getOriginalElement(this.actionObj.element);
            indexCol = originalElement.map(function (element) { return parseInt(element.getAttribute('data-group-index'), 10); });
            if (indexCol.indexOf(this.actionObj.groupIndex) === -1) {
                var cloneIndex_1 = parseInt(this.actionObj.clone.getAttribute('data-group-index'), 10);
                indexCol = indexCol.filter(function (index) { return index !== cloneIndex_1; });
                indexCol.push(this.actionObj.groupIndex);
            }
            else {
                indexCol = [];
            }
        }
        this.parent.dotNetRef.invokeMethodAsync('OnDragStop', startTime, endTime, eventGuid, groupIndex, isSameResource, this.actionObj.isAllDay, indexCol, selectedData);
        this.updatedData = [];
        this.multiData = [];
        this.isMultiSelect = false;
        this.parent.selectedElements = [];
        this.cloneElements = [];
    };
    DragAndDrop.prototype.updateNavigatingPosition = function (e) {
        var _this = this;
        if (this.actionObj.navigation.enable) {
            var currentDate_1 = this.parent.getCurrentTime();
            if (isNullOrUndefined(this.actionObj.navigationInterval)) {
                this.actionObj.navigationInterval = window.setInterval(function () {
                    if (currentDate_1) {
                        var crtDate = _this.parent.getCurrentTime();
                        var end = crtDate.getSeconds();
                        var start = currentDate_1.getSeconds() + (_this.actionObj.navigation.timeDelay / 1000);
                        start = (start >= 60) ? start - 60 : start;
                        if (start === end) {
                            currentDate_1 = _this.parent.getCurrentTime();
                            _this.viewNavigation();
                            _this.updateDraggingDateTime(e);
                        }
                    }
                }, this.actionObj.navigation.timeDelay);
            }
        }
    };
    DragAndDrop.prototype.updateDraggingDateTime = function (e) {
        if (!isNullOrUndefined(this.actionObj.clone.offsetParent) &&
            this.actionObj.clone.offsetParent.classList.contains(cls.MORE_EVENT_POPUP_CLASS)) {
            this.morePopupEventDragging(e);
        }
        else if (this.parent.isTimelineView() && this.parent.options.currentView !== 'TimelineYear') {
            this.timelineEventModule.dateRender = this.parent.activeView.renderDates;
            this.timelineEventModule.cellWidth = this.actionObj.cellWidth;
            this.timelineEventModule.getSlotDates();
            this.actionObj.cellWidth = this.isHeaderRows ? this.timelineEventModule.cellWidth : this.actionObj.cellWidth;
            this.calculateTimelineTime(e);
        }
        else {
            if (this.parent.options.currentView === 'Month' || this.parent.options.currentView === 'TimelineYear' ||
                (!this.parent.isTimelineView() && !this.parent.activeViewOptions.timeScale.enable)) {
                this.calculateVerticalDate(e);
            }
            else {
                this.calculateVerticalTime(e);
            }
        }
    };
    DragAndDrop.prototype.navigationWrapper = function () {
        if (!this.parent.isTimelineView()) {
            if (this.parent.options.currentView === 'Month' || !this.parent.activeViewOptions.timeScale.enable) {
                var outerWrapperCls = [].slice.call(this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS));
                this.actionObj.index = (this.parent.activeView.renderDates.length < this.actionObj.index) ?
                    this.parent.activeView.renderDates.length - 1 : this.actionObj.index;
                var targetWrapper = outerWrapperCls[this.actionObj.index].querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);
                if (!targetWrapper) {
                    targetWrapper = createElement('div', { className: cls.APPOINTMENT_WRAPPER_CLASS });
                    outerWrapperCls[this.actionObj.index].appendChild(targetWrapper);
                }
                targetWrapper.appendChild(this.actionObj.clone);
            }
            else {
                var wrapperClass = this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS) ?
                    '.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS : '.' + cls.APPOINTMENT_WRAPPER_CLASS;
                this.parent.element.querySelectorAll(wrapperClass)
                    .item(this.actionObj.index).appendChild(this.actionObj.clone);
                if (wrapperClass === '.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS) {
                    var elementHeight = this.getAllDayEventHeight();
                    var event_2 = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_CELLS_CLASS + ':first-child'));
                    if (event_2[0].offsetHeight < elementHeight) {
                        for (var _i = 0, event_1 = event_2; _i < event_1.length; _i++) {
                            var e = event_1[_i];
                            e.style.height = ((elementHeight + 2) / 12) + 'em';
                        }
                    }
                    this.actionObj.clone.style.height = formatUnit(elementHeight);
                }
                this.actionObj.height = parseInt(this.actionObj.clone.style.height, 10);
            }
        }
        else {
            var outWrapper = void 0;
            if (this.parent.activeViewOptions.group.resources.length > 0) {
                outWrapper = this.parent.element.querySelectorAll('.e-appointment-container:not(.e-hidden)').item(this.actionObj.index);
            }
            else {
                outWrapper = this.parent.element.querySelector('.' + cls.APPOINTMENT_CONTAINER_CLASS);
            }
            var tarWrapper = outWrapper.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);
            if (!tarWrapper) {
                tarWrapper = createElement('div', { className: cls.APPOINTMENT_WRAPPER_CLASS });
                outWrapper.appendChild(tarWrapper);
            }
            tarWrapper.appendChild(this.actionObj.clone);
        }
    };
    DragAndDrop.prototype.viewNavigation = function () {
        var navigationType;
        var dragArea = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        if (dragArea && ((!this.scrollEdges.top && !this.scrollEdges.bottom) ||
            closest(this.actionObj.clone, '.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS))) {
            if ((dragArea.scrollLeft === 0) &&
                (Math.round(this.actionObj.X) <=
                    Math.round(dragArea.getBoundingClientRect().left + this.actionObj.cellWidth + window.pageXOffset))) {
                navigationType = this.parent.options.enableRtl ? 'Next' : 'Previous';
            }
            else if ((Math.round(dragArea.scrollLeft) + dragArea.clientWidth === dragArea.scrollWidth) &&
                (Math.round(this.actionObj.X) >=
                    Math.round(dragArea.getBoundingClientRect().right - this.actionObj.cellWidth + window.pageXOffset))) {
                navigationType = this.parent.options.enableRtl ? 'Previous' : 'Next';
            }
            if (navigationType) {
                this.parent.dotNetRef.invokeMethodAsync('OnDateNavigate', navigationType);
            }
        }
    };
    DragAndDrop.prototype.morePopupEventDragging = function (e) {
        if (isNullOrUndefined(e.target) || (e.target && isNullOrUndefined(closest(e.target, 'td')))) {
            return;
        }
        var eventObj = extend({}, this.actionObj.event, null, true);
        var eventDuration = eventObj.endTime.getTime() -
            eventObj.startTime.getTime();
        var td = closest(e.target, 'td');
        var dragStart = this.parent.getDateFromElement(td);
        var dragEnd = new Date(dragStart.getTime());
        dragEnd.setMilliseconds(eventDuration);
        if (this.parent.activeViewOptions.group.resources.length > 0) {
            this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);
        }
        this.actionObj.start = new Date(dragStart.getTime());
        this.actionObj.end = new Date(dragEnd.getTime());
        this.actionObj.clone.style.top = formatUnit(td.offsetParent.offsetTop);
        this.actionObj.clone.style.left = formatUnit(td.offsetLeft);
        this.actionObj.clone.style.width = formatUnit(td.offsetWidth);
        var eventContainer = td;
        var eventWrapper;
        if (this.parent.options.currentView !== 'TimelineYear' && this.parent.isTimelineView()) {
            var rowIndex = closest(td, 'tr').rowIndex;
            eventContainer = this.parent.element.querySelectorAll('.e-appointment-container').item(rowIndex);
        }
        eventWrapper = eventContainer.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);
        if (!eventWrapper) {
            eventWrapper = createElement('div', { className: cls.APPOINTMENT_WRAPPER_CLASS });
            eventContainer.appendChild(eventWrapper);
        }
        this.appendCloneElement(eventWrapper);
    };
    DragAndDrop.prototype.calculateVerticalTime = function (e) {
        var _this = this;
        if (isNullOrUndefined(this.actionObj.target) ||
            (this.actionObj.target && isNullOrUndefined(closest(this.actionObj.target, 'tr'))) ||
            (!(closest(this.actionObj.target, 'td').classList.contains(cls.WORK_CELLS_CLASS)) &&
                !(closest(this.actionObj.target, 'td').classList.contains(cls.ALLDAY_CELLS_CLASS)))) {
            return;
        }
        if (this.parent.activeViewOptions.timeScale.enable) {
            this.swapDragging(e);
        }
        var dragArea = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        var eventObj = extend({}, this.actionObj.event, null, true);
        var eventStart = eventObj.startTime;
        var eventEnd = eventObj.endTime;
        var eventDuration = eventEnd.getTime() - eventStart.getTime();
        var offsetTop = Math.floor(parseInt(this.actionObj.clone.style.top, 10) / this.actionObj.cellHeight)
            * this.actionObj.cellHeight;
        offsetTop = offsetTop < 0 ? 0 : offsetTop;
        if (this.scrollEdges.top || this.scrollEdges.bottom) {
            offsetTop = this.scrollEdges.top ? dragArea.scrollTop - this.heightUptoCursorPoint + this.actionObj.cellHeight :
                (dragArea.scrollTop + dragArea.offsetHeight - this.actionObj.clone.offsetHeight) +
                    (this.actionObj.clone.offsetHeight - this.heightUptoCursorPoint);
            offsetTop = Math.round(offsetTop / this.actionObj.cellHeight) * this.actionObj.cellHeight;
            this.actionObj.clone.style.top = formatUnit(offsetTop);
        }
        var rowIndex = offsetTop / this.actionObj.cellHeight;
        var heightPerMinute = this.actionObj.cellHeight / this.actionObj.slotInterval;
        var diffInMinutes = parseInt(this.actionObj.clone.style.top, 10) - offsetTop;
        var tr;
        if (this.isAllDayDrag) {
            tr = this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS);
        }
        else {
            var trCollections = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));
            tr = trCollections[rowIndex];
        }
        var index;
        if (closest(this.actionObj.target, 'td').classList.contains(cls.WORK_CELLS_CLASS) ||
            closest(this.actionObj.target, 'td').classList.contains(cls.ALLDAY_CELLS_CLASS)) {
            index = closest(this.actionObj.target, 'td').cellIndex;
        }
        var colIndex = isNullOrUndefined(index) ? closest(this.actionObj.clone, 'td').cellIndex : index;
        this.actionObj.index = colIndex;
        if (isNullOrUndefined(tr)) {
            return;
        }
        var td = tr.children[colIndex];
        if (this.parent.activeViewOptions.group.resources.length > 0) {
            this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);
        }
        var dragStart;
        var dragEnd;
        if (this.parent.activeViewOptions.timeScale.enable && !this.isAllDayDrag) {
            this.appendCloneElement(this.getEventWrapper(colIndex));
            dragStart = this.parent.getDateFromElement(td);
            dragStart.setMinutes(dragStart.getMinutes() + (diffInMinutes / heightPerMinute));
            dragEnd = new Date(dragStart.getTime());
            if (this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {
                dragEnd.setMinutes(dragEnd.getMinutes() + this.actionObj.slotInterval);
            }
            else {
                dragEnd.setMilliseconds(eventDuration);
            }
        }
        else {
            dragStart = this.parent.getDateFromElement(td);
            dragStart.setDate(dragStart.getDate() - this.daysVariation);
            dragStart.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());
            dragEnd = new Date(dragStart.getTime());
            dragEnd.setMilliseconds(eventDuration);
            if (!this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS) &&
                this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {
                dragEnd = util.addDays(util.resetTime(dragEnd), 1);
            }
            this.updateAllDayEvents(dragStart, dragEnd, this.parent.activeViewOptions.group.byDate ? colIndex : undefined);
        }
        this.actionObj.start = new Date(+dragStart);
        this.actionObj.end = new Date(+dragEnd);
        var event = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
        if (this.multiData.length > 0) {
            if (this.isAllDayTarget && this.isAllDayDrag && !isNullOrUndefined(this.actionObj.isAllDay) && !this.actionObj.isAllDay) {
                var targetCellDate = new Date(parseInt((closest(this.actionObj.target, 'td')).getAttribute('data-date'), 10));
                var targetCellTime_1 = new Date(+targetCellDate + (targetCellDate.getTimezoneOffset() * 60000)).getTime();
                this.multiData.forEach(function (data) {
                    _this.swagData.push(extend({}, data, null, true));
                    if (data.isAllDay) {
                        data.startTime =
                            new Date(data.startTime.getTime() + (targetCellTime_1 - _this.startTime));
                        var startTime = new Date(data.startTime);
                        var endTime = new Date(startTime.setMinutes(startTime.getMinutes() + _this.actionObj.slotInterval));
                        data.endTime = endTime;
                        data.isAllDay = false;
                    }
                });
                this.startTime = targetCellTime_1;
            }
            if (this.isAllDayTarget && this.isAllDayDrag &&
                !isNullOrUndefined(this.actionObj.isAllDay) && this.actionObj.isAllDay && this.swagData.length > 0) {
                this.multiData = this.swagData;
                this.swagData = [];
                var eventObj_1 = extend({}, this.actionObj.event, null, true);
                this.startTime = eventObj_1.startTime.getTime();
            }
            var startTimeDiff = event.startTime.getTime() - this.startTime;
            for (var index_1 = 0; index_1 < this.multiData.length; index_1++) {
                this.updatedData[index_1] = this.updateMultipleData(this.multiData[index_1], startTimeDiff);
                var dayIndex = this.getDayIndex(this.updatedData[index_1]);
                if (dayIndex >= 0) {
                    var wrapper = this.getEventWrapper(dayIndex, this.updatedData[index_1]['isAllDay']);
                    this.appendCloneElement(wrapper, this.actionObj.cloneElement[index_1]);
                    this.updateEventHeight(this.updatedData[index_1], index_1, dayIndex);
                }
                else {
                    if (!isNullOrUndefined(this.actionObj.cloneElement[index_1].parentNode)) {
                        remove(this.actionObj.cloneElement[index_1]);
                    }
                }
            }
        }
        this.updateTimePosition(this.actionObj.start, this.updatedData);
    };
    DragAndDrop.prototype.updateMultipleData = function (data, timeDifference) {
        var eventObj = extend({}, data, null, true);
        if (!isNullOrUndefined(this.actionObj.isAllDay) && this.parent.activeViewOptions.timeScale.enable &&
            ((this.isAllDayTarget && eventObj.isAllDay) || (!this.isAllDayTarget && !eventObj.isAllDay))) {
            eventObj.isAllDay = this.actionObj.isAllDay;
        }
        var endTimeDiff = eventObj.endTime.getTime() - eventObj.startTime.getTime();
        if (eventObj.isAllDay) {
            var differInDays = Math.ceil(timeDifference / (1000 * 3600 * 24));
            var day = Math.ceil(endTimeDiff / (1000 * 3600 * 24));
            var startTime = new Date(eventObj.startTime);
            eventObj.startTime = util.resetTime(new Date(startTime.setDate(startTime.getDate() + differInDays)));
            eventObj.endTime = util.addDays(eventObj.startTime, day);
        }
        else {
            eventObj.startTime = new Date(eventObj.startTime.getTime() + timeDifference);
            eventObj.endTime = new Date(eventObj.startTime.getTime() + endTimeDiff);
        }
        return eventObj;
    };
    DragAndDrop.prototype.getDayIndex = function (event) {
        var eventObj = extend({}, event, null, true);
        var startTime = this.parent.getMsFromDate(eventObj.startTime);
        var query = '';
        var wrapper = cls.DAY_WRAPPER_CLASS;
        if (this.parent.activeViewOptions.timeScale.enable && (eventObj.isAllDay)) {
            wrapper = cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS;
        }
        else {
            wrapper = cls.WORK_CELLS_CLASS;
        }
        query = '.' + wrapper + '[data-date="' + startTime + '"]';
        if (this.parent.activeViewOptions.group.resources.length > 0) {
            query = query + '[data-group-index="' + this.actionObj.groupIndex + '"]';
        }
        this.targetTd = this.parent.element.querySelector(query);
        if (isNullOrUndefined(this.targetTd)) {
            return -1;
        }
        return this.targetTd.cellIndex;
    };
    DragAndDrop.prototype.updateEventHeight = function (event, index, colIndex) {
        this.verticalEvent.initializeValues();
        var eventObj = extend({}, event, null, true);
        var startTime = util.resetTime(eventObj.startTime);
        var dayIndex = this.parent.getIndexOfDate(this.parent.activeView.renderDates, startTime);
        var record = this.isSpannedEvent(event, startTime);
        var eStart = record.startTime;
        var eEnd = record.endTime;
        var topValue = 0;
        var appHeight = this.verticalEvent.getHeight(eStart, eEnd);
        topValue = this.verticalEvent.getTopValue(eStart, dayIndex);
        var appWidth = this.actionObj.cellWidth;
        if (event.isAllDay) {
            topValue = this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).offsetTop;
            appHeight = this.getAllDayEventHeight();
            var timeDiff = event.endTime.getTime() -
                event.startTime.getTime();
            var allDayDifference = Math.ceil(timeDiff / (1000 * 3600 * 24));
            if (allDayDifference >= 0) {
                appWidth = (allDayDifference * this.actionObj.cellWidth);
            }
        }
        if (this.actionObj.cloneElement[index]) {
            this.actionObj.cloneElement[index].style.top = formatUnit(topValue);
            this.actionObj.cloneElement[index].style.height = formatUnit(appHeight);
            this.actionObj.cloneElement[index].style.width = formatUnit(appWidth);
            this.actionObj.cloneElement[index].style.left = formatUnit(0);
        }
    };
    DragAndDrop.prototype.isSpannedEvent = function (record, currentDate) {
        var startEndHours = util.getStartEndHours(currentDate, this.parent.activeView.getStartHour(), this.parent.activeView.getEndHour());
        var event = extend({}, record, null, true);
        event.isSpanned = { isBottom: false, isTop: false };
        if (record.startTime.getTime() < startEndHours.startHour.getTime()) {
            event.startTime = startEndHours.startHour;
            event.isSpanned.isTop = true;
        }
        if (record.endTime.getTime() > startEndHours.endHour.getTime()) {
            event.endTime = startEndHours.endHour;
            event.isSpanned.isBottom = true;
        }
        return event;
    };
    DragAndDrop.prototype.updateAllDayEvents = function (startDate, endDate, colIndex) {
        this.parent.eventBase.slots = [];
        var event = this.getUpdatedEvent(startDate, endDate, this.actionObj.event);
        var renderDates = this.parent.activeView.renderDates;
        this.parent.eventBase.slots.push(this.parent.activeView.renderDates.map(function (date) { return +date; }));
        if (this.parent.activeViewOptions.group.resources.length > 0) {
            this.parent.eventBase.slots = [];
            this.parent.eventBase.slots.push(renderDates.map(function (date) { return +date; }));
        }
        var events = this.parent.eventBase.splitEvent(event, renderDates);
        var query = '.e-all-day-cells[data-date="' +
            this.parent.getMsFromDate(events[0].startTime) + '"]';
        if (this.parent.activeViewOptions.group.resources.length > 0) {
            query = query.concat('[data-group-index = "' + this.actionObj.groupIndex + '"]');
        }
        var cell = [].slice.call(this.parent.element.querySelectorAll(query));
        if (cell.length > 0 || !isNullOrUndefined(colIndex)) {
            var cellIndex = !isNullOrUndefined(colIndex) ? colIndex : cell[0].cellIndex;
            this.appendCloneElement(this.getEventWrapper(cellIndex));
            this.actionObj.clone.style.width =
                formatUnit(events[0].data.count * this.actionObj.cellWidth);
        }
    };
    DragAndDrop.prototype.swapDragging = function (e) {
        var colIndex = closest(this.actionObj.target, 'td').cellIndex;
        if (closest(this.actionObj.target, '.' + cls.DATE_HEADER_WRAP_CLASS) &&
            !closest(this.actionObj.clone, '.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS)) {
            addClass([this.actionObj.clone], cls.ALLDAY_APPOINTMENT_CLASS);
            this.appendCloneElement(this.getEventWrapper(colIndex));
            this.actionObj.isAllDay = true;
            var eventHeight = this.getAllDayEventHeight();
            var allDayElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_CELLS_CLASS + ':first-child'));
            if (allDayElement[0].offsetHeight < eventHeight) {
                for (var _i = 0, allDayElement_1 = allDayElement; _i < allDayElement_1.length; _i++) {
                    var element = allDayElement_1[_i];
                    element.style.height = ((eventHeight + 2) / 12) + 'em';
                }
            }
            setStyleAttribute(this.actionObj.clone, {
                width: formatUnit(this.actionObj.cellWidth),
                height: formatUnit(eventHeight),
                top: formatUnit(this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).offsetTop)
            });
        }
        if (closest(this.actionObj.target, '.' + cls.WORK_CELLS_CLASS) &&
            !closest(this.actionObj.clone, '.' + cls.DAY_WRAPPER_CLASS)) {
            removeClass([this.actionObj.clone], cls.ALLDAY_APPOINTMENT_CLASS);
            this.appendCloneElement(this.getEventWrapper(colIndex));
            this.actionObj.isAllDay = false;
            var height = (this.actionObj.element.offsetHeight === 0) ? this.actionObj.height :
                this.actionObj.element.offsetHeight;
            setStyleAttribute(this.actionObj.clone, {
                left: formatUnit(0),
                height: formatUnit(height),
                width: formatUnit(this.actionObj.cellWidth)
            });
        }
    };
    DragAndDrop.prototype.calculateVerticalDate = function (e) {
        var _this = this;
        if (isNullOrUndefined(e.target) || (e.target && isNullOrUndefined(closest(e.target, 'tr'))) ||
            (e.target && e.target.tagName === 'DIV')) {
            return;
        }
        this.removeCloneElement();
        var eventObj = extend({}, this.actionObj.event, null, true);
        var eventDuration = eventObj.endTime.getTime() -
            eventObj.startTime.getTime();
        var td = closest(this.actionObj.target, 'td');
        if (!isNullOrUndefined(td)) {
            var tr = td.parentElement;
            this.actionObj.index = (tr.rowIndex * tr.children.length) + td.cellIndex;
            var workCells = [].slice.call(this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS));
            td = workCells[this.actionObj.index];
            if (isNullOrUndefined(td)) {
                return;
            }
            var currentDate = this.parent.getDateFromElement(td);
            if (!isNullOrUndefined(currentDate)) {
                if (this.parent.activeViewOptions.group.resources.length > 0) {
                    this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);
                }
                var timeString = new Date(currentDate.setDate(currentDate.getDate() - this.daysVariation));
                var dragStart = new Date(timeString.getTime());
                var dragEnd = new Date(dragStart.getTime());
                var startTimeDiff = eventObj.startTime.getTime() -
                    (util.resetTime(eventObj.startTime)).getTime();
                dragStart = new Date(dragStart.getTime() + startTimeDiff);
                dragEnd = new Date(dragStart.getTime() + eventDuration);
                this.actionObj.start = new Date(dragStart.getTime());
                this.actionObj.end = new Date(dragEnd.getTime());
            }
        }
        var event = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);
        var eventWrappers = [].slice.call(this.parent.element.querySelectorAll('.' + cls.CLONE_ELEMENT_CLASS));
        for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {
            var wrapper = eventWrappers_1[_i];
            remove(wrapper);
        }
        if (this.multiData && this.multiData.length > 0) {
            var startTime = util.resetTime(new Date(event.startTime));
            var startTimeDiff = startTime.getTime() - this.startTime;
            if (this.parent.options.currentView === 'TimelineYear' && this.parent.activeViewOptions.group.resources.length > 0) {
                startTimeDiff = (startTime.getFullYear() - new Date(this.startTime).getFullYear()) * 12;
                startTimeDiff -= new Date(this.startTime).getMonth();
                startTimeDiff += startTime.getMonth();
            }
            var _loop_1 = function (index) {
                this_1.updatedData[index] = this_1.updateMultipleVerticalDate(this_1.multiData[index], startTimeDiff);
                var cloneEle = this_1.cloneElements.find(function (ele) {
                    return ele.getAttribute('data-guid') === _this.updatedData[index].guid;
                });
                if (this_1.parent.options.currentView === 'TimelineYear') {
                    this_1.dynamicYearlyEventsRendering(this_1.updatedData[index], false, cloneEle);
                }
                else {
                    this_1.dynamicEventsRendering(this_1.updatedData[index], cloneEle);
                }
            };
            var this_1 = this;
            for (var index = 0; index < this.multiData.length; index++) {
                _loop_1(index);
            }
        }
        else {
            if (this.parent.options.currentView === 'TimelineYear') {
                this.dynamicYearlyEventsRendering(event);
            }
            else {
                this.dynamicEventsRendering(event);
            }
        }
    };
    DragAndDrop.prototype.updateMultipleVerticalDate = function (data, timeDifference) {
        var eventObj = extend({}, data, null, true);
        var eventDuration = eventObj.endTime.getTime() -
            eventObj.startTime.getTime();
        var startDate = new Date(eventObj.startTime);
        if (this.parent.options.currentView === 'TimelineYear' && this.parent.activeViewOptions.group.resources.length > 0) {
            eventObj.startTime = new Date(startDate.setMonth(startDate.getMonth() + timeDifference));
        }
        else {
            var differInDays = Math.ceil(timeDifference / util.MS_PER_DAY);
            eventObj.startTime = new Date(startDate.setDate(startDate.getDate() + differInDays));
        }
        eventObj.endTime =
            new Date(eventObj.startTime.getTime() + eventDuration);
        return eventObj;
    };
    DragAndDrop.prototype.calculateTimelineTime = function (e) {
        var eventObj = extend({}, this.actionObj.event, null, true);
        var eventDuration = eventObj.endTime.getTime() -
            eventObj.startTime.getTime();
        var offsetLeft = this.parent.options.enableRtl ?
            Math.abs(this.actionObj.clone.offsetLeft) - this.actionObj.clone.offsetWidth :
            parseInt(this.actionObj.clone.style.left, 10);
        offsetLeft = Math.floor(offsetLeft / this.actionObj.cellWidth) * this.actionObj.cellWidth;
        var rightOffset;
        if (this.parent.options.enableRtl) {
            rightOffset = Math.abs(parseInt(this.actionObj.clone.style.right, 10));
            this.actionObj.clone.style.right = formatUnit(rightOffset);
        }
        offsetLeft = this.getOffsetValue(offsetLeft, rightOffset);
        var colIndex = this.getColumnIndex(offsetLeft);
        var cloneIndex = Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().left) / this.actionObj.cellWidth);
        if (this.parent.options.enableRtl) {
            cloneIndex = Math.abs(Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().right) /
                this.actionObj.cellWidth)) - 1;
        }
        if (this.cursorPointIndex < 0) {
            this.cursorIndex(e, eventObj, offsetLeft, cloneIndex);
        }
        var tr = this.parent.getContentTable().querySelector('tr');
        var index = this.getCursorCurrentIndex(colIndex, cloneIndex, tr);
        index = index < 0 ? 0 : index;
        var eventStart = this.isHeaderRows ? new Date(this.timelineEventModule.dateRender[index].getTime()) :
            this.parent.getDateFromElement(tr.children[index]);
        if (this.isStepDragging) {
            var widthDiff = this.getWidthDiff(tr, index);
            if (widthDiff !== 0) {
                var timeDiff = Math.round(widthDiff / this.widthPerMinute);
                eventStart.setMinutes(eventStart.getMinutes() + (timeDiff * this.actionObj.interval));
                eventStart.setMinutes(eventStart.getMinutes() - this.minDiff);
            }
            else {
                eventStart = this.actionObj.start;
            }
        }
        else {
            eventStart.setMinutes(eventStart.getMinutes() -
                (this.cursorPointIndex * (this.isTimelineDayProcess ? MINUTES_PER_DAY : this.actionObj.slotInterval)));
        }
        eventStart = this.calculateIntervalTime(eventStart);
        if (this.isTimelineDayProcess) {
            var eventSrt = eventObj.startTime;
            eventStart.setHours(eventSrt.getHours(), eventSrt.getMinutes(), eventSrt.getSeconds());
        }
        var eventEnd = new Date(eventStart.getTime());
        eventEnd.setMilliseconds(eventDuration);
        var event = [this.getUpdatedEvent(eventStart, eventEnd, this.actionObj.event)];
        if (this.multiData.length > 0) {
            var startTimeDiff = event[0]['startTime'].getTime() - this.startTime;
            for (var i = 0; i < this.multiData.length; i++) {
                this.updatedData[i] = this.updateMultipleData(this.multiData[i], startTimeDiff);
            }
            event = this.updatedData;
        }
        for (var dataIndex = 0; dataIndex < event.length; dataIndex++) {
            var events = this.timelineEventModule.splitEvent(event[dataIndex], this.timelineEventModule.dateRender);
            if (events.length === 0) {
                return;
            }
            var eventData = events[0].data;
            var startTime = this.getStartTime(events[0], eventData);
            var endTime = this.getEndTime(events[0], eventData);
            var width = this.timelineEventModule.
                getEventWidth(startTime, endTime, eventObj.isAllDay, eventData.count);
            var day = this.parent.getIndexOfDate(this.timelineEventModule.dateRender, util.resetTime(new Date(startTime.getTime())));
            day = day < 0 ? 0 : day;
            var left = this.timelineEventModule.getPosition(startTime, endTime, eventObj.isAllDay, day);
            var cloneElement = this.multiData.length > 0 ? this.actionObj.cloneElement[dataIndex] : this.actionObj.clone;
            if (this.parent.options.currentView === 'TimelineMonth' || !this.parent.activeViewOptions.timeScale.enable) {
                startTime = util.resetTime(startTime);
                var query = '.' + cls.WORK_CELLS_CLASS + '[data-date="' + this.parent.getMsFromDate(startTime) + '"]';
                var td = this.parent.element.querySelector(query);
                if (isNullOrUndefined(td)) {
                    width = 0;
                }
            }
            if (this.parent.options.enableRtl) {
                cloneElement.style.right = formatUnit(left);
            }
            else {
                cloneElement.style.left = formatUnit(left);
            }
            if (!this.isMorePopupOpened) {
                cloneElement.style.width = formatUnit(width);
            }
            if (this.parent.activeViewOptions.group.resources.length > 0) {
                this.calculateResourceGroupingPosition(e, cloneElement);
            }
            this.actionObj.start = new Date(eventStart.getTime());
            this.actionObj.end = new Date(eventEnd.getTime());
            this.updateTimePosition(this.actionObj.start, this.updatedData);
        }
    };
    DragAndDrop.prototype.getStartTime = function (event, eventData) {
        var startTime = event.startTime;
        var schedule = util.
            getStartEndHours(startTime, this.timelineEventModule.startHour, this.timelineEventModule.endHour);
        if (schedule.startHour.getTime() >= eventData.startTime) {
            startTime = schedule.startHour;
        }
        else if (schedule.endHour.getTime() <= eventData.startTime) {
            startTime = this.getNextDay(schedule.startHour, eventData);
        }
        else {
            startTime = eventData.startTime;
        }
        eventData.trimStartTime = (event.isAllDay) ? schedule.startHour : eventData.startTime;
        return startTime;
    };
    DragAndDrop.prototype.getNextDay = function (startTime, eventData) {
        var startDate;
        for (var i = 1; i <= this.timelineEventModule.dateRender.length; i++) {
            startDate = util.addDays(startTime, i);
            if (this.parent.getIndexOfDate(this.timelineEventModule.dateRender, util.resetTime(new Date(startTime.getTime()))) !== -1) {
                eventData.count = eventData.count - 1;
                return startDate;
            }
        }
        return startDate;
    };
    DragAndDrop.prototype.getEndTime = function (event, eventData) {
        var endTime = event.endTime;
        var schedule = util.
            getStartEndHours(endTime, this.timelineEventModule.startHour, this.timelineEventModule.endHour);
        if (schedule.endHour.getTime() <= eventData.endTime) {
            endTime = schedule.endHour;
        }
        else {
            endTime = eventData.endTime;
        }
        eventData.trimEndTime = (event.isAllDay) ? schedule.endHour : eventData.endTime;
        return endTime;
    };
    DragAndDrop.prototype.getOffsetValue = function (offsetLeft, rightOffset) {
        if (this.scrollEdges.left || this.scrollEdges.right) {
            var viewEle = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
            if (this.parent.options.enableRtl) {
                rightOffset = viewEle.offsetWidth - viewEle.scrollLeft;
                if (this.scrollEdges.right) {
                    rightOffset = (rightOffset - viewEle.offsetWidth + this.actionObj.clone.offsetWidth) -
                        (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);
                }
                else {
                    rightOffset = rightOffset + this.widthUptoCursorPoint;
                    if (rightOffset - this.widthUptoCursorPoint >= viewEle.scrollWidth) {
                        this.actionObj.clone.style.width =
                            formatUnit(this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint + this.actionObj.cellWidth);
                        rightOffset = (viewEle.scrollLeft - viewEle.scrollWidth);
                    }
                }
                this.actionObj.clone.style.left = formatUnit(rightOffset);
            }
            else {
                if (this.scrollEdges.left) {
                    offsetLeft = viewEle.scrollLeft - this.widthUptoCursorPoint + this.actionObj.cellWidth;
                    if (viewEle.scrollLeft + viewEle.offsetWidth >= viewEle.offsetWidth) {
                        viewEle.scrollLeft = viewEle.scrollLeft - 1;
                    }
                    else if (this.actionObj.clone.offsetLeft === 0) {
                        offsetLeft = viewEle.scrollLeft;
                    }
                }
                else {
                    offsetLeft = (viewEle.scrollLeft + viewEle.offsetWidth -
                        this.actionObj.clone.offsetWidth) + (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);
                }
                offsetLeft = offsetLeft < 0 ? 0 : offsetLeft;
                this.actionObj.clone.style.left = formatUnit(offsetLeft);
            }
        }
        return offsetLeft;
    };
    DragAndDrop.prototype.getWidthDiff = function (tr, index) {
        var pages = this.scrollArgs.element.getBoundingClientRect();
        if (pages.left <= this.actionObj.pageX && pages.right >= this.actionObj.pageX) {
            var targetLeft = tr.children[index].offsetLeft;
            var pageX = this.actionObj.pageX - pages.left;
            if (this.parent.options.enableRtl) {
                return (targetLeft + this.actionObj.cellWidth) - (this.scrollArgs.element.scrollLeft + pageX);
            }
            else {
                return (this.scrollArgs.element.scrollLeft + pageX) - targetLeft;
            }
        }
        return 0;
    };
    DragAndDrop.prototype.getColumnIndex = function (offsetLeft) {
        var index = Math.floor(offsetLeft / this.actionObj.cellWidth);
        if (this.isHeaderRows) {
            return index;
        }
        return this.getIndex(index);
    };
    DragAndDrop.prototype.getCursorCurrentIndex = function (colIndex, cloneIndex, tr) {
        var index = colIndex + cloneIndex;
        if (this.isHeaderRows) {
            var dateLength = Math.floor(tr.offsetWidth / this.actionObj.cellWidth);
            return (index > dateLength - 1) ? dateLength - 1 : index;
        }
        return (index > tr.children.length - 1) ? tr.children.length - 1 : index;
    };
    DragAndDrop.prototype.cursorIndex = function (e, event, left, index) {
        var td = closest(e.target, '.e-work-cells');
        if (!isNullOrUndefined(td) && !this.isMorePopupOpened) {
            var targetDate = this.parent.getDateFromElement(td);
            if (this.isHeaderRows) {
                var currentIndex = Math.floor(left / this.actionObj.cellWidth);
                targetDate = new Date(this.timelineEventModule.dateRender[currentIndex + index].getTime());
            }
            var timeDiff = targetDate.getTime() - (new Date(event.startTime)).getTime();
            if (this.isTimelineDayProcess) {
                this.cursorPointIndex = Math.abs(Math.ceil(timeDiff / (util.MS_PER_DAY)));
            }
            else {
                var widthDiff = Math.floor((timeDiff / util.MS_PER_MINUTE) / (this.actionObj.slotInterval / this.actionObj.cellWidth));
                this.cursorPointIndex = Math.floor(widthDiff / this.actionObj.cellWidth);
                this.cursorPointIndex = this.cursorPointIndex < 0 ? 0 : this.cursorPointIndex;
            }
        }
        else {
            this.cursorPointIndex = 0;
        }
    };
    DragAndDrop.prototype.calculateResourceGroupingPosition = function (e, cloneElement) {
        var dragArea = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        var trCollection = [].slice.call(this.parent.element.querySelectorAll('.e-content-wrap .e-content-table tr:not(.e-hidden)'));
        var translateY = util.getTranslateY(dragArea.querySelector('table'));
        translateY = (isNullOrUndefined(translateY)) ? 0 : translateY;
        var rowHeight = (this.parent.options.rowAutoHeight) ?
            ~~(dragArea.querySelector('table').offsetHeight / trCollection.length) : this.actionObj.cellHeight;
        var rowIndex = Math.floor(Math.floor((this.actionObj.Y + (dragArea.scrollTop - translateY - window.scrollY)) -
            dragArea.getBoundingClientRect().top) / rowHeight);
        rowIndex = (rowIndex < 0) ? 0 : (rowIndex > trCollection.length - 1) ? trCollection.length - 1 : rowIndex;
        this.actionObj.index = rowIndex;
        var eventContainer = this.parent.element.querySelectorAll('.e-appointment-container:not(.e-hidden)').item(rowIndex);
        var eventWrapper = eventContainer.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);
        if (!eventWrapper) {
            eventWrapper = createElement('div', { className: cls.APPOINTMENT_WRAPPER_CLASS });
            eventContainer.appendChild(eventWrapper);
        }
        this.appendCloneElement(eventWrapper, cloneElement);
        var td = closest(e.target, 'td');
        this.actionObj.groupIndex = (td && !isNaN(parseInt(td.getAttribute('data-group-index'), 10)))
            ? parseInt(td.getAttribute('data-group-index'), 10) : this.actionObj.groupIndex;
        var top = trCollection[rowIndex].offsetTop;
        if (this.parent.options.rowAutoHeight) {
            var cursorElement = this.getCursorElement(e);
            if (cursorElement) {
                top = cursorElement.classList.contains(cls.WORK_CELLS_CLASS) ? cursorElement.offsetTop :
                    cursorElement.offsetParent.classList.contains(cls.APPOINTMENT_CLASS) ?
                        cursorElement.offsetParent.offsetTop : top;
            }
        }
        cloneElement.style.top = formatUnit(top);
    };
    DragAndDrop.prototype.appendCloneElement = function (element, cloneElement) {
        if (cloneElement === void 0) { cloneElement = null; }
        cloneElement = isNullOrUndefined(cloneElement) ? this.actionObj.clone : cloneElement;
        if (this.parent.options.eventDragArea) {
            document.querySelector(this.parent.options.eventDragArea).appendChild(cloneElement);
        }
        else {
            element.appendChild(cloneElement);
        }
    };
    DragAndDrop.prototype.getEventWrapper = function (index, isAllDayDrag) {
        var eventWrapper;
        if (isNullOrUndefined(isAllDayDrag)) {
            isAllDayDrag = this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS);
        }
        if (this.parent.activeViewOptions.timeScale.enable) {
            var wrapperClass = isAllDayDrag ? '.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS : '.' + cls.APPOINTMENT_WRAPPER_CLASS;
            eventWrapper = this.parent.element.querySelectorAll(wrapperClass).item(index);
        }
        else {
            var targetWrapper = this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS).item(index);
            eventWrapper = targetWrapper.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);
            if (!eventWrapper) {
                eventWrapper = createElement('div', { className: cls.APPOINTMENT_WRAPPER_CLASS });
                targetWrapper.appendChild(eventWrapper);
            }
        }
        return eventWrapper;
    };
    DragAndDrop.prototype.getAllDayEventHeight = function () {
        var eventWrapper = createElement('div', { className: cls.APPOINTMENT_CLASS });
        this.parent.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS).appendChild(eventWrapper);
        var eventHeight = eventWrapper.offsetHeight;
        remove(eventWrapper);
        return eventHeight;
    };
    DragAndDrop.prototype.isAllowDrop = function (e) {
        if (!this.actionObj.excludeSelectors) {
            return false;
        }
        var dropSelectors = this.actionObj.excludeSelectors.split(',');
        var isAllowDrop = false;
        for (var _i = 0, dropSelectors_1 = dropSelectors; _i < dropSelectors_1.length; _i++) {
            var selector = dropSelectors_1[_i];
            if (e.target.classList.contains(selector)) {
                isAllowDrop = true;
                break;
            }
        }
        return isAllowDrop;
    };
    return DragAndDrop;
}(ActionBase));
export { DragAndDrop };
