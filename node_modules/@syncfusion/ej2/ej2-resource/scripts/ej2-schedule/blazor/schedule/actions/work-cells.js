import { extend, closest, isNullOrUndefined } from '@syncfusion/ej2-base';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
var WorkCellInteraction = (function () {
    function WorkCellInteraction(parent) {
        this.parent = parent;
    }
    WorkCellInteraction.prototype.cellMouseDown = function (e) {
        if (this.isPreventAction(e)) {
            return;
        }
        this.parent.onCellMouseDown(e);
    };
    WorkCellInteraction.prototype.cellClick = function (e) {
        if (this.isPreventAction(e) || closest(e.target, '.' + cls.DISABLE_DATES)) {
            return;
        }
        var queryStr = '.' + cls.WORK_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' + cls.HEADER_CELLS_CLASS;
        var target = closest(e.target, queryStr);
        if (isNullOrUndefined(target)) {
            return;
        }
        if (!isNullOrUndefined(closest(e.target, '.' + cls.NEW_EVENT_CLASS))) {
            var args = extend({}, this.parent.activeCellsData, null, true);
            args.startTime = util.addLocalOffset(args.startTime);
            args.endTime = util.addLocalOffset(args.endTime);
            this.parent.dotNetRef.invokeMethodAsync('OnOpenEditor', args, 'Add');
            return;
        }
        var navigateEle = closest(e.target, '.' + cls.NAVIGATE_CLASS);
        var navigateView = this.parent.getNavigateView();
        var sameView = this.parent.options.currentView === navigateView;
        if (isNullOrUndefined(navigateEle) || sameView) {
            if (this.parent.activeViewOptions.readonly && this.parent.options.currentView !== 'MonthAgenda') {
                return;
            }
            if (this.parent.isAdaptive && (e.target.classList.contains(cls.MORE_INDICATOR_CLASS) ||
                closest(e.target, '.' + cls.MORE_INDICATOR_CLASS))) {
                return;
            }
            var isWorkCell = target.classList.contains(cls.WORK_CELLS_CLASS) ||
                target.classList.contains(cls.ALLDAY_CELLS_CLASS);
            if (isWorkCell && e.shiftKey && e.which === 1 && this.parent.keyboardInteractionModule) {
                this.parent.keyboardInteractionModule.onMouseSelection(e);
                return;
            }
            this.parent.activeCellsData = this.parent.getCellDetails(target);
            this.parent.currentCell = target;
            var args = extend({}, this.parent.activeCellsData, { cancel: false, mouseEventArgs: this.parent.eventBase.getMouseEvent(e), name: 'cellClick' }, true);
            args.startTime = util.addLocalOffset(args.startTime);
            args.endTime = util.addLocalOffset(args.endTime);
            this.parent.dotNetRef.invokeMethodAsync('TriggerCellClick', args);
        }
        else {
            var date = this.parent.getDateFromElement(target);
            if (!isNullOrUndefined(date) && !this.parent.isAdaptive) {
                var currentDate = new Date(this.parent.getMsFromDate(date));
                if (!isNullOrUndefined(this.parent.morePopup)) {
                    this.parent.morePopup.hide();
                }
                this.parent.dotNetRef.invokeMethodAsync('OnViewNavigate', currentDate, this.parent.getNavigateView());
            }
        }
    };
    WorkCellInteraction.prototype.cellDblClick = function (e) {
        if (this.parent.activeViewOptions.readonly || this.isPreventAction(e) ||
            closest(e.target, '.' + cls.DISABLE_DATES)) {
            return;
        }
        var args = extend({}, this.parent.activeCellsData, { cancel: false, mouseEventArgs: this.parent.eventBase.getMouseEvent(e), name: 'OnCellDoubleClick' }, true);
        args.startTime = util.addLocalOffset(args.startTime);
        args.endTime = util.addLocalOffset(args.endTime);
        this.parent.dotNetRef.invokeMethodAsync('OnOpenEditor', args, 'Add');
    };
    WorkCellInteraction.prototype.isPreventAction = function (e) {
        if (closest(e.target, '.' + cls.NAVIGATE_CLASS)) {
            return false;
        }
        if (closest(e.target, '.' + cls.APPOINTMENT_WRAPPER_CLASS) &&
            !closest(e.target, '.' + cls.MORE_INDICATOR_CLASS)) {
            return true;
        }
        var target = closest(e.target, '.' + cls.APPOINTMENT_CLASS + ',.' + cls.RESOURCE_GROUP_CELLS_CLASS);
        if (!isNullOrUndefined(target)) {
            return true;
        }
        target = closest(e.target, '.' + cls.HEADER_CELLS_CLASS);
        if (this.parent.isTimelineView() && !isNullOrUndefined(target)) {
            return true;
        }
        return false;
    };
    return WorkCellInteraction;
}());
export { WorkCellInteraction };
