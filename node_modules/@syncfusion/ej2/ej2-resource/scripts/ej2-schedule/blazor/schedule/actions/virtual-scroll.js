import { addClass, isNullOrUndefined, setStyleAttribute } from '@syncfusion/ej2-base';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
var VirtualScroll = (function () {
    function VirtualScroll(parent) {
        this.translateY = 0;
        this.itemSize = 60;
        this.bufferCount = 3;
        this.renderedLength = 0;
        this.averageRowHeight = 0;
        this.startIndex = 0;
        this.previousTop = 0;
        this.parent = parent;
    }
    VirtualScroll.prototype.getRenderedCount = function () {
        var conTable = this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS);
        this.renderedLength = conTable.querySelector('tbody').children.length;
        return this.renderedLength;
    };
    VirtualScroll.prototype.triggerScrolling = function () {
        this.parent.dotNetRef.invokeMethodAsync('OnContentUpdate', this.startIndex);
    };
    VirtualScroll.prototype.setTranslateValue = function () {
        var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);
        var conWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector('.' + cls.EVENT_TABLE_CLASS);
        var timeIndicator = this.parent.element.querySelector('.' + cls.CURRENT_TIMELINE_CLASS);
        this.setItemSize();
        this.setVirtualTrackHeight(resWrap);
        this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);
        conWrap.scrollTop = resWrap.scrollTop;
    };
    VirtualScroll.prototype.setVirtualTrackHeight = function (resourceWrap) {
        var virtual = this.parent.element.querySelector('.' + cls.VIRTUAL_TRACK_CLASS);
        if (virtual) {
            var count = parseInt(resourceWrap.getAttribute('data-expanded-count'), 10);
            virtual.style.height = (count * this.itemSize) + 'px';
        }
    };
    VirtualScroll.prototype.updateVirtualScrollHeight = function () {
        var virtual = this.parent.element.querySelector('.' + cls.VIRTUAL_TRACK_CLASS);
        var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);
        var lastRenderIndex = parseInt(resWrap.getAttribute('data-rendered-index'), 10);
        var lastCollIndex = parseInt(resWrap.getAttribute('data-expanded-index'), 10);
        var expandedCount = parseInt(resWrap.getAttribute('data-expanded-count'), 10);
        var conTable = this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS);
        this.renderedLength = conTable.querySelector('tbody').children.length;
        virtual.style.height = (conTable.offsetHeight + (expandedCount - (this.renderedLength)) *
            conTable.offsetHeight / this.renderedLength) + 'px';
        this.averageRowHeight = virtual.offsetHeight / expandedCount;
    };
    VirtualScroll.prototype.updateVirtualTrackHeight = function (wrap) {
        var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);
        var lastRenderIndex = parseInt(resWrap.getAttribute('data-rendered-index'), 10);
        var lastCollIndex = parseInt(resWrap.getAttribute('data-expanded-index'), 10);
        var renderedResCount = this.getRenderedCount() + (lastCollIndex - lastRenderIndex);
        var expandedCount = parseInt(resWrap.getAttribute('data-expanded-count'), 10);
        renderedResCount = (renderedResCount > expandedCount) ? expandedCount : renderedResCount;
        wrap.style.height = (renderedResCount * this.itemSize) + 'px';
    };
    VirtualScroll.prototype.setItemSize = function () {
        this.itemSize = util.getElementHeightFromClass(this.parent.activeView.element, cls.WORK_CELLS_CLASS) || this.itemSize;
    };
    VirtualScroll.prototype.beforeInvoke = function (resWrap, conWrap, eventWrap, timeIndicator) {
        var _this = this;
        window.clearTimeout(this.timeValue);
        this.timeValue = window.setTimeout(function () { _this.triggerScrolling(); }, 250);
        this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);
        this.previousTop = conWrap.scrollTop;
    };
    VirtualScroll.prototype.virtualScrolling = function () {
        if (this.parent.quickPopup) {
            this.parent.quickPopup.hide();
        }
        if (this.parent.morePopup) {
            this.parent.morePopup.hide();
        }
        var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);
        var conWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        var eventWrap = this.parent.element.querySelector('.' + cls.EVENT_TABLE_CLASS);
        var timeIndicator = this.parent.element.querySelector('.' + cls.CURRENT_TIMELINE_CLASS);
        var conTable = this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS);
        this.renderedLength = resWrap.querySelector('tbody').children.length;
        var firstTDIndex = parseInt(resWrap.querySelector('tbody td').getAttribute('data-group-index'), 10);
        var scrollHeight = this.parent.options.rowAutoHeight ?
            (conTable.offsetHeight - conWrap.offsetHeight) : this.bufferCount * this.itemSize;
        addClass([conWrap], 'e-transition');
        this.setItemSize();
        if ((conWrap.scrollTop) - this.translateY < 0) {
            this.upScroll(conWrap, firstTDIndex);
            this.beforeInvoke(resWrap, conWrap, eventWrap, timeIndicator);
        }
        else if (conWrap.scrollTop - this.translateY > scrollHeight) {
            this.downScroll(conWrap);
            if (!(this.previousTop === conWrap.scrollTop)) {
                this.beforeInvoke(resWrap, conWrap, eventWrap, timeIndicator);
            }
        }
    };
    VirtualScroll.prototype.upScroll = function (conWrap, firstTDIndex) {
        var index = ~~(conWrap.scrollTop / this.itemSize);
        if (this.parent.options.rowAutoHeight) {
            index = (index > firstTDIndex) ? firstTDIndex - this.bufferCount : index;
        }
        index = (index > 0) ? index : 0;
        if (firstTDIndex === 0) {
            this.translateY = conWrap.scrollTop;
        }
        else {
            var height = (this.parent.options.rowAutoHeight) ? this.averageRowHeight : this.itemSize;
            this.translateY = (conWrap.scrollTop - (this.bufferCount * height) > 0) ?
                conWrap.scrollTop - (this.bufferCount * height) : 0;
        }
        this.startIndex = index;
    };
    VirtualScroll.prototype.downScroll = function (conWrap) {
        var resWrap = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);
        if (resWrap.getAttribute('data-rendered-index') === resWrap.getAttribute('data-expanded-index')) {
            return null;
        }
        var height = (this.parent.options.rowAutoHeight) ? this.averageRowHeight : this.itemSize;
        var nextSetResIndex = ~~(conWrap.scrollTop / height);
        var lastIndex = nextSetResIndex + this.renderedLength;
        var expandedCount = parseInt(resWrap.getAttribute('data-expanded-count'), 10);
        lastIndex = (lastIndex > expandedCount) ? nextSetResIndex + (expandedCount - nextSetResIndex) : lastIndex;
        this.translateY = conWrap.scrollTop;
        if (this.translateY > (expandedCount * height) - (this.renderedLength * height)) {
            this.translateY = (expandedCount * height) - (this.renderedLength * height);
        }
        this.startIndex = lastIndex - this.renderedLength;
    };
    VirtualScroll.prototype.setTranslate = function (resWrap, conWrap, eventWrap, timeIndicator) {
        setStyleAttribute(resWrap.querySelector('table'), {
            transform: "translateY(" + this.translateY + "px)"
        });
        setStyleAttribute(conWrap.querySelector('table'), {
            transform: "translateY(" + this.translateY + "px)"
        });
        setStyleAttribute(eventWrap, {
            transform: "translateY(" + this.translateY + "px)"
        });
        if (!isNullOrUndefined(timeIndicator)) {
            setStyleAttribute(timeIndicator, {
                transform: "translateY(" + this.translateY + "px)"
            });
        }
    };
    return VirtualScroll;
}());
export { VirtualScroll };
