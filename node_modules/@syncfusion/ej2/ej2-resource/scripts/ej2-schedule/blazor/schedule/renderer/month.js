var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventHandler, formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';
import { addClass, removeClass } from '@syncfusion/ej2-base';
import { MonthEvent } from '../event-renderer/month';
import { ViewBase } from './view-base';
import * as util from '../base/util';
import * as cls from '../base/css-constant';
export var ADD_BORDER_LENGTH = 4;
var Month = (function (_super) {
    __extends(Month, _super);
    function Month(parent) {
        var _this = _super.call(this, parent) || this;
        _this.dayNameFormat = 'wide';
        _this.isInverseTableSelect = false;
        _this.allDayLevel = 0;
        return _this;
    }
    Month.prototype.onDataReady = function (args) {
        var appointment = new MonthEvent(this.parent);
        appointment.renderAppointments();
    };
    Month.prototype.onContentScroll = function (e) {
        this.parent.removeNewEventElement();
        this.parent.onVirtualScroll();
        this.scrollTopPanel(e.target);
        this.scrollLeftPanel(e.target);
        this.parent.setPersistence();
    };
    Month.prototype.scrollLeftPanel = function (target) {
        var leftPanel = this.getLeftPanelElement();
        if (leftPanel) {
            leftPanel.scrollTop = target.scrollTop;
        }
    };
    Month.prototype.getLeftPanelElement = function () {
        return this.element.querySelector('.' + cls.WEEK_NUMBER_WRAPPER_CLASS);
    };
    Month.prototype.onScrollUiUpdate = function (args) {
        var headerHeight = this.getHeaderBarHeight();
        var header = this.getDatesHeaderElement();
        var content = this.getContentAreaElement();
        var height = this.parent.element.offsetHeight - headerHeight - header.offsetHeight;
        var leftPanel = this.getLeftPanelElement();
        this.setContentHeight(content, leftPanel, height);
        var scrollBarWidth = util.getScrollBarWidth();
        header.firstElementChild.style[args.cssProperties.rtlBorder] = '';
        header.style[args.cssProperties.rtlPadding] = '';
        if (content.offsetWidth - content.clientWidth > 0) {
            header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
            header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
        }
        else {
            header.firstElementChild.style[args.cssProperties.border] = '';
            header.style[args.cssProperties.padding] = '';
        }
        this.setColWidth(content);
        if (args.scrollPosition) {
            if (leftPanel) {
                leftPanel.scrollTop = args.scrollPosition.top;
            }
            content.scrollTop = args.scrollPosition.top;
            content.scrollLeft = args.scrollPosition.left;
        }
        else {
            var headerCell = this.element.querySelector('.' + cls.HEADER_CELLS_CLASS + '[data-date="'
                + this.parent.getMsFromDate(this.parent.options.selectedDate) + '"]');
            if (!isNullOrUndefined(headerCell)) {
                content.scrollLeft = !this.parent.options.enableRtl ?
                    headerCell.offsetLeft : -(this.parent.getContentTable().offsetWidth - headerCell.offsetLeft - headerCell.offsetWidth);
            }
            else {
                content.scrollLeft = 0;
            }
        }
        this.retainScrollPosition();
    };
    Month.prototype.setContentHeight = function (content, leftPanelElement, height) {
        content.style.height = 'auto';
        if (this.parent.options.currentView === 'Month') {
            content.style.height = formatUnit(height);
        }
        if (leftPanelElement) {
            if (this.parent.options.currentView === 'MonthAgenda') {
                height = this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS).offsetHeight;
            }
            leftPanelElement.style.height = 'auto';
            leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));
        }
    };
    Month.prototype.renderLayout = function () {
        var curElem = [].slice.call(this.parent.element.querySelectorAll('.' + cls.CURRENT_DAY_CLASS));
        if (curElem.length > 0) {
            removeClass(curElem, cls.CURRENT_DAY_CLASS);
        }
        var curDate = util.addLocalOffset(new Date(new Date().setHours(0, 0, 0, 0)));
        var queryString = '.' + cls.WORK_CELLS_CLASS + '[data-date="' + curDate.getTime().toString() + '"]';
        if (this.parent.options.currentView === 'Month' || this.parent.options.currentView === 'MonthAgenda') {
            curElem = [].slice.call(this.parent.element.querySelectorAll('.' + cls.CURRENTDATE_CLASS));
            if (curElem.length > 0) {
                removeClass(curElem, cls.CURRENTDATE_CLASS);
            }
            var curEle = [].slice.call(this.parent.element.querySelectorAll(queryString));
            for (var _i = 0, curEle_1 = curEle; _i < curEle_1.length; _i++) {
                var ele = curEle_1[_i];
                var index = ele.cellIndex;
                var curHeader = [].slice.call(this.parent.element.querySelectorAll('.' + cls.HEADER_CELLS_CLASS))[index];
                addClass([ele], cls.CURRENTDATE_CLASS);
                addClass([curHeader], cls.CURRENT_DAY_CLASS);
            }
        }
        if (this.parent.options.currentView === 'TimelineMonth') {
            var curEle = this.parent.element.querySelector('.' + cls.HEADER_CELLS_CLASS + '[data-date="' + curDate.getTime().toString() + '"]');
            if (!isNullOrUndefined(curEle)) {
                addClass([curEle], cls.CURRENT_DAY_CLASS);
            }
        }
        this.element = this.parent.element.querySelector('.' + cls.TABLE_WRAP_CLASS);
        var headerCells = [].slice.call(this.element.querySelectorAll('.' + cls.DATE_HEADER_WRAP_CLASS + ' td.' + cls.HEADER_CELLS_CLASS));
        for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
            var cell = headerCells_1[_a];
            EventHandler.clearEvents(cell);
            this.wireCellEvents(cell);
        }
        var contentBody = this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS + ' tbody');
        EventHandler.clearEvents(contentBody);
        this.wireCellEvents(contentBody);
        if (this.parent.virtualScrollModule) {
            this.parent.virtualScrollModule.setTranslateValue();
        }
        var wrap = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        EventHandler.clearEvents(wrap);
        EventHandler.add(wrap, 'scroll', this.onContentScroll, this);
        this.renderAppointmentContainer();
        this.parent.setDimensions();
    };
    Month.prototype.wireCellEvents = function (element) {
        EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
        EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);
        if (!this.parent.isAdaptive) {
            EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
        }
    };
    Month.prototype.renderAppointmentContainer = function () {
    };
    Month.prototype.getMonthStart = function (currentDate) {
        var monthStart = util.getWeekFirstDate(util.firstDateOfMonth(currentDate), this.parent.activeViewOptions.firstDayOfWeek);
        var start = new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
        return start;
    };
    Month.prototype.getMonthEnd = function (currentDate) {
        var endDate = util.addMonths(currentDate, this.parent.activeViewOptions.interval - 1);
        var lastWeekOfMonth = util.getWeekFirstDate(util.lastDateOfMonth(endDate), this.parent.activeViewOptions.firstDayOfWeek);
        var monthEnd = util.addDays(lastWeekOfMonth, util.WEEK_LENGTH - 1);
        return monthEnd;
    };
    Month.prototype.getRenderDates = function (workDays) {
        var renderDates = [];
        var currentDate = util.resetTime(this.parent.options.selectedDate);
        var start = this.getMonthStart(currentDate);
        var monthEnd = this.getMonthEnd(currentDate);
        do {
            if (this.parent.activeViewOptions.showWeekend) {
                renderDates.push(start);
            }
            else {
                if (this.isWorkDay(start, workDays)) {
                    renderDates.push(start);
                }
            }
            start = util.addDays(start, 1);
        } while (start.getTime() <= monthEnd.getTime());
        if (!workDays) {
            this.renderDates = renderDates;
        }
        return renderDates;
    };
    Month.prototype.getEndDateFromStartDate = function (start) {
        return util.addDays(new Date(start.getTime()), 1);
    };
    Month.prototype.destroy = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.element = null;
    };
    return Month;
}(ViewBase));
export { Month };
