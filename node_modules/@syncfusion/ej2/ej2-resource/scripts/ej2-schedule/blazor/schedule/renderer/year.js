var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventHandler, formatUnit, removeClass, isNullOrUndefined, setStyleAttribute } from '@syncfusion/ej2-base';
import { ViewBase } from './view-base';
import * as util from '../base/util';
import * as cls from '../base/css-constant';
var Year = (function (_super) {
    __extends(Year, _super);
    function Year(parent) {
        var _this = _super.call(this, parent) || this;
        _this.isInverseTableSelect = false;
        _this.moreIndicatorHeight = 19;
        _this.moreIndicatorHeight =
            (_this.parent.options.rowAutoHeight && _this.parent.options.ignoreWhitespace) ? 0 : _this.moreIndicatorHeight;
        return _this;
    }
    Year.prototype.renderLayout = function () {
        this.element = this.parent.element.querySelector('.' + cls.TABLE_WRAP_CLASS);
        if (this.parent.options.currentView === 'TimelineYear') {
            var workCells = [].slice.call(this.element.querySelectorAll('.e-work-cells:not(.e-other-month)'));
            for (var _i = 0, workCells_1 = workCells; _i < workCells_1.length; _i++) {
                var cell = workCells_1[_i];
                EventHandler.clearEvents(cell);
                this.wireEvents(cell, 'cell');
            }
        }
        this.wireEvents(this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS), 'scroll');
        this.parent.setDimensions();
    };
    Year.prototype.onContentScroll = function (e) {
        var target = e.target;
        if (isNullOrUndefined(this.element)) {
            this.element = target;
        }
        var headerWrapper = this.getDatesHeaderElement();
        if (headerWrapper) {
            headerWrapper.firstElementChild.scrollLeft = target.scrollLeft;
        }
        var scrollTopSelector = "." + cls.MONTH_HEADER_WRAPPER + ",." + cls.RESOURCE_COLUMN_WRAP_CLASS;
        var scrollTopElement = this.element.querySelector(scrollTopSelector);
        if (scrollTopElement) {
            scrollTopElement.scrollTop = target.scrollTop;
        }
        this.parent.setPersistence();
    };
    Year.prototype.onScrollUiUpdate = function (args) {
        var height = this.parent.element.offsetHeight - this.getHeaderBarHeight();
        var headerWrapper = this.element.querySelector('.' + cls.DATE_HEADER_CONTAINER_CLASS);
        if (headerWrapper) {
            height -= headerWrapper.offsetHeight;
        }
        var contentWrapper = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        if (contentWrapper) {
            contentWrapper.style.height = formatUnit(height);
        }
        var leftPanelSelector = "." + cls.MONTH_HEADER_WRAPPER + ",." + cls.RESOURCE_COLUMN_WRAP_CLASS;
        var leftPanelElement = this.element.querySelector(leftPanelSelector);
        if (leftPanelElement) {
            leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(contentWrapper));
        }
        if (!this.parent.isAdaptive && headerWrapper) {
            var scrollBarWidth = util.getScrollBarWidth();
            if (contentWrapper.offsetWidth - contentWrapper.clientWidth > 0) {
                headerWrapper.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
                headerWrapper.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
            }
            else {
                headerWrapper.firstElementChild.style[args.cssProperties.border] = '';
                headerWrapper.style[args.cssProperties.padding] = '';
            }
        }
        this.resetColWidth();
        this.setColWidth(this.getContentAreaElement());
        this.retainScrollPosition();
    };
    Year.prototype.onDataReady = function () {
        if (this.parent.options.currentView === 'TimelineYear') {
            this.element = this.parent.element.querySelector('.' + cls.TABLE_WRAP_CLASS);
            this.removeCellHeight();
            var workCell = this.element.querySelector('.e-work-cells');
            var cellHeight = 0;
            var cellWidth = 0;
            var content = workCell.offsetParent;
            cellHeight = content.offsetHeight / (content.querySelector('tbody').childElementCount);
            cellWidth = content.offsetWidth / (content.querySelector('tbody tr').childElementCount);
            var cellHeader = util.getOuterHeight(workCell.querySelector('.e-date-header'));
            var eventTable = this.element.querySelector('.e-event-table');
            var eventHeight = util.getElementHeightFromClass(eventTable, 'e-appointment');
            var EVENT_GAP = 2;
            var leftValue = void 0;
            var rightValue = void 0;
            var appointments = this.element.querySelectorAll('.e-appointment, .e-more-indicator');
            for (var i = 0; i < appointments.length; i++) {
                var ele = appointments[i];
                removeClass([ele], 'e-event-action');
                var cellData = void 0;
                var cellTop = void 0;
                var height = void 0;
                var width = void 0;
                var levelIndex = parseInt(ele.getAttribute('data-level'), 10);
                if (this.parent.activeViewOptions.group.resources != null &&
                    this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
                    cellData = this.element.querySelector('.e-work-cells' + '[data-date="' + ele.getAttribute('data-date') + '"]' +
                        '[data-group-index="' + ele.getAttribute('data-group-index') + '"]');
                }
                else {
                    cellData = this.element.querySelector('.e-work-cells' + '[data-date="' + ele.getAttribute('data-date') + '"]');
                }
                if (this.parent.options.enableRtl) {
                    rightValue = cellData.cellIndex * cellWidth;
                }
                else {
                    leftValue = cellData.cellIndex * cellWidth;
                }
                if (!isNullOrUndefined(cellData)) {
                    if (ele.classList.contains('e-appointment')) {
                        cellTop = cellData.offsetTop + cellHeader + (eventHeight * levelIndex) + EVENT_GAP;
                        height = eventHeight;
                        width = cellWidth - 2;
                        this.parent.eventBase.wireAppointmentEvents(ele);
                        var overlap = parseInt(ele.getAttribute('data-index'), 10) + 1;
                        var availableHeight = ((overlap + 1) * (eventHeight + EVENT_GAP)) + this.moreIndicatorHeight;
                        if (cellHeight < availableHeight) {
                            this.updateCellHeight(cellData, availableHeight);
                        }
                    }
                    else {
                        cellTop = cellData.offsetTop + (cellHeight - ele.offsetHeight);
                        width = cellWidth - 2;
                    }
                    ele.style.width = width + 'px';
                    ele.style.height = height + 'px';
                    ele.style.right = rightValue + 'px';
                    ele.style.left = leftValue + 'px';
                    ele.style.top = cellTop + 'px';
                }
            }
        }
    };
    Year.prototype.updateCellHeight = function (cell, height) {
        if (height > cell.offsetHeight) {
            setStyleAttribute(cell.parentElement.querySelector('td'), { 'height': height + 'px' });
            if (this.parent.activeViewOptions.group.resources.length > 0) {
                var resourceCell = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_TABLE_CLASS + ' ' + 'tbody td[data-group-index="' +
                    cell.getAttribute('data-group-index') + '"]');
                if (resourceCell) {
                    setStyleAttribute(resourceCell, { 'height': height + 'px' });
                }
            }
            var monthHeader = this.parent.element.querySelector('.e-month-header-wrapper table tr:nth-child(' +
                (cell.parentElement.rowIndex + 1) + ') td');
            if (monthHeader) {
                setStyleAttribute(monthHeader, { 'height': height + 'px' });
            }
        }
    };
    Year.prototype.removeCellHeight = function () {
        var elementSelector = "." + cls.MONTH_HEADER_WRAPPER + " tbody tr,." + cls.RESOURCE_COLUMN_TABLE_CLASS + " tbody tr,." + cls.CONTENT_TABLE_CLASS + " tbody tr";
        var rows = [].slice.call(this.element.querySelectorAll(elementSelector));
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
            var row = rows_1[_i];
            row.firstElementChild.style.height = '';
        }
    };
    Year.prototype.getEndDateFromStartDate = function (start) {
        var date = new Date(start.getTime());
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            date = util.lastDateOfMonth(date);
        }
        return util.addDays(new Date(date.getTime()), 1);
    };
    Year.prototype.wireEvents = function (element, type) {
        if (type === 'cell') {
            if (this.parent.options.currentView === 'TimelineYear') {
                EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);
                if (!this.parent.isAdaptive) {
                    EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
                }
            }
        }
        else {
            EventHandler.add(element, 'scroll', this.onContentScroll, this);
        }
    };
    Year.prototype.destroy = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        if (this.element) {
            this.element = null;
        }
    };
    return Year;
}(ViewBase));
export { Year };
