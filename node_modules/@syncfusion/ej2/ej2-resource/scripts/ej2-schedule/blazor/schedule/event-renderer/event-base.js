import { addClass, removeClass, isNullOrUndefined, EventHandler, closest, extend } from '@syncfusion/ej2-base';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
var EventBase = (function () {
    function EventBase(parent) {
        this.slots = [];
        this.isDoubleTapped = false;
        this.parent = parent;
    }
    EventBase.prototype.getSelectedEventElements = function (target) {
        this.removeSelectedAppointmentClass();
        if (this.parent.selectedElements.length <= 0) {
            this.parent.selectedElements.push(target);
        }
        else {
            var isAlreadySelected = this.parent.selectedElements.filter(function (element) {
                return element.getAttribute('data-guid') === target.getAttribute('data-guid');
            });
            if (isAlreadySelected.length <= 0) {
                var elementSelector = 'div[data-guid="' + target.getAttribute('data-guid') + '"]';
                var focusElements = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
                for (var _i = 0, focusElements_1 = focusElements; _i < focusElements_1.length; _i++) {
                    var element = focusElements_1[_i];
                    this.parent.selectedElements.push(element);
                }
            }
            else {
                var selectedElements = this.parent.selectedElements.filter(function (element) {
                    return element.getAttribute('data-guid') !== target.getAttribute('data-guid');
                });
                this.parent.selectedElements = selectedElements;
            }
        }
        if (target && this.parent.selectedElements.length > 0) {
            this.addSelectedAppointments(this.parent.selectedElements);
        }
        return this.parent.selectedElements;
    };
    EventBase.prototype.getSelectedEvents = function () {
        var eventSelect = [];
        var elementSelect = [];
        var selectAppointments = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_BORDER));
        selectAppointments.filter(function (element) {
            var isAlreadyAdded = eventSelect.filter(function (guid) { return guid === element.getAttribute('data-guid'); });
            if (isAlreadyAdded.length === 0) {
                eventSelect.push(element.getAttribute('data-guid'));
            }
            elementSelect.push(element);
        });
        return {
            element: elementSelect.length > 1 ? elementSelect : elementSelect[0],
            guid: eventSelect
        };
    };
    EventBase.prototype.removeSelectedAppointmentClass = function () {
        var selectedAppointments = this.getSelectedAppointments();
        for (var _i = 0, selectedAppointments_1 = selectedAppointments; _i < selectedAppointments_1.length; _i++) {
            var appointment = selectedAppointments_1[_i];
            appointment.setAttribute('aria-selected', 'false');
        }
        removeClass(selectedAppointments, cls.APPOINTMENT_BORDER);
        if (this.parent.options.currentView === 'Agenda' || this.parent.options.currentView === 'MonthAgenda') {
            removeClass(selectedAppointments, cls.AGENDA_SELECTED_CELL);
        }
    };
    EventBase.prototype.addSelectedAppointments = function (cells) {
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            cell.setAttribute('aria-selected', 'true');
        }
        if (this.parent.options.currentView !== 'MonthAgenda') {
            this.parent.removeSelectedClass();
        }
        addClass(cells, cls.APPOINTMENT_BORDER);
    };
    EventBase.prototype.getSelectedAppointments = function () {
        return [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_BORDER + ',.' + cls.APPOINTMENT_CLASS + ':focus'));
    };
    EventBase.prototype.focusElement = function () {
        var scheduleEditorDialog = document.querySelector('#' + this.parent.element.id + '_dialog_wrapper');
        if (scheduleEditorDialog && scheduleEditorDialog.classList.contains('e-popup-open')) {
            return;
        }
        var selectedCell = this.parent.getSelectedElements();
        if (selectedCell.length > 0) {
            if (this.parent.keyboardInteractionModule) {
                var target = ((!isNullOrUndefined(this.parent.activeCellsData) &&
                    this.parent.activeCellsData.element) || selectedCell[selectedCell.length - 1]);
                this.parent.keyboardInteractionModule.selectCells(target instanceof Array, target);
            }
            return;
        }
        var selectedAppointments = this.getSelectedAppointments();
        if (selectedAppointments.length > 0) {
            selectedAppointments[selectedAppointments.length - 1].focus();
            return;
        }
    };
    EventBase.prototype.splitEvent = function (event, dateRender) {
        var start = util.resetTime(new Date(event.startTime + '')).getTime();
        var end = util.resetTime(new Date(event.endTime + '')).getTime();
        if (util.getDateInMs(event.endTime) <= 0) {
            var temp = util.addDays(util.resetTime(new Date(event.endTime + '')), -1).getTime();
            end = start > temp ? start : temp;
        }
        var orgStart = start;
        var orgEnd = end;
        var ranges = [];
        if (start !== end) {
            if (start < dateRender[0].getTime()) {
                start = dateRender[0].getTime();
            }
            if (end > dateRender[dateRender.length - 1].getTime()) {
                end = dateRender[dateRender.length - 1].getTime();
            }
            var cStart = start;
            for (var level = 0; level < this.slots.length; level++) {
                var slot = this.slots[level];
                if (this.parent.options.currentView === 'WorkWeek' || this.parent.options.currentView === 'TimelineWorkWeek'
                    || this.parent.activeViewOptions.group.byDate || this.parent.activeViewOptions.showWeekend) {
                    var slotDates = [];
                    for (var _i = 0, slot_1 = slot; _i < slot_1.length; _i++) {
                        var s = slot_1[_i];
                        slotDates.push(new Date(s));
                    }
                    var renderedDates = this.getRenderedDates(slotDates);
                    if (!isNullOrUndefined(renderedDates) && renderedDates.length > 0) {
                        slot = [];
                        for (var _a = 0, renderedDates_1 = renderedDates; _a < renderedDates_1.length; _a++) {
                            var date = renderedDates_1[_a];
                            slot.push(date.getTime());
                        }
                    }
                }
                var firstSlot = slot[0];
                cStart = (cStart <= firstSlot && end >= firstSlot) ? firstSlot : cStart;
                if (cStart > end || firstSlot > end) {
                    break;
                }
                if (!this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.showWeekend &&
                    this.parent.options.currentView !== 'WorkWeek' && this.parent.options.currentView !== 'TimelineWorkWeek') {
                    var startIndex = slot.indexOf(cStart);
                    if (startIndex !== -1) {
                        var endIndex = slot.indexOf(end);
                        var hasBreak = endIndex !== -1;
                        endIndex = hasBreak ? endIndex : slot.length - 1;
                        var count = ((endIndex - startIndex) + 1);
                        var isLeft = (slot[startIndex] !== orgStart);
                        var isRight = (slot[endIndex] !== orgEnd);
                        ranges.push(this.cloneEventObject(event, slot[startIndex], slot[endIndex], count, isLeft, isRight));
                        if (hasBreak) {
                            break;
                        }
                    }
                }
                else {
                    if (this.dateInRange(cStart, slot[0], slot[slot.length - 1])) {
                        var availSlot = [];
                        for (var i = 0; i < slot.length; i++) {
                            if (this.dateInRange(slot[i], orgStart, orgEnd)) {
                                availSlot.push(slot[i]);
                            }
                        }
                        if (availSlot.length > 0) {
                            if (!this.parent.activeViewOptions.group.byDate) {
                                var isLeft = (availSlot[0] !== orgStart);
                                var isRight = (availSlot[availSlot.length - 1] !== orgEnd);
                                ranges.push(this.cloneEventObject(event, availSlot[0], availSlot[availSlot.length - 1], availSlot.length, isLeft, isRight));
                            }
                            else {
                                for (var _b = 0, availSlot_1 = availSlot; _b < availSlot_1.length; _b++) {
                                    var slot_2 = availSlot_1[_b];
                                    ranges.push(this.cloneEventObject(event, slot_2, slot_2, 1, (slot_2 !== orgStart), (slot_2 !== orgEnd)));
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            ranges.push(this.cloneEventObject(event, start, end, 1, false, false));
        }
        return ranges;
    };
    EventBase.prototype.dateInRange = function (date, start, end) {
        return start <= date && date <= end;
    };
    EventBase.prototype.cloneEventObject = function (event, start, end, count, isLeft, isRight) {
        var e = extend({}, event, null, true);
        var data = { count: count, isLeft: isLeft, isRight: isRight };
        data.startTime = event.startTime;
        data.endTime = event.endTime;
        e.data = data;
        e.startTime = new Date(start);
        e.endTime = new Date(end);
        return e;
    };
    EventBase.prototype.getRenderedDates = function (dateRender) {
        var firstDate = 0;
        var lastDate = dateRender.length;
        var filteredDates;
        if ((dateRender[0] < this.parent.options.minDate) && dateRender[dateRender.length - 1] > this.parent.options.maxDate) {
            for (var i = 0; i < dateRender.length; i++) {
                if (dateRender[i].getTime() === this.parent.options.minDate.getTime()) {
                    firstDate = i;
                }
                if (dateRender[i].getTime() === this.parent.options.maxDate.getTime()) {
                    lastDate = i;
                }
            }
            filteredDates = dateRender.filter(function (date) {
                return ((date >= dateRender[firstDate]) && (date <= dateRender[lastDate]));
            });
        }
        return filteredDates;
    };
    EventBase.prototype.isValidEvent = function (eventObj, start, end, schedule) {
        var isHourRange = end.getTime() > schedule.startHour.getTime() && start.getTime() < schedule.endHour.getTime();
        var isSameRange = schedule.startHour.getTime() <= start.getTime() &&
            eventObj.startTime.getTime() >= schedule.startHour.getTime() &&
            eventObj.endTime.getTime() < schedule.endHour.getTime() && start.getTime() === end.getTime();
        return isHourRange || isSameRange;
    };
    EventBase.prototype.getStEdHours = function (date, startHour, endHour) {
        var date1 = new Date(date.getTime());
        date1.setHours(startHour.getHours());
        date1.setMinutes(startHour.getMinutes());
        date1.setSeconds(startHour.getSeconds());
        var date2 = new Date(date.getTime());
        if (endHour.getHours() === 0) {
            date2.setDate(date2.getDate() + 1);
        }
        else {
            date2.setHours(endHour.getHours());
            date2.setMinutes(endHour.getMinutes());
            date2.setSeconds(endHour.getSeconds());
        }
        return { startHour: date1, endHour: date2 };
    };
    EventBase.prototype.appointmentBorderRemove = function (event) {
        var element = event.target;
        if (closest(element, '.' + cls.APPOINTMENT_CLASS)) {
            if (this.parent.options.currentView !== 'MonthAgenda') {
                this.parent.removeSelectedClass();
            }
        }
        else if (!closest(element, '.' + cls.POPUP_OPEN)) {
            this.removeSelectedAppointmentClass();
        }
    };
    EventBase.prototype.wireAppointmentEvents = function (element, isPreventCrud, isMorePopupEvent) {
        if (isPreventCrud === void 0) { isPreventCrud = false; }
        if (isMorePopupEvent === void 0) { isMorePopupEvent = false; }
        if (element.classList.contains('e-block-appointment')) {
            return;
        }
        var isReadOnly = element.getAttribute('aria-readonly') === 'true';
        EventHandler.remove(element, 'click', this.eventClick);
        EventHandler.remove(element, 'dblclick', this.eventDoubleClick);
        EventHandler.remove(element, 'touchstart', this.eventTouchClick);
        if (this.parent.options.currentView !== 'TimelineYear' || isMorePopupEvent) {
            EventHandler.add(element, 'click', this.eventClick, this);
            if (!this.parent.isAdaptive) {
                EventHandler.add(element, 'touchstart', this.eventTouchClick, this);
            }
            if (!this.parent.isAdaptive && !this.parent.activeViewOptions.readonly && !isReadOnly) {
                EventHandler.add(element, 'dblclick', this.eventDoubleClick, this);
            }
        }
        if (!this.parent.activeViewOptions.readonly && !isReadOnly && !isPreventCrud) {
            if (this.parent.resizeModule) {
                this.parent.resizeModule.wireResizeEvent(element);
            }
            if (this.parent.dragAndDropModule) {
                this.parent.dragAndDropModule.wireDragEvent(element);
            }
        }
    };
    EventBase.prototype.eventTouchClick = function (e) {
        var _this = this;
        setTimeout(function () { return _this.isDoubleTapped = false; }, 250);
        e.preventDefault();
        if (this.isDoubleTapped) {
            this.eventDoubleClick(e);
        }
        else if (!this.isDoubleTapped) {
            this.isDoubleTapped = true;
            this.eventClick(e);
        }
    };
    EventBase.prototype.eventClick = function (eventData) {
        var target = eventData.target;
        if (target.classList.contains(cls.DRAG_CLONE_CLASS) || target.classList.contains(cls.RESIZE_CLONE_CLASS) ||
            target.classList.contains(cls.BLOCK_APPOINTMENT_CLASS)) {
            return;
        }
        if (this.parent.isAdaptive && this.parent.isTapHold) {
            this.parent.selectedElements = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_BORDER));
            var target_1 = closest(eventData.target, '.' + cls.APPOINTMENT_CLASS);
            var selectedElements = this.getSelectedEventElements(target_1);
            if (selectedElements.length > 0) {
                var titleContent = (selectedElements.length === 1) ?
                    selectedElements[0].querySelector('.' + cls.SUBJECT_CLASS).innerHTML :
                    '(' + selectedElements.length + ')' + '&nbsp;' + 'selected item(s)';
                this.parent.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS).innerHTML = titleContent;
                if (selectedElements.length > 1) {
                    addClass([this.parent.quickPopup.element.querySelector('.' + cls.EDIT_ICON_CLASS)], cls.HIDDEN_CLASS);
                }
                else {
                    removeClass([this.parent.quickPopup.element.querySelector('.' + cls.EDIT_ICON_CLASS)], cls.HIDDEN_CLASS);
                }
            }
            else {
                this.parent.selectedElements = [];
                this.parent.onQuickPopupClose();
            }
        }
        if (eventData.ctrlKey && eventData.which === 1 && this.parent.keyboardInteractionModule) {
            this.parent.selectedElements = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_BORDER));
            var target_2 = closest(eventData.target, '.' + cls.APPOINTMENT_CLASS);
            this.getSelectedEventElements(target_2);
            var guid = this.activeEventData(eventData, false);
            this.parent.dotNetRef.invokeMethodAsync('TriggerEventClick', guid, this.getMouseEvent(eventData), true, false);
        }
        else {
            this.removeSelectedAppointmentClass();
            var guid = this.activeEventData(eventData, true);
            this.parent.dotNetRef.invokeMethodAsync('TriggerEventClick', guid, this.getMouseEvent(eventData), false, false);
        }
    };
    EventBase.prototype.eventDoubleClick = function (e) {
        if (e.type === 'touchstart') {
            this.activeEventData(e, true);
        }
        this.removeSelectedAppointmentClass();
        if (this.parent.activeEventData.element.classList.contains(cls.INLINE_APPOINTMENT_CLASS) ||
            this.parent.activeEventData.element.querySelector('.' + cls.INLINE_SUBJECT_CLASS)) {
            return;
        }
        var guid = this.activeEventData(e, false);
        this.parent.dotNetRef.invokeMethodAsync('TriggerEventDoubleClick', guid, this.getMouseEvent(e));
    };
    EventBase.prototype.getMouseEvent = function (e) {
        var mouseEvent = {
            altKey: e.altKey,
            button: e.button,
            buttons: e.buttons,
            clientX: e.clientX,
            clientY: e.clientY,
            ctrlKey: e.ctrlKey,
            detail: e.detail,
            metaKey: e.metaKey,
            screenX: e.screenX,
            screenY: e.screenY,
            shiftKey: e.shiftKey,
            type: e.type
        };
        return mouseEvent;
    };
    EventBase.prototype.activeEventData = function (eventData, isMultiple) {
        var target = closest(eventData.target, '.' + cls.APPOINTMENT_CLASS);
        var guid = target.getAttribute('data-guid');
        if (isMultiple) {
            this.addSelectedAppointments([].slice.call(this.parent.element.querySelectorAll('div[data-guid="' + guid + '"]')));
            target.focus();
        }
        this.parent.activeEventData = { element: target, guid: [guid] };
        return guid;
    };
    return EventBase;
}());
export { EventBase };
