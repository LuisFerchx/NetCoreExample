var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { setStyleAttribute, removeClass } from '@syncfusion/ej2-base';
import * as cls from '../base/css-constant';
import * as util from '../base/util';
import { MonthEvent } from './month';
var EVENT_GAP = 2;
var BLOCK_INDICATOR_WIDTH = 22;
var BLOCK_INDICATOR_HEIGHT = 18;
var TimelineEvent = (function (_super) {
    __extends(TimelineEvent, _super);
    function TimelineEvent(parent, type) {
        var _this = _super.call(this, parent) || this;
        _this.startHour = _this.parent.activeView.getStartHour();
        _this.endHour = _this.parent.activeView.getEndHour();
        _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;
        _this.interval = _this.parent.activeViewOptions.timeScale.interval;
        _this.day = 0;
        _this.rowIndex = 0;
        _this.renderType = type;
        var tr = [].slice.call(_this.parent.element.querySelectorAll('.' + cls.CONTENT_TABLE_CLASS + ' tbody tr'));
        _this.dayLength = tr.length === 0 ? 0 : tr[0].children.length;
        _this.content = _this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS);
        return _this;
    }
    TimelineEvent.prototype.getSlotDates = function () {
        this.slots = [];
        this.slots.push(this.parent.activeView.renderDates.map(function (date) { return +date; }));
        if (this.parent.activeViewOptions.headerRows.length > 0 &&
            this.parent.activeViewOptions.headerRows[this.parent.activeViewOptions.headerRows.length - 1].option !== 'Hour') {
            this.renderType = 'day';
            this.cellWidth = this.content.offsetWidth / this.dateRender.length;
            this.slotsPerDay = 1;
        }
        else {
            this.slotsPerDay = (this.dayLength / this.dateRender.length);
        }
    };
    TimelineEvent.prototype.renderAppointments = function () {
        var eventsClass = '.' + cls.APPOINTMENT_CLASS + ', .' + cls.MORE_INDICATOR_CLASS;
        var blockEventClass = '.' + cls.BLOCK_APPOINTMENT_CLASS + ', .' + cls.BLOCK_INDICATOR_CLASS;
        var elementList = [].slice.call(this.parent.element.querySelectorAll(eventsClass + ', ' + blockEventClass));
        var workCell = this.parent.element.querySelector('.e-work-cells');
        if (!workCell) {
            return;
        }
        var conWrap = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        if (this.parent.options.rowAutoHeight) {
            this.parent.uiStateValues.top = conWrap.scrollTop;
            this.parent.uiStateValues.left = conWrap.scrollLeft;
        }
        this.removeHeightProperty(cls.CONTENT_TABLE_CLASS);
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            this.removeHeightProperty(cls.RESOURCE_COLUMN_TABLE_CLASS);
        }
        var content = workCell.offsetParent;
        this.cellHeight = content.offsetHeight / (content.querySelector('tbody').childElementCount);
        this.cellWidth = content.offsetWidth / (content.querySelector('tbody tr').childElementCount);
        var currentPanel = this.parent.element.querySelector('.e-current-panel');
        var appHeight = util.getElementHeightFromClass(currentPanel, cls.APPOINTMENT_CLASS);
        this.dateRender = this.parent.activeView.renderDates;
        this.getSlotDates();
        for (var i = 0; i < elementList.length; i++) {
            var ele = elementList[i];
            removeClass([ele], 'e-event-action');
            this.removedPositionedStyles(ele);
            var startTime = util.removeLocalOffset(this.getStartTime(ele));
            var endTime = util.removeLocalOffset(this.getEndTime(ele));
            this.day = this.parent.getIndexOfDate(this.dateRender, util.resetTime(new Date(startTime.getTime())));
            if (this.day >= 0) {
                var overlapCount = this.getOverLapCount(ele);
                var diffInDays = this.getDataCount(ele);
                var isAllDay = this.isAllDayData(ele) === 'true' ? true : false;
                var appWidth = this.getEventWidth(startTime, endTime, isAllDay, diffInDays);
                appWidth = this.renderType === 'day' ? appWidth - 2 : appWidth;
                var appLeft = 0;
                var appRight = 0;
                var position = this.getPosition(startTime, endTime, !ele.classList.contains('e-more-indicator') ? isAllDay : false, this.day);
                appWidth = (appWidth <= 0) ? this.cellWidth : appWidth;
                var resIndex = this.getGroupIndex(ele);
                var top_1 = this.getRowTop(resIndex);
                var appTop = (ele.classList.contains('e-block-appointment')) ? top_1 :
                    (top_1 + EVENT_GAP) + (overlapCount * (appHeight + EVENT_GAP));
                appLeft = (this.parent.options.enableRtl) ? 0 : position;
                appRight = (this.parent.options.enableRtl) ? position : 0;
                var height = ((overlapCount + 1) * (appHeight + EVENT_GAP)) + this.moreIndicatorHeight;
                if (!ele.classList.contains('e-more-indicator')) {
                    if (!ele.classList.contains('e-block-indicator')) {
                        setStyleAttribute(ele, {
                            'width': appWidth + 'px', 'left': appLeft + 'px', 'right': appRight + 'px', 'top': appTop + 'px'
                        });
                        if (this.maxOrIndicator) {
                            this.setMaxEventHeight(ele);
                        }
                        if (ele.classList.contains('e-block-appointment')) {
                            setStyleAttribute(ele, {
                                'height': this.cellHeight - 1 + 'px'
                            });
                        }
                        if (ele.classList.contains('e-appointment')) {
                            this.parent.eventBase.wireAppointmentEvents(ele);
                        }
                        if (this.parent.options.rowAutoHeight) {
                            var firstChild = this.getFirstChild(resIndex);
                            this.updateCellHeight(firstChild, height);
                        }
                    }
                    else {
                        position = (Math.floor(position / this.cellWidth) * this.cellWidth) + this.cellWidth - BLOCK_INDICATOR_WIDTH;
                        if (this.parent.options.enableRtl) {
                            ele.style.right = position + 'px';
                        }
                        else {
                            ele.style.left = position + 'px';
                        }
                        ele.style.top = top_1 + this.cellHeight - BLOCK_INDICATOR_HEIGHT + 'px';
                    }
                }
                else {
                    var appArea = this.cellHeight - this.moreIndicatorHeight;
                    ele.style.top = top_1 + appArea + 'px';
                    ele.style.width = this.cellWidth + 'px';
                    ele.style.left = (Math.floor(appLeft / this.cellWidth) * this.cellWidth) + 'px';
                    ele.style.right = (Math.floor(appRight / this.cellWidth) * this.cellWidth) + 'px';
                }
            }
        }
        this.updateRowHeight();
    };
    TimelineEvent.prototype.updateRowHeight = function () {
        if (this.parent.options.rowAutoHeight) {
            this.updateBlockElements();
            var data = {
                cssProperties: this.parent.getCssProperties(),
                isPreventScrollUpdate: true,
                scrollPosition: { left: this.parent.uiStateValues.left, top: this.parent.uiStateValues.top }
            };
            if (this.parent.virtualScrollModule) {
                this.parent.virtualScrollModule.updateVirtualScrollHeight();
            }
            this.parent.onScrollUiUpdate(data);
        }
    };
    TimelineEvent.prototype.updateBlockElements = function () {
        var blockElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.BLOCK_APPOINTMENT_CLASS));
        for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {
            var element = blockElement_1[_i];
            var resIndex = parseInt(element.getAttribute('data-group-index'), 10);
            var firstChild = this.getFirstChild(resIndex);
            element.style.height = firstChild.offsetHeight + 'px';
            var width = Math.round(element.offsetWidth / firstChild.offsetWidth);
            element.style.width = (firstChild.offsetWidth * width) + 'px';
        }
        var blockIndicator = [].slice.call(this.parent.element.querySelectorAll('.' + cls.BLOCK_INDICATOR_CLASS));
        for (var _a = 0, blockIndicator_1 = blockIndicator; _a < blockIndicator_1.length; _a++) {
            var element = blockIndicator_1[_a];
            var resIndex = parseInt(element.getAttribute('data-group-index'), 10);
            element.style.top = this.getRowTop(resIndex) +
                this.getFirstChild(resIndex).offsetHeight - BLOCK_INDICATOR_HEIGHT + 'px';
        }
    };
    TimelineEvent.prototype.setMaxEventHeight = function (event) {
        setStyleAttribute(event, {
            'height': (this.cellHeight - (this.maxHeight ? 0 : EVENT_GAP) -
                (this.maxHeight ? 0 : this.moreIndicatorHeight)) + 'px'
        });
    };
    TimelineEvent.prototype.getFirstChild = function (index) {
        var query = '.' + cls.CONTENT_TABLE_CLASS + ' tbody td';
        var groupIndex = '';
        if (this.parent.activeViewOptions.group.resources.length > 0) {
            groupIndex = '[data-group-index="' + index.toString() + '"]';
        }
        var td = this.parent.element.querySelector(query + groupIndex);
        return td;
    };
    TimelineEvent.prototype.updateCellHeight = function (cell, height) {
        if ((height > cell.offsetHeight)) {
            setStyleAttribute(cell, { 'height': height + 'px' });
            if (this.parent.activeViewOptions.group.resources.length > 0) {
                var resourceCell = this.parent.element.querySelector('.' + cls.RESOURCE_COLUMN_TABLE_CLASS + ' ' + 'tbody td[data-group-index="' +
                    cell.getAttribute('data-group-index') + '"]');
                if (resourceCell) {
                    setStyleAttribute(resourceCell, { 'height': height + 'px' });
                }
            }
            var monthHeader = this.parent.element.querySelector('.e-month-header-wrapper table tr:nth-child(' +
                (cell.parentElement.rowIndex + 1) + ') td');
            if (monthHeader) {
                setStyleAttribute(monthHeader, { 'height': height + 'px' });
            }
        }
    };
    TimelineEvent.prototype.isAllDayData = function (ele) {
        return ele.getAttribute('data-all-day');
    };
    TimelineEvent.prototype.getEventWidth = function (startDate, endDate, isAllDay, count) {
        if (this.renderType === 'day' || isAllDay) {
            return (count * this.slotsPerDay) * this.cellWidth;
        }
        if (this.isSameDay(startDate, endDate)) {
            return this.getSameDayEventsWidth(startDate, endDate);
        }
        else {
            return this.getSpannedEventsWidth(startDate, endDate, count);
        }
    };
    TimelineEvent.prototype.getSameDayEventsWidth = function (startDate, endDate) {
        return (((endDate.getTime() - startDate.getTime())) / (60 * 1000) * (this.cellWidth * this.slotCount) / this.interval);
    };
    TimelineEvent.prototype.getSpannedEventsWidth = function (startDate, endDate, diffInDays) {
        var width = (diffInDays * this.slotsPerDay) * this.cellWidth;
        var endWidth;
        var start = util.getStartEndHours(util.resetTime(new Date(startDate.getTime())), this.startHour, this.endHour);
        var startWidth = this.getSameDayEventsWidth(start.startHour, startDate);
        if (this.parent.getIndexOfDate(this.dateRender, util.resetTime(new Date(endDate.getTime()))) === -1) {
            endWidth = 0;
        }
        else {
            var end = util.getStartEndHours(util.resetTime(new Date(endDate.getTime())), this.startHour, this.endHour);
            endWidth = this.getSameDayEventsWidth(endDate, end.endHour);
            endWidth = ((this.slotsPerDay * this.cellWidth) === endWidth) ? 0 : endWidth;
        }
        var spannedWidth = startWidth + endWidth;
        return (width > spannedWidth) ? width - spannedWidth : endWidth - startWidth;
    };
    TimelineEvent.prototype.isSameDay = function (startTime, endTime) {
        var startDay = this.parent.getIndexOfDate(this.dateRender, util.resetTime(new Date(startTime.getTime())));
        var endDay = this.parent.getIndexOfDate(this.dateRender, util.resetTime(new Date(endTime.getTime())));
        return (startDay === endDay);
    };
    TimelineEvent.prototype.getAppointmentLeft = function (schedule, startTime, day) {
        var slotTd = (this.isSameDay(startTime, schedule.startHour)) ?
            ((startTime.getTime() - schedule.startHour.getTime()) / ((60 * 1000) * this.interval)) * this.slotCount : 0;
        if (day === 0) {
            return slotTd;
        }
        else {
            var daySlot = Math.round((((schedule.endHour.getTime() - schedule.startHour.getTime()) / (60 * 1000)) / this.interval) * this.slotCount);
            return (daySlot * day) + slotTd;
        }
    };
    TimelineEvent.prototype.getPosition = function (startTime, endTime, isAllDay, day) {
        if (this.renderType === 'day' || isAllDay) {
            return (day * this.slotsPerDay) * this.cellWidth;
        }
        var currentDate = util.resetTime(new Date(this.dateRender[day].getTime()));
        var schedule = util.getStartEndHours(currentDate, this.startHour, this.endHour);
        var cellIndex;
        if (schedule.endHour.getTime() <= endTime.getTime() && schedule.startHour.getTime() >= startTime.getTime()) {
            cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);
        }
        else if (schedule.endHour.getTime() <= endTime.getTime()) {
            cellIndex = this.getAppointmentLeft(schedule, startTime, day);
        }
        else if (schedule.startHour.getTime() >= startTime.getTime()) {
            cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);
        }
        else {
            cellIndex = this.getAppointmentLeft(schedule, startTime, day);
        }
        return cellIndex * this.cellWidth;
    };
    TimelineEvent.prototype.getRowTop = function (resIndex) {
        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
            return ((this.parent.activeViewOptions.group.resources.length > 1 || this.parent.virtualScrollModule ||
                this.parent.options.rowAutoHeight) ? this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS +
                ' ' + 'tbody td[data-group-index="' + resIndex.toString() + '"]').offsetTop : this.cellHeight * resIndex);
        }
        return 0;
    };
    TimelineEvent.prototype.renderEvents = function (event, resIndex, appointmentsList) {
        var eventData = event.data;
        var startTime = event.startTime;
        var endTime = event.endTime;
        this.dateRender = this.parent.activeView.renderDates;
        this.day = this.parent.getIndexOfDate(this.dateRender, util.resetTime(new Date(startTime.getTime())));
        var cellTd = this.getCellTd();
        var appHeight = this.eventHeight;
        var diffInDays = eventData.count;
        var appWidth = this.getEventWidth(startTime, endTime, event.isAllDay, diffInDays);
        appWidth = this.renderType === 'day' ? appWidth - 2 : appWidth;
        var position = this.getPosition(startTime, endTime, event.isAllDay, this.day);
        appWidth = (appWidth <= 0) ? this.cellWidth : appWidth;
        var top = this.getRowTop(resIndex);
        var appTop = (top + EVENT_GAP) + ((appHeight + EVENT_GAP));
        var appLeft = (this.parent.options.enableRtl) ? 0 : position;
        var appRight = (this.parent.options.enableRtl) ? position : 0;
        var appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();
        setStyleAttribute(appointmentElement, {
            'width': appWidth + 'px', 'left': appLeft + 'px', 'right': appRight + 'px', 'top': appTop + 'px'
        });
        this.renderEventElement(appointmentElement, cellTd);
    };
    TimelineEvent.prototype.getCellTd = function () {
        var wrapIndex = this.parent.uiStateValues.isGroupAdaptive ? 0 : this.rowIndex;
        return this.eventContainers[wrapIndex];
    };
    return TimelineEvent;
}(MonthEvent));
export { TimelineEvent };
