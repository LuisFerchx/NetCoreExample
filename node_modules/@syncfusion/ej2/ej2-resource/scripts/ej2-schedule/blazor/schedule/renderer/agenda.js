var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { formatUnit, EventHandler, setStyleAttribute, isNullOrUndefined, createElement } from '@syncfusion/ej2-base';
import { ViewBase } from './view-base';
import * as util from '../base/util';
import * as cls from '../base/css-constant';
var Agenda = (function (_super) {
    __extends(Agenda, _super);
    function Agenda(parent) {
        var _this = _super.call(this, parent) || this;
        _this.viewClass = 'e-agenda-view';
        _this.isInverseTableSelect = false;
        _this.translateY = 0;
        _this.itemCount = 0;
        _this.elementHeight = 70;
        _this.bufferCount = 3;
        _this.renderedCount = 10;
        return _this;
    }
    Agenda.prototype.renderLayout = function () {
        this.element = this.parent.element.querySelector('.' + cls.TABLE_WRAP_CLASS);
        this.wireEvents();
        this.parent.setDimensions();
    };
    Agenda.prototype.onDataReady = function (args, count, isScrollTop) {
        if (this.parent.options.enablePersistence) {
            this.retainScrollPosition();
            return;
        }
        var wrap = this.element.querySelector('.' + cls.VIRTUAL_TRACK_CLASS);
        if (!wrap) {
            wrap = createElement('div', { className: cls.VIRTUAL_TRACK_CLASS });
        }
        var conWrap = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        wrap.style.height = (count * this.elementHeight) - conWrap.offsetHeight + 'px';
        conWrap.appendChild(wrap);
        if (isScrollTop) {
            conWrap.scrollTop = this.translateY = 0;
            this.setTranslate(conWrap);
        }
        this.itemCount = count;
    };
    Agenda.prototype.wireEvents = function () {
        EventHandler.add(this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS), 'scroll', this.agendaScrolling, this);
    };
    Agenda.prototype.unWireEvents = function () {
        EventHandler.remove(this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS), 'scroll', this.agendaScrolling);
    };
    Agenda.prototype.agendaScrolling = function () {
        if (!isNullOrUndefined(this.parent.quickPopup)) {
            this.parent.quickPopup.hide();
        }
        if (this.parent.activeViewOptions.allowVirtualScrolling) {
            var conWrap = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
            var appElement = this.element.querySelector('.e-agenda-item');
            this.elementHeight = appElement ? appElement.offsetHeight : this.elementHeight;
            var index = void 0;
            if (conWrap.scrollTop - this.translateY < 0) {
                index = ~~(conWrap.scrollTop / this.elementHeight);
                this.translateY = conWrap.scrollTop;
                this.setTranslate(conWrap);
                this.beforeInvoke(index);
            }
            else if (conWrap.scrollTop - this.translateY > (this.elementHeight * this.bufferCount)) {
                index = ~~(conWrap.scrollTop / this.elementHeight);
                index = (index > this.itemCount) ? this.itemCount - this.renderedCount : index;
                this.translateY = conWrap.scrollTop;
                if (this.translateY > (this.itemCount * this.elementHeight) - (this.renderedCount * this.elementHeight)) {
                    this.translateY = (this.itemCount * this.elementHeight - (this.renderedCount * this.elementHeight));
                }
                this.setTranslate(conWrap);
                this.beforeInvoke(index);
            }
        }
        this.parent.setPersistence();
    };
    Agenda.prototype.beforeInvoke = function (index) {
        var _this = this;
        window.clearTimeout(this.timeValue);
        this.timeValue = window.setTimeout(function () { _this.triggerScrolling(index); }, 100);
    };
    Agenda.prototype.triggerScrolling = function (index) {
        this.parent.dotNetRef.invokeMethodAsync('AgendaScroll', index);
    };
    Agenda.prototype.setTranslate = function (conWrap) {
        setStyleAttribute(conWrap.querySelector('table'), { transform: 'translateY(' + this.translateY + 'px)' });
    };
    Agenda.prototype.getEndDateFromStartDate = function (startDate) {
        return util.resetTime(util.addDays(startDate, 1));
    };
    Agenda.prototype.onScrollUiUpdate = function () {
        var headerHeight = this.getHeaderBarHeight();
        var contentArea = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);
        contentArea.style.height = formatUnit(this.parent.element.offsetHeight - headerHeight);
    };
    Agenda.prototype.destroy = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        if (this.element) {
            this.unWireEvents();
            this.element = null;
        }
    };
    return Agenda;
}(ViewBase));
export { Agenda };
