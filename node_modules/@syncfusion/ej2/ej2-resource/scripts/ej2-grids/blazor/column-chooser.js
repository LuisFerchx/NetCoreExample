import { calculateRelativeBasedPosition } from '@syncfusion/ej2-popups';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
var ColumnChooser = (function () {
    function ColumnChooser(parent) {
        this.mediaCol = [];
        this.media = {};
        this.mediaBindInstance = {};
        this.mediaColVisibility = {};
        this.noOfTimesInvokedByMedia = 0;
        this.mediaChange = true;
        this.mediaColumnList = [];
        this.parent = parent;
    }
    ColumnChooser.prototype.renderColumnChooser = function () {
        var dlgelement = this.parent.element.querySelector("#" + this.parent.element.id + "_ccdlg");
        dlgelement.style.maxHeight = '430px';
        var elementVisible = dlgelement.style.display;
        dlgelement.style.display = 'block';
        var newpos = calculateRelativeBasedPosition(this.parent.element.querySelector(".e-cc-toolbar"), dlgelement);
        dlgelement.style.display = elementVisible;
        var top = newpos.top + this.parent.element.querySelector(".e-cc-toolbar").getBoundingClientRect().height;
        var dlgWidth = 250;
        var left;
        if (this.parent.options.enableRtl) {
            left = this.parent.element.querySelector(".e-columnchooser-btn").offsetLeft;
        }
        else {
            left = ((newpos.left - dlgWidth) + this.parent.element.querySelector(".e-cc-toolbar").clientWidth) + 2;
        }
        this.parent.dotNetRef.invokeMethodAsync("GetChooserPosition", left.toString(), top.toString());
    };
    ColumnChooser.prototype.setMediaColumns = function () {
        var gcol = this.parent.getColumns();
        if (!isNullOrUndefined(gcol)) {
            for (var index = 0; index < gcol.length; index++) {
                if (gcol[index].hideAtMedia !== '' && (isNullOrUndefined(gcol[index].visible) || gcol[index].visible)) {
                    this.pushMediaColumn(gcol[index], index);
                }
            }
            this.parent.dotNetRef.invokeMethodAsync('SetMediaColumnVisibility', {
                mediaColVisibility: this.mediaColVisibility
            });
            this.mediaColVisibility = {};
        }
    };
    ColumnChooser.prototype.pushMediaColumn = function (col, index) {
        this.mediaCol.push(col);
        this.media[col.uid] = window.matchMedia(col.hideAtMedia);
        this.mediaQueryUpdate(index, this.media[col.uid], true);
        this.mediaBindInstance[index] = this.mediaQueryUpdate.bind(this, index);
        this.media[col.uid].addListener(this.mediaBindInstance[index]);
    };
    ColumnChooser.prototype.mediaQueryUpdate = function (columnIndex, e, invokedManually) {
        var col = this.parent.getColumns()[columnIndex];
        var columnList = this.parent.getColumns();
        if (this.mediaCol.some(function (mediaColumn) { return mediaColumn.uid === col.uid; })) {
            this.mediaColVisibility[col.uid] = e.matches;
            if (!invokedManually) {
                this.noOfTimesInvokedByMedia++;
                this.mediaChange = this.mediaColumnList.length === 0 ? true : false;
                if (this.mediaChange) {
                    for (var i = 0; i < columnList.length; i++) {
                        if (columnList[i].hideAtMedia.split(" ").slice(-1).toLocaleString() === e.media.split(" ").slice(-1).toLocaleString()) {
                            this.mediaColumnList.push(columnList[i]);
                        }
                    }
                }
                if ((this.mediaColumnList.length > 0 && this.noOfTimesInvokedByMedia === this.mediaColumnList.length)
                    || (this.mediaCol.length > 0 && this.mediaColumnList.length === 0)) {
                    this.parent.dotNetRef.invokeMethodAsync('SetMediaColumnVisibility', {
                        mediaColVisibility: this.mediaColVisibility,
                        invokedByMedia: true
                    });
                    this.noOfTimesInvokedByMedia = 0;
                    this.mediaColVisibility = {};
                    this.mediaColumnList = [];
                }
            }
        }
    };
    ColumnChooser.prototype.updateMediaColumns = function (mediaColumnsUid) {
        var keys = Object.keys(mediaColumnsUid);
        var _loop_1 = function (i) {
            var idxToSplice = -1;
            if (this_1.mediaCol.some(function (mCol) {
                idxToSplice++;
                return mCol.uid === keys[i];
            })) {
                this_1.mediaCol.splice(idxToSplice, 1);
            }
            else {
                this_1.pushMediaColumn(this_1.parent.getColumnByUid(keys[i]), this_1.parent.getColumnIndexByUid(keys[i]));
            }
        };
        var this_1 = this;
        for (var i = 0; i < keys.length; i++) {
            _loop_1(i);
        }
    };
    ColumnChooser.prototype.removeMediaListener = function () {
        for (var i = 0; i < this.mediaCol.length; i++) {
            this.media[this.mediaCol[i].uid].removeListener(this.mediaBindInstance[this.mediaCol[i].index]);
        }
    };
    return ColumnChooser;
}());
export { ColumnChooser };
