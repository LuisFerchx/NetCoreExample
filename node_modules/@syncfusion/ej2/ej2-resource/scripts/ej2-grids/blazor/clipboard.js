import { Browser, isUndefined, createElement, closest, classList } from '@syncfusion/ej2-base';
var Clipboard = (function () {
    function Clipboard(parent) {
        this.copyContent = '';
        this.isSelect = false;
        this.parent = parent;
        this.clipBoardTextArea = createElement('textarea', {
            className: 'e-clipboard',
            styles: 'opacity: 0',
            attrs: { tabindex: '-1', 'aria-label': 'clipboard', 'aria-hidden': 'true' }
        });
        this.parent.element.appendChild(this.clipBoardTextArea);
    }
    Clipboard.prototype.pasteHandler = function () {
        var _this = this;
        var grid = this.parent;
        var target = closest(document.activeElement, '.e-rowcell');
        if (!target || !grid.options.allowEditing || grid.options.editMode !== 'Batch' ||
            grid.options.selectionMode !== 'Cell' || grid.options.cellSelectionMode === 'Flow') {
            return;
        }
        this.activeElement = document.activeElement;
        this.clipBoardTextArea.value = '';
        var x = window.scrollX;
        var y = window.scrollY;
        this.clipBoardTextArea.focus();
        setTimeout(function () {
            _this.activeElement.focus();
            window.scrollTo(x, y);
            _this.paste(_this.clipBoardTextArea.value, _this.getSelectedRowCellIndexes()[0].rowIndex, _this.getSelectedRowCellIndexes()[0].cellIndexes[0]);
        }, 10);
    };
    Clipboard.prototype.paste = function (data, rowIndex, colIndex) {
        var grid = this.parent;
        var cIdx = colIndex;
        var rIdx = rowIndex;
        var col;
        var value;
        var isAvail;
        if (!grid.options.allowEditing || grid.options.editMode !== 'Batch' ||
            grid.options.selectionMode !== 'Cell' || grid.options.cellSelectionMode === 'Flow') {
            return;
        }
        var rows = data.split('\n');
        var cols;
        var dataRows = grid.getDataRows();
        var mRows;
        var isFrozen = this.parent.options.frozenColumns;
        if (isFrozen) {
            mRows = grid.getMovableDataRows();
        }
        for (var r = 0; r < rows.length; r++) {
            cols = rows[r].split('\t');
            cIdx = colIndex;
            if ((r === rows.length - 1 && rows[r] === '') || isUndefined(grid.getRowByIndex(rIdx))) {
                cIdx++;
                break;
            }
            for (var c = 0; c < cols.length; c++) {
                isAvail = grid.getCellFromIndex(rIdx, cIdx);
                if (isFrozen) {
                    var fTr = dataRows[rIdx];
                    var mTr = mRows[rIdx];
                    isAvail = !fTr.querySelector('[aria-colindex="' + cIdx + '"]') ?
                        mTr.querySelector('[aria-colindex="' + cIdx + '"]') : true;
                }
                if (!isAvail) {
                    cIdx++;
                    break;
                }
                col = grid.getColumnByIndex(cIdx);
                value = cols[c];
                if (col.allowEditing && !col.isPrimaryKey && !col.template) {
                    if (grid.editModule) {
                        {
                            grid.dotNetRef.invokeMethodAsync("UpdateCell", rIdx, col.field, value);
                        }
                    }
                }
                cIdx++;
            }
            rIdx++;
        }
        var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);
        if (cell) {
            classList(cell, ['e-focus', 'e-focused'], []);
        }
    };
    Clipboard.prototype.setCopyData = function (withHeader) {
        if (window.getSelection().toString() === '') {
            var isFrozen = this.parent.options.frozenColumns;
            this.clipBoardTextArea.value = this.copyContent = '';
            var mRows = void 0;
            var rows = this.parent.getRows();
            if (isFrozen) {
                mRows = this.parent.getMovableDataRows();
            }
            if (this.parent.options.selectionMode !== 'Cell') {
                var selectedIndexes = this.parent.getSelectedRowIndexes();
                if (withHeader) {
                    var headerTextArray = [];
                    for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {
                        headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;
                    }
                    this.getCopyData(headerTextArray, false, '\t', withHeader);
                    this.copyContent += '\n';
                }
                for (var i = 0; i < selectedIndexes.length; i++) {
                    if (i > 0) {
                        this.copyContent += '\n';
                    }
                    var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell'));
                    if (isFrozen) {
                        cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell')));
                    }
                    this.getCopyData(cells, false, '\t', withHeader);
                }
            }
            else {
                var obj = this.checkBoxSelection();
                if (obj.status) {
                    if (withHeader) {
                        var headers = [];
                        for (var i = 0; i < obj.colIndexes.length; i++) {
                            headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));
                        }
                        this.getCopyData(headers, false, '\t', withHeader);
                        this.copyContent += '\n';
                    }
                    for (var i = 0; i < obj.rowIndexes.length; i++) {
                        if (i > 0) {
                            this.copyContent += '\n';
                        }
                        var cells = [].slice.call(rows[obj.rowIndexes[i]].
                            querySelectorAll('.e-cellselectionbackground'));
                        if (isFrozen) {
                            cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]].querySelectorAll('.e-cellselectionbackground')));
                        }
                        this.getCopyData(cells, false, '\t', withHeader);
                    }
                }
                else {
                    this.getCopyData([].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground')), true, '\n', withHeader);
                }
            }
            this.clipBoardTextArea.value = this.copyContent;
            if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {
                this.clipBoardTextArea.select();
            }
            else {
                this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);
            }
            this.isSelect = true;
        }
    };
    Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {
        var isElement = typeof cells[0] !== 'string';
        for (var j = 0; j < cells.length; j++) {
            if (withHeader && isCell) {
                this.copyContent += this.parent.getColumns()[parseInt(cells[j].getAttribute('aria-colindex'), 10)].headerText + '\n';
            }
            if (isElement) {
                if (!cells[j].classList.contains('e-hide')) {
                    if ((!cells[j].classList.contains('e-gridchkbox')) &&
                        Object.keys(cells[j].querySelectorAll('.e-check')).length) {
                        this.copyContent += true;
                    }
                    else if ((!cells[j].classList.contains('e-gridchkbox')) &&
                        Object.keys(cells[j].querySelectorAll('.e-uncheck')).length) {
                        this.copyContent += false;
                    }
                    else {
                        this.copyContent += cells[j].innerText;
                    }
                }
            }
            else {
                this.copyContent += cells[j];
            }
            if (j < cells.length - 1) {
                this.copyContent += splitKey;
            }
        }
    };
    Clipboard.prototype.copy = function (withHeader) {
        if (document.queryCommandSupported('copy')) {
            var clipboardFocus = document.activeElement;
            this.setCopyData(withHeader);
            document.execCommand('copy');
            this.clipBoardTextArea.blur();
            clipboardFocus.focus();
        }
        if (this.isSelect) {
            window.getSelection().removeAllRanges();
            this.isSelect = false;
        }
    };
    Clipboard.prototype.getSelectedRowCellIndexes = function () {
        var gridObj = this.parent;
        var rowCellIndxes = [];
        var rows = gridObj.getRows();
        var mrows;
        if (gridObj.options.frozenColumns) {
            mrows = gridObj.getMovableDataRows();
        }
        var _loop_1 = function (i) {
            var tempCells = rows[i].querySelectorAll('.e-cellselectionbackground');
            if (gridObj.options.frozenColumns && !tempCells.length) {
                tempCells = mrows[i].querySelectorAll('.e-cellselectionbackground');
            }
            if (tempCells.length) {
                var cellIndexes_1 = [];
                tempCells.forEach(function (element) {
                    cellIndexes_1.push(parseInt(element.getAttribute('aria-colindex')));
                });
                rowCellIndxes.push({ rowIndex: i, cellIndexes: cellIndexes_1 });
            }
        };
        for (var i = 0; i < rows.length; i++) {
            _loop_1(i);
        }
        return rowCellIndxes;
    };
    Clipboard.prototype.checkBoxSelection = function () {
        var gridObj = this.parent;
        var rowCellIndxes;
        var obj = { status: false };
        if (gridObj.options.selectionMode === 'Cell') {
            rowCellIndxes = this.getSelectedRowCellIndexes();
            var str = void 0;
            var isBox = void 0;
            var rowIndexes = [];
            var i = void 0;
            for (i = 0; i < rowCellIndxes.length; i++) {
                if (rowCellIndxes[i].cellIndexes.length) {
                    rowIndexes.push(rowCellIndxes[i].rowIndex);
                }
                if (rowCellIndxes[i].cellIndexes.length) {
                    if (!str) {
                        str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());
                    }
                    if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {
                        break;
                    }
                }
            }
            rowIndexes.sort(function (a, b) { return a - b; });
            if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {
                obj = { status: true, rowIndexes: rowIndexes, colIndexes: rowCellIndxes[0].cellIndexes };
            }
        }
        return obj;
    };
    return Clipboard;
}());
export { Clipboard };
