import { calculatePosition } from '@syncfusion/ej2-popups';
import { closest, Browser, EventHandler, isNullOrUndefined } from '@syncfusion/ej2-base';
var ColumnMenu = (function () {
    function ColumnMenu(parent) {
        this.key = null;
        this.uid = null;
        this.parent = parent;
    }
    ColumnMenu.prototype.renderColumnMenu = function (uid, isFilter, key) {
        this.key = key;
        this.uid = uid;
        var e = this.parent.getColumnHeaderByUid(uid).querySelector('.e-columnmenu');
        var columnMenuElement = document.getElementsByClassName("e-" + this.parent.element.id + "-column-menu")[0];
        columnMenuElement.style.position = 'absolute';
        var element = columnMenuElement.getElementsByTagName('ul')[0];
        if (!isNullOrUndefined(element)) {
            var pos = { top: 0, left: 0 };
            element.style.visibility = 'hidden';
            columnMenuElement.style.display = 'block';
            var elePos = element.getBoundingClientRect();
            element.classList.add('e-transparent');
            element.style.visibility = '';
            columnMenuElement.style.display = '';
            var headerCell = this.getHeaderCell(e);
            if (Browser.isDevice) {
                pos.top = ((window.innerHeight / 2) - (elePos.height / 2));
                pos.left = ((window.innerWidth / 2) - (elePos.width / 2));
            }
            else {
                if (this.parent.options.enableRtl) {
                    pos = calculatePosition(headerCell, 'left', 'bottom');
                }
                else {
                    pos = calculatePosition(headerCell, 'right', 'bottom');
                    pos.left -= elePos.width;
                }
            }
            if (isFilter) {
                EventHandler.add(element, 'mouseover', this.appendFilter, this);
            }
            return { Left: Math.ceil(pos.left), Top: Math.ceil(pos.top) };
        }
        else {
            return { Left: 1, Top: 1 };
        }
    };
    ;
    ColumnMenu.prototype.setPosition = function () {
        var columnMenuElement = document.getElementsByClassName("e-" + this.parent.element.id + "-column-menu")[0];
        var element = !isNullOrUndefined(columnMenuElement) ? columnMenuElement.getElementsByTagName('ul')[0] : null;
        if (!isNullOrUndefined(element) && !isNullOrUndefined(this.uid)) {
            var e = this.parent.getColumnHeaderByUid(this.uid).querySelector('.e-columnmenu');
            var headerCell = this.getHeaderCell(e);
            var btnOffset = headerCell.getBoundingClientRect();
            var left = btnOffset.left + pageXOffset;
            var top_1 = btnOffset.bottom + pageYOffset;
            var popupOffset = element.getBoundingClientRect();
            var docElement = document.documentElement;
            if (btnOffset.bottom + popupOffset.height > docElement.clientHeight) {
                if (top_1 - btnOffset.height - popupOffset.height > docElement.clientTop) {
                    top_1 = top_1 - btnOffset.height - popupOffset.height;
                }
            }
            if (btnOffset.left + popupOffset.width > docElement.clientWidth) {
                if (btnOffset.right - popupOffset.width > docElement.clientLeft) {
                    left = (left + btnOffset.width) - popupOffset.width;
                }
            }
            left = left - element.getBoundingClientRect().width + btnOffset.width;
            columnMenuElement.style.left = Math.ceil(left + 1) + 'px';
            columnMenuElement.style.top = Math.ceil(top_1 + 1) + 'px';
        }
    };
    ColumnMenu.prototype.appendFilter = function (e) {
        var _this = this;
        var showdialog = false;
        setTimeout(function () {
            if ((closest(e.target, '#' + _this.key)) && (_this.parent.element.querySelector('.e-filter-popup') || !_this.parent.element.querySelector('.e-filter-popup'))
                || e.target.parentElement.id == _this.key && (_this.parent.element.querySelector('.e-filter-popup') || !_this.parent.element.querySelector('.e-filter-popup'))) {
                showdialog = true;
            }
            else if (!closest(e.target, '#' + _this.key) && _this.parent.element.querySelector('.e-filter-popup')) {
                showdialog = false;
            }
            _this.parent.dotNetRef.invokeMethodAsync("FilterMouseOverHandler", _this.uid, showdialog);
        }, 10);
    };
    ColumnMenu.prototype.getHeaderCell = function (e) {
        return closest(e, 'th.e-headercell');
    };
    return ColumnMenu;
}());
export { ColumnMenu };
