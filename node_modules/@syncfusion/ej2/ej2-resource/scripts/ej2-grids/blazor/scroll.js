import { Browser, EventHandler } from '@syncfusion/ej2-base';
import { addClass } from '@syncfusion/ej2-base';
import { formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';
import { getScrollBarWidth, getUpdateUsingRaf, getSiblingsHeight } from './util';
var Scroll = (function () {
    function Scroll(parent) {
        this.previousValues = { top: 0, left: 0 };
        this.oneTimeReady = true;
        this.parent = parent;
        this.addEventListener();
        this.setHeight();
        this.setPadding();
    }
    Scroll.prototype.setHeight = function () {
        var mHdrHeight = 0;
        var content = this.parent.element.querySelector('.e-content');
        if (this.parent.options.frozenRows && this.parent.options.height !== 'auto') {
            var tbody = this.parent.element.querySelector('.e-headercontent').querySelector('tbody');
            mHdrHeight = tbody ? tbody.offsetHeight : 0;
            content.style.height = formatUnit((parseInt(this.parent.options.height) - mHdrHeight));
        }
    };
    Scroll.prototype.setPadding = function () {
        if (this.parent.options.height == "auto") {
            return;
        }
        var content = this.parent.element.querySelector('.e-gridheader');
        var scrollWidth = Scroll.getScrollBarWidth() - this.getThreshold();
        var cssProps = this.getCssProperties();
        content.style[cssProps.padding] = scrollWidth > 0 ? scrollWidth + 'px' : '0px';
        content.querySelector('.e-headercontent').style[cssProps.border] = scrollWidth > 0 ? '1px' : '0px';
        var footer = this.parent.element.querySelector('.e-gridfooter');
        if (footer) {
            var footerContent = footer.querySelector('.e-summarycontent');
            footerContent.style[cssProps.border] = scrollWidth > 0 ? '1px' : '0px';
            footer.style[cssProps.padding] = scrollWidth > 0 ? scrollWidth + 'px' : '0px';
        }
    };
    Scroll.prototype.removePadding = function (rtl) {
        var cssProps = this.getCssProperties(rtl);
        var hDiv = this.parent.getHeaderContent().querySelector('.e-headercontent');
        hDiv.style[cssProps.border] = '';
        hDiv.parentElement.style[cssProps.padding] = '';
        var footerDiv = this.parent.getFooterContent();
    };
    Scroll.prototype.refresh = function () {
        if (this.parent.options.height !== '100%') {
            return;
        }
        var content = this.parent.element.querySelector(".e-gridcontent");
        var height = getSiblingsHeight(content);
        content.style.height = 'calc(100% - ' + height + 'px)';
    };
    Scroll.prototype.getThreshold = function () {
        var appName = Browser.info.name;
        if (appName === 'mozilla') {
            return 0.5;
        }
        return 1;
    };
    Scroll.prototype.addEventListener = function () {
        this.wireEvents();
    };
    Scroll.prototype.onContentScroll = function (scrollTarget) {
        var _this = this;
        var element = scrollTarget;
        var isHeader = element.classList.contains('e-headercontent');
        return function (e) {
            if (_this.content.querySelector('tbody') === null) {
                return;
            }
            var target = e.target;
            var left = target.scrollLeft;
            var sLimit = target.scrollWidth;
            var isFooter = target.classList.contains('e-summarycontent');
            if (_this.previousValues.left === left) {
                _this.previousValues.top = !isHeader ? _this.previousValues.top : target.scrollTop;
                return;
            }
            element.scrollLeft = left;
            var footer = _this.parent.options.frozenColumns != 0 ? _this.parent.element.querySelector('.e-movablefootercontent') :
                _this.parent.element.querySelector('.e-summarycontent');
            if (footer) {
                footer.scrollLeft = left;
            }
            if (isFooter) {
                _this.header.scrollLeft = left;
            }
            _this.previousValues.left = left;
        };
    };
    Scroll.prototype.onFreezeContentScroll = function (scrollTarget) {
        var _this = this;
        var element = scrollTarget;
        return function (e) {
            if (_this.content.querySelector('tbody') === null) {
                return;
            }
            var target = e.target;
            var top = target.scrollTop;
            if (_this.previousValues.top === top) {
                return;
            }
            element.scrollTop = top;
            _this.previousValues.top = top;
        };
    };
    Scroll.prototype.onWheelScroll = function (scrollTarget) {
        var _this = this;
        var element = scrollTarget;
        return function (e) {
            if (_this.content.querySelector('tbody') === null) {
                return;
            }
            var top = element.scrollTop + (e.deltaMode === 1 ? e.deltaY * 30 : e.deltaY);
            if (_this.previousValues.top === top) {
                return;
            }
            e.preventDefault();
            _this.parent.getContent().querySelector('.e-frozencontent').scrollTop = top;
            element.scrollTop = top;
            _this.previousValues.top = top;
        };
    };
    Scroll.prototype.onTouchScroll = function (scrollTarget) {
        var _this = this;
        var element = scrollTarget;
        return function (e) {
            if (e.pointerType === 'mouse') {
                return;
            }
            var cont;
            var mHdr;
            var pageXY = _this.getPointXY(e);
            var top = element.scrollTop + (_this.pageXY.y - pageXY.y);
            var left = element.scrollLeft + (_this.pageXY.x - pageXY.x);
            if (_this.parent.getHeaderContent().contains(e.target)) {
                mHdr = _this.parent.options.frozenColumns ?
                    _this.parent.getHeaderContent().querySelector('.e-movableheader') :
                    _this.parent.getHeaderContent().querySelector('.e-headercontent');
                if (_this.previousValues.left === left || (left < 0 || (mHdr.scrollWidth - mHdr.clientWidth) < left)) {
                    return;
                }
                e.preventDefault();
                mHdr.scrollLeft = left;
                element.scrollLeft = left;
                _this.pageXY.x = pageXY.x;
                _this.previousValues.left = left;
            }
            else {
                cont = _this.parent.getContent().querySelector('.e-frozencontent');
                if (_this.previousValues.top === top && (top < 0 || (cont.scrollHeight - cont.clientHeight) < top)
                    || (top < 0 || (cont.scrollHeight - cont.clientHeight) < top)) {
                    return;
                }
                e.preventDefault();
                cont.scrollTop = top;
                element.scrollTop = top;
                _this.pageXY.y = pageXY.y;
                _this.previousValues.top = top;
            }
        };
    };
    Scroll.prototype.setPageXY = function () {
        var _this = this;
        return function (e) {
            if (e.pointerType === 'mouse') {
                return;
            }
            _this.pageXY = _this.getPointXY(e);
        };
    };
    Scroll.prototype.getPointXY = function (e) {
        var pageXY = { x: 0, y: 0 };
        if (e.touches && e.touches.length) {
            pageXY.x = e.touches[0].pageX;
            pageXY.y = e.touches[0].pageY;
        }
        else {
            pageXY.x = e.pageX;
            pageXY.y = e.pageY;
        }
        return pageXY;
    };
    Scroll.prototype.wireEvents = function () {
        var _this = this;
        if (this.oneTimeReady) {
            var frzCols = this.parent.options.frozenColumns;
            this.content = this.parent.getContent();
            this.header = this.parent.getHeaderContent();
            var mCont = this.content.querySelector('.e-movablecontent');
            var fCont = this.content.querySelector('.e-frozencontent');
            var mHdr = this.header.querySelector('.e-movableheader');
            if (this.parent.options.frozenColumns) {
                EventHandler.add(frzCols ? mHdr : this.header, 'touchstart pointerdown', this.setPageXY(), this);
                EventHandler.add(frzCols ? mHdr : this.header, 'touchmove pointermove', this.onTouchScroll(frzCols ? mCont : this.content), this);
            }
            if (frzCols) {
                EventHandler.add(mCont, 'scroll', this.onContentScroll(mHdr), this);
                EventHandler.add(mCont, 'scroll', this.onFreezeContentScroll(fCont), this);
                EventHandler.add(fCont, 'scroll', this.onFreezeContentScroll(mCont), this);
                EventHandler.add(mHdr, 'scroll', this.onContentScroll(mCont), this);
                EventHandler.add(fCont, 'wheel', this.onWheelScroll(mCont), this);
                EventHandler.add(fCont, 'touchstart pointerdown', this.setPageXY(), this);
                EventHandler.add(fCont, 'touchmove pointermove', this.onTouchScroll(mCont), this);
            }
            else {
                EventHandler.add(this.content, 'scroll', this.onContentScroll(this.header), this);
                EventHandler.add(this.header, 'scroll', this.onContentScroll(this.content), this);
            }
            if (this.parent.options.aggregatesCount) {
                var footer = this.parent.options.frozenColumns ? this.parent.element.querySelector('.e-movablefootercontent') :
                    this.parent.element.querySelector('.e-summarycontent');
                if (!isNullOrUndefined(footer)) {
                    EventHandler.add(footer, 'scroll', this.onContentScroll(this.content), this);
                }
            }
            this.refresh();
            this.oneTimeReady = false;
        }
        var table = this.parent.getContent().querySelector(".e-table");
        var sLeft;
        var sHeight;
        var clientHeight;
        getUpdateUsingRaf(function () {
            sLeft = _this.header.scrollLeft;
            sHeight = table.scrollHeight;
            clientHeight = _this.parent.getContent().clientHeight;
        }, function () {
            if (!_this.parent.options.enableVirtualization) {
                if (sHeight < clientHeight) {
                    addClass(table.querySelectorAll('tr:last-child td'), 'e-lastrowcell');
                    if (_this.parent.options.frozenColumns) {
                        addClass(_this.parent.getContent().querySelector('.e-movablecontent').querySelectorAll('tr:last-child td'), 'e-lastrowcell');
                    }
                }
                if ((_this.parent.options.frozenColumns > 0 || _this.parent.options.frozenColumns > 0) && _this.header.querySelector('.e-movableheader')) {
                    _this.header.querySelector('.e-movableheader').scrollLeft = _this.previousValues.left;
                }
                else {
                    _this.header.scrollLeft = _this.previousValues.left;
                }
                _this.content.scrollLeft = _this.previousValues.left;
                _this.content.scrollTop = _this.previousValues.top;
            }
            if (!_this.parent.options.enableColumnVirtualization) {
                _this.content.scrollLeft = sLeft;
            }
            if (_this.parent.options.frozenColumns && _this.header.querySelector('.e-movableheader')) {
                _this.header.querySelector('.e-movableheader').scrollLeft =
                    _this.content.querySelector('.e-movablecontent').scrollLeft;
            }
        });
    };
    Scroll.prototype.getCssProperties = function (rtl) {
        var css = {};
        var enableRtl = isNullOrUndefined(rtl) ? this.parent.options.enableRtl : rtl;
        css.border = enableRtl ? 'borderLeftWidth' : 'borderRightWidth';
        css.padding = enableRtl ? 'paddingLeft' : 'paddingRight';
        return css;
    };
    Scroll.prototype.destroy = function () {
        var gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent'))) {
            return;
        }
        this.removePadding();
        EventHandler.remove(this.parent.getContent(), 'scroll', this.onContentScroll);
    };
    Scroll.getScrollBarWidth = function () {
        return getScrollBarWidth();
    };
    return Scroll;
}());
export { Scroll };
