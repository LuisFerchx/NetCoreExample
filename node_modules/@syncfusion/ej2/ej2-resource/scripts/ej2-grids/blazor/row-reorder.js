import { Droppable, removeClass, Draggable, createElement } from '@syncfusion/ej2-base';
import { remove, closest as closestElement, classList } from '@syncfusion/ej2-base';
import { parentsUntil, isActionPrevent, getPosition, getScrollBarWidth, removeElement, addRemoveActiveClasses } from './util';
var RowDD = (function () {
    function RowDD(parent) {
        var _this = this;
        this.isOverflowBorder = true;
        this.helper = function (e) {
            var gObj = _this.parent;
            var target = _this.draggable.currentStateTarget;
            e.sender.target.blur();
            var visualElement = createElement('div', {
                className: 'e-cloneproperties e-draganddrop e-grid e-dragclone',
                styles: 'height:"auto", z-index:2, width:' + gObj.element.offsetWidth
            });
            var table = createElement('table', { styles: 'width:' + gObj.element.offsetWidth });
            var tbody = createElement('tbody');
            if (document.getElementsByClassName('e-griddragarea').length ||
                (gObj.options.rowDropTarget && (!e.sender.target.classList.contains('e-selectionbackground')
                    && gObj.options.selectionType !== 'Single')) ||
                (!gObj.options.rowDropTarget && !parentsUntil(e.sender.target, 'e-rowdragdrop'))) {
                return false;
            }
            if (gObj.options.rowDropTarget &&
                gObj.options.selectionMode === 'Row' && gObj.options.selectionType === 'Single') {
                gObj.dotNetRef.invokeMethodAsync("SelectRow", parseInt(_this.draggable.currentStateTarget.parentElement.getAttribute('aria-rowindex'), 10));
            }
            _this.startedRow = closestElement(target, 'tr').cloneNode(true);
            var selectedRows = gObj.getSelectedRows();
            removeElement(_this.startedRow, '.e-indentcell');
            removeElement(_this.startedRow, '.e-detailrowcollapse');
            removeElement(_this.startedRow, '.e-detailrowexpand');
            _this.removeCell(_this.startedRow, 'e-gridchkbox');
            var exp = new RegExp('e-active', 'g');
            _this.startedRow.innerHTML = _this.startedRow.innerHTML.replace(exp, '');
            tbody.appendChild(_this.startedRow);
            if (gObj.getSelectedRows().length > 1 && _this.startedRow.hasAttribute('aria-selected')) {
                var dropCountEle = createElement('span', {
                    className: 'e-dropitemscount', innerHTML: '' + selectedRows.length,
                });
                visualElement.appendChild(dropCountEle);
            }
            var ele = closestElement(target, 'tr').querySelector('.e-icon-rowdragicon');
            if (ele) {
                ele.classList.add('e-dragstartrow');
            }
            table.appendChild(tbody);
            visualElement.appendChild(table);
            gObj.element.appendChild(visualElement);
            return visualElement;
        };
        this.dragStart = function (e) {
            var gObj = _this.parent;
            document.body.classList.add('e-prevent-select');
            if (document.getElementsByClassName('e-griddragarea').length) {
                return;
            }
            var spanCssEle = _this.parent.element.querySelector('.e-dropitemscount');
            if (_this.parent.getSelectedRows().length > 1 && spanCssEle) {
                spanCssEle.style.left = _this.parent.element.querySelector('.e-cloneproperties table')
                    .offsetWidth - 5 + 'px';
            }
            var fromIdx = parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);
            _this.parent.dotNetRef.invokeMethodAsync("RowDragStartEvent", fromIdx);
            e.bindEvents(e.dragElement);
            _this.dragStartData = _this.rowData;
            var dropElem = document.getElementById(gObj.options.rowDropTarget);
            if (gObj.options.rowDropTarget && dropElem && dropElem.blazor__instance &&
                (typeof dropElem.blazor__instance.getModuleName === 'function') &&
                dropElem.blazor__instance.getModuleName() === 'grid') {
                dropElem.blazor__instance.getContent().classList.add('e-allowRowDrop');
            }
        };
        this.drag = function (e) {
            var gObj = _this.parent;
            var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');
            var target = _this.getElementFromPosition(cloneElement, e.event);
            classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur', 'e-movecur']);
            _this.isOverflowBorder = true;
            var trElement = parentsUntil(target, 'e-grid') ? closestElement(e.target, 'tr') : null;
            if (!e.target) {
                return;
            }
            _this.stopTimer();
            gObj.element.classList.add('e-rowdrag');
            _this.dragTarget = trElement && parentsUntil(target, 'e-grid').id === cloneElement.parentElement.id ?
                trElement.rowIndex : parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);
            if (gObj.options.rowDropTarget) {
                if (parentsUntil(target, 'e-gridcontent')) {
                    if (parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(target, 'e-grid').id) {
                        classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
                    }
                    else {
                        classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
                    }
                }
                else if (parentsUntil(target, 'e-droppable')) {
                    classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
                }
                else {
                    classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
                }
            }
            else {
                var elem = parentsUntil(target, 'e-grid');
                if (elem && elem.id === cloneElement.parentElement.id) {
                    classList(cloneElement, ['e-movecur'], ['e-defaultcur']);
                }
                else {
                    classList(cloneElement, ['e-notallowedcur'], ['e-movecur']);
                }
            }
            if (!gObj.options.rowDropTarget &&
                (!gObj.options.groupCount || e.target.classList.contains('e-selectionbackground'))) {
                if (parentsUntil(target, 'e-grid')) {
                    _this.updateScrollPostion(e.event, target);
                }
                if (_this.isOverflowBorder && parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10) !== _this.dragTarget) {
                    _this.moveDragRows(e, _this.startedRow, trElement);
                }
                else {
                    if (trElement && _this.parent.getRowByIndex(_this.parent.getRows().length - 1).getAttribute('data-uid') ===
                        trElement.getAttribute('data-uid')) {
                        var bottomborder = createElement('div', { className: 'e-lastrow-dragborder' });
                        var gridcontentEle = _this.parent.getContent();
                        bottomborder.style.width = _this.parent.element.offsetWidth - _this.getScrollWidth() + 'px';
                        if (!gridcontentEle.querySelectorAll('.e-lastrow-dragborder').length) {
                            gridcontentEle.classList.add('e-grid-relative');
                            gridcontentEle.appendChild(bottomborder);
                            bottomborder.style.bottom = _this.getScrollWidth() + 'px';
                        }
                    }
                    _this.removeBorder(trElement);
                }
            }
        };
        this.dragStop = function (e) {
            document.body.classList.remove('e-prevent-select');
            if (isActionPrevent(_this.parent.element)) {
                return;
            }
            else {
                _this.processDragStop(e);
            }
        };
        this.processDragStop = function (e) {
            var gObj = _this.parent;
            var targetEle = _this.getElementFromPosition(e.helper, e.event);
            var target = targetEle && !targetEle.classList.contains('e-dlg-overlay') ?
                targetEle : e.target;
            gObj.element.classList.remove('e-rowdrag');
            var dropElement = document.getElementById(gObj.options.rowDropTarget);
            if (_this.parent.options.allowRowDragAndDrop && _this.parent.options.rowDropTarget && !parentsUntil(target, 'e-grid')) {
                var toIdx = 0;
                var targetClass = target.classList.value;
                var targetID = target.id;
                var fromIdx = parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);
                gObj.dotNetRef.invokeMethodAsync("ReorderRows", fromIdx, toIdx, 'add', false, targetClass, targetID, null, true);
            }
            if (gObj.options.rowDropTarget && dropElement && dropElement.blazor__instance &&
                (typeof dropElement.blazor__instance.getModuleName === 'function') &&
                dropElement.blazor__instance.getModuleName() === 'grid') {
                dropElement.blazor__instance.getContent().classList.remove('e-allowRowDrop');
            }
            if (!parentsUntil(target, 'e-gridcontent')) {
                _this.dragTarget = null;
                remove(e.helper);
                return;
            }
            if (_this.parent.options.allowRowDragAndDrop && !_this.parent.options.rowDropTarget) {
                _this.stopTimer();
                _this.parent.getContent().classList.remove('e-grid-relative');
                _this.removeBorder(targetEle);
                var stRow = gObj.element.querySelector('.e-dragstartrow');
                if (stRow) {
                    stRow.classList.remove('e-dragstartrow');
                }
                var toIdx_1 = _this.dragTarget;
                var targetClass_1 = target.classList.value;
                var targetID_1 = target.id;
                var fromIdx_1 = parseInt(_this.startedRow.getAttribute('aria-rowindex'), 10);
                setTimeout(function () {
                    gObj.dotNetRef.invokeMethodAsync("ReorderRows", fromIdx_1, toIdx_1, 'delete', true, targetClass_1, targetID_1, null, false);
                }, 10);
                _this.dragTarget = null;
            }
        };
        this.removeCell = function (targetRow, className) {
            return [].slice.call(targetRow.querySelectorAll('td')).filter(function (cell) {
                if (cell.classList.contains(className)) {
                    targetRow.deleteCell(cell.cellIndex);
                }
            });
        };
        this.drop = function (e) {
            _this.columnDrop({ target: e.target, droppedElement: e.droppedElement });
            remove(e.droppedElement);
        };
        this.parent = parent;
        if (this.parent.options.allowRowDragAndDrop) {
            this.initializeDrag();
        }
    }
    RowDD.prototype.stopTimer = function () {
        window.clearInterval(this.timer);
    };
    RowDD.prototype.initializeDrag = function () {
        var gObj = this.parent;
        this.draggable = new Draggable(gObj.getContent(), {
            dragTarget: '.e-rowcelldrag, .e-rowdragdrop, .e-rowcell',
            distance: 5,
            helper: this.helper,
            dragStart: this.dragStart,
            drag: this.drag,
            dragStop: this.dragStop,
            isPreventSelect: false
        });
        this.droppable = new Droppable(gObj.getContent(), {
            accept: '.e-dragclone',
            drop: this.drop
        });
    };
    RowDD.prototype.updateScrollPostion = function (e, target) {
        var _this = this;
        var frzCols = this.parent.options.frozenColumns;
        var y = getPosition(e).y;
        var cliRect = this.parent.getContent().getBoundingClientRect();
        var rowHeight = this.parent.getRowHeight() - 15;
        var scrollElem = frzCols ? this.parent.getContent().querySelector('.e-movablecontent')
            : this.parent.getContent().firstElementChild;
        if (cliRect.top + rowHeight >= y) {
            var scrollPixel_1 = -(this.parent.getRowHeight());
            this.isOverflowBorder = false;
            this.timer = window.setInterval(function () { _this.setScrollDown(scrollElem, scrollPixel_1, true); }, 200);
        }
        else if (cliRect.top + this.parent.getContent().clientHeight - rowHeight - 20 <= y) {
            var scrollPixel_2 = (this.parent.getRowHeight());
            this.isOverflowBorder = false;
            this.timer = window.setInterval(function () { _this.setScrollDown(scrollElem, scrollPixel_2, true); }, 200);
        }
    };
    RowDD.prototype.setScrollDown = function (scrollElem, scrollPixel, isLeft) {
        scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
    };
    RowDD.prototype.moveDragRows = function (e, startedRow, targetRow) {
        var cloneElement = this.parent.element.querySelector('.e-cloneproperties');
        var element = closestElement(e.target, 'tr');
        if (parentsUntil(element, 'e-gridcontent') && parentsUntil(cloneElement.parentElement, 'e-grid').id ===
            parentsUntil(element, 'e-grid').id) {
            var targetElement = element ?
                element : this.startedRow;
            this.setBorder(targetElement, e.event, startedRow, targetRow);
        }
    };
    RowDD.prototype.setBorder = function (element, event, startedRow, targetRow) {
        var node = this.parent.element;
        var cloneElement = this.parent.element.querySelector('.e-cloneproperties');
        this.removeFirstRowBorder(element);
        this.removeLastRowBorder(element);
        if (parentsUntil(element, 'e-gridcontent') && parentsUntil(cloneElement.parentElement, 'e-grid').id ===
            parentsUntil(element, 'e-grid').id) {
            removeClass(node.querySelectorAll('.e-rowcell,.e-rowdragdrop'), ['e-dragborder']);
            var rowElement = [];
            if (targetRow && targetRow.rowIndex === 0) {
                var div = createElement('div', { className: 'e-firstrow-dragborder' });
                var gridheaderEle = this.parent.getHeaderContent();
                gridheaderEle.classList.add('e-grid-relative');
                div.style.width = node.offsetWidth - this.getScrollWidth() + 'px';
                if (!gridheaderEle.querySelectorAll('.e-firstrow-dragborder').length) {
                    gridheaderEle.appendChild(div);
                }
            }
            else if (targetRow && parseInt(startedRow.getAttribute('aria-rowindex'), 10) > targetRow.rowIndex) {
                element = this.parent.getRowByIndex(targetRow.rowIndex - 1);
                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
            }
            else {
                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
            }
            if (rowElement.length > 0) {
                addRemoveActiveClasses(rowElement, true, 'e-dragborder');
            }
        }
    };
    RowDD.prototype.getScrollWidth = function () {
        var scrollElem = this.parent.getContent().firstElementChild;
        return scrollElem.scrollWidth > scrollElem.offsetWidth ? getScrollBarWidth() : 0;
    };
    RowDD.prototype.removeFirstRowBorder = function (element) {
        if (this.parent.element.getElementsByClassName('e-firstrow-dragborder').length > 0 && element &&
            element.rowIndex !== 0) {
            this.parent.element.getElementsByClassName('e-firstrow-dragborder')[0].remove();
        }
    };
    RowDD.prototype.removeLastRowBorder = function (element) {
        var islastRowIndex = element &&
            this.parent.getRowByIndex(this.parent.getRows().length - 1).getAttribute('data-uid') !==
                element.getAttribute('data-uid');
        if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0 && element && islastRowIndex) {
            this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();
        }
    };
    RowDD.prototype.removeBorder = function (element) {
        this.removeFirstRowBorder(element);
        this.removeLastRowBorder(element);
        element = this.parent.getRows().filter(function (row) {
            return row.querySelector('td.e-dragborder');
        })[0];
        if (element) {
            var rowElement = [].slice.call(element.querySelectorAll('.e-dragborder'));
            addRemoveActiveClasses(rowElement, false, 'e-dragborder');
        }
    };
    RowDD.prototype.getElementFromPosition = function (element, event) {
        var target;
        var position = getPosition(event);
        element.style.display = 'none';
        target = document.elementFromPoint(position.x, position.y);
        element.style.display = '';
        return target;
    };
    RowDD.prototype.getTargetIdx = function (targetRow) {
        return targetRow ? parseInt(targetRow.getAttribute('aria-rowindex'), 10) : 0;
    };
    RowDD.prototype.columnDrop = function (e) {
        var gObj = this.parent;
        if (e.droppedElement.getAttribute('action') !== 'grouping') {
            var targetRow = closestElement(e.target, 'tr');
            var srcControl = void 0;
            var currentIndex = void 0;
            if ((e.droppedElement.querySelector('tr').getAttribute('single-dragrow') !== 'true' &&
                e.droppedElement.parentElement.id === gObj.element.id)
                || (e.droppedElement.querySelector('tr').getAttribute('single-dragrow') === 'true' &&
                    e.droppedElement.parentElement.id !== gObj.element.id)) {
                return;
            }
            if (e.droppedElement.parentElement.id !== gObj.element.id) {
                srcControl = e.droppedElement.parentElement.blazor__instance;
            }
            if (srcControl.element.id !== gObj.element.id && srcControl.options.rowDropTarget !== gObj.element.id) {
                return;
            }
            var targetIndex = currentIndex = this.getTargetIdx(targetRow);
            if (isNaN(targetIndex)) {
                targetIndex = currentIndex = 0;
            }
            if (gObj.options.allowPaging) {
                targetIndex = targetIndex + (gObj.options.currentPage * gObj.options.pageSize) - gObj.options.pageSize;
            }
            var targetClass = e.target.classList.value;
            var targetID = e.target.id;
            gObj.dotNetRef.invokeMethodAsync("ReorderRows", 0, targetIndex, 'add', false, targetClass, targetID, srcControl.dotNetRef, false);
            srcControl.dotNetRef.invokeMethodAsync("ReorderRows", 0, targetIndex, 'delete', false, targetClass, targetID, null, false);
        }
    };
    RowDD.prototype.destroy = function () {
        var gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.e-gridheader') &&
            !gridElement.querySelector('.e-gridcontent'))) {
            return;
        }
        this.draggable.destroy();
    };
    return RowDD;
}());
export { RowDD };
