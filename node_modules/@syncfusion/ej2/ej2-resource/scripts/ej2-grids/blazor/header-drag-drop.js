import { Draggable, Droppable, isNullOrUndefined, createElement } from '@syncfusion/ej2-base';
import { remove, closest as getClosest, classList } from '@syncfusion/ej2-base';
import { parentsUntil } from './util';
var HeaderDragDrop = (function () {
    function HeaderDragDrop(parent) {
        var _this = this;
        this.dragStart = function (e) {
            var gObj = _this.parent;
            document.body.classList.add('e-prevent-select');
            var popup = gObj.element.querySelector('.e-gridpopup');
            if (popup) {
                popup.style.display = 'none';
            }
            _this.parent.reorderModule.dragStart({ target: e.target, column: _this.column, event: e.event });
            _this.parent.groupModule.columnDragStart({ target: e.target, column: _this.column });
            e.bindEvents(e.dragElement);
        };
        this.drag = function (e) {
            var gObj = _this.parent;
            var target = e.target;
            if (target) {
                var closest = getClosest(target, '.e-grid');
                var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');
                if (!closest || closest.getAttribute('id') !== gObj.element.getAttribute('id')) {
                    classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
                    if (gObj.options.allowReordering) {
                        gObj.element.querySelector('.e-reorderuparrow').style.display = 'none';
                        gObj.element.querySelector('.e-reorderdownarrow').style.display = 'none';
                    }
                    if (!gObj.options.groupReordering) {
                        return;
                    }
                }
                if (gObj.options.allowReordering) {
                    _this.parent.reorderModule.drag({ target: e.target, column: _this.column, event: e.event });
                }
                if (gObj.options.allowGrouping) {
                    _this.parent.groupModule.columnDrag({ target: e.target });
                }
            }
        };
        this.dragStop = function (e) {
            var gObj = _this.parent;
            document.body.classList.remove('e-prevent-select');
            var cancel;
            var popup = gObj.element.querySelector('.e-gridpopup');
            if (popup) {
                popup.style.display = 'none';
            }
            if ((!parentsUntil(e.target, 'e-headercell') && !parentsUntil(e.target, 'e-groupdroparea')) ||
                (!gObj.options.allowReordering && parentsUntil(e.target, 'e-headercell')) ||
                (!e.helper.getAttribute('e-mappinguid') && parentsUntil(e.target, 'e-groupdroparea'))) {
                remove(e.helper);
                cancel = true;
            }
            if (gObj.options.allowReordering) {
                _this.parent.reorderModule.dragStop({ target: e.target, event: e.event, column: _this.column, cancel: cancel });
            }
        };
        this.drop = function (e) {
            var gObj = _this.parent;
            var uid = e.droppedElement.getAttribute('e-mappinguid');
            var closest = getClosest(e.target, '.e-grid');
            remove(e.droppedElement);
            if (closest && closest.getAttribute('id') !== gObj.element.getAttribute('id') ||
                !(gObj.options.allowReordering || gObj.options.allowGrouping)) {
                return;
            }
            if (gObj.options.allowReordering) {
                _this.parent.reorderModule.headerDrop({ target: e.target });
            }
            if (gObj.options.allowGrouping) {
                _this.parent.groupModule.columnDrop({
                    target: e.target, droppedElement: e.droppedElement
                });
            }
        };
        this.helper = function (e) {
            var gObj = _this.parent;
            var target = e.sender.target;
            var parentEle = parentsUntil(target, 'e-headercell');
            if (!(gObj.options.allowReordering || gObj.options.allowGrouping) || (!isNullOrUndefined(parentEle)
                && parentEle.querySelectorAll('.e-checkselectall').length > 0)) {
                return false;
            }
            var visualElement = createElement('div', { className: 'e-cloneproperties e-dragclone e-headerclone' });
            var element = target.classList.contains('e-headercell') ? target : parentEle;
            if (!element || (!gObj.options.allowReordering && element.classList.contains('e-stackedheadercell'))) {
                return false;
            }
            var height = element.offsetHeight;
            var headercelldiv = element.querySelector('.e-headercelldiv') || element.querySelector('.e-stackedheadercelldiv');
            var col;
            if (headercelldiv) {
                if (element.querySelector('.e-stackedheadercelldiv')) {
                    col = gObj.getStackedHeaderColumnByHeaderText(headercelldiv.innerText.trim(), gObj.options.columns);
                }
                else {
                    col = gObj.getColumnByUid(headercelldiv.getAttribute('e-mappinguid'));
                }
                _this.column = col;
                if (_this.column.lockColumn) {
                    return false;
                }
                visualElement.setAttribute('e-mappinguid', headercelldiv.getAttribute("e-mappinguid"));
            }
            visualElement.innerHTML = headercelldiv ? col.headerText : element.firstElementChild.innerHTML;
            visualElement.style.width = element.offsetWidth + 'px';
            visualElement.style.height = element.offsetHeight + 'px';
            visualElement.style.lineHeight = (height - 6).toString() + 'px';
            gObj.element.appendChild(visualElement);
            return visualElement;
        };
        this.parent = parent;
        if (this.parent.options.allowGrouping || this.parent.options.allowReordering) {
            this.initializeHeaderDrag();
            this.initializeHeaderDrop();
        }
    }
    HeaderDragDrop.prototype.initializeHeaderDrag = function () {
        var gObj = this.parent;
        if (!(this.parent.options.allowReordering || (this.parent.options.allowGrouping && this.parent.options.showDropArea))) {
            return;
        }
        var headerRows = [].slice.call(gObj.getHeaderContent().querySelectorAll('.e-columnheader'));
        for (var i = 0, len = headerRows.length; i < len; i++) {
            var drag = new Draggable(headerRows[i], {
                dragTarget: '.e-headercell',
                distance: 5,
                helper: this.helper,
                dragStart: this.dragStart,
                drag: this.drag,
                dragStop: this.dragStop,
                abort: '.e-rhandler',
                isPreventSelect: false
            });
        }
    };
    HeaderDragDrop.prototype.initializeHeaderDrop = function () {
        var gObj = this.parent;
        var drop = new Droppable(gObj.getHeaderContent(), {
            accept: '.e-dragclone',
            drop: this.drop
        });
    };
    return HeaderDragDrop;
}());
export { HeaderDragDrop };
