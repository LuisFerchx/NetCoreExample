import { parentsUntil } from './util';
import { isNullOrUndefined, EventHandler, closest, Browser } from '@syncfusion/ej2-base';
import { calculateRelativeBasedPosition } from '@syncfusion/ej2-popups';
var Filter = (function () {
    function Filter(parent) {
        this.parent = parent;
    }
    Filter.prototype.filterPopupRender = function (dlgID, ColUid, type, isColumnMenu) {
        var dlgelement = this.parent.element.querySelector("#" + dlgID);
        if (!isNullOrUndefined(dlgelement)) {
            if (isColumnMenu) {
                EventHandler.add(dlgelement, 'mousedown', this.mouseDownHandler, this);
                dlgelement.style.maxHeight = type == 'excel' ? '800px' : '350px';
                var element = document.getElementsByClassName("e-" + this.parent.element.id + "-column-menu")[0].getElementsByTagName('ul')[0];
                var li = element.querySelector('.' + 'e-icon-filter').parentElement;
                var ul = this.parent.element.querySelector('.' + 'e-filter-popup');
                var gridPos = this.parent.element.getBoundingClientRect();
                var liPos = li.getBoundingClientRect();
                var left = liPos.left - gridPos.left;
                var top_1 = liPos.top - gridPos.top;
                var elementVisible = dlgelement.style.display;
                dlgelement.style.display = 'block';
                if (gridPos.height < top_1) {
                    top_1 = top_1 - ul.offsetHeight + liPos.height;
                }
                else if (gridPos.height < top_1 + ul.offsetHeight) {
                    top_1 = gridPos.height - ul.offsetHeight;
                }
                if (window.innerHeight < ul.offsetHeight + top_1 + gridPos.top) {
                    top_1 = window.innerHeight - ul.offsetHeight - gridPos.top;
                }
                left += (this.parent.options.enableRtl ? -ul.offsetWidth : liPos.width);
                if (gridPos.width <= left + ul.offsetWidth) {
                    left -= liPos.width + ul.offsetWidth;
                }
                else if (left < 0) {
                    left += ul.offsetWidth + liPos.width;
                }
                dlgelement.style.display = elementVisible;
                this.parent.dotNetRef.invokeMethodAsync("GetFilterIconPosition", left.toString(), top_1.toString());
            }
            else {
                var FilterElement = [].slice.call(this.parent.element.querySelector('.e-headercontent').querySelectorAll('div[e-mappinguid=' + ColUid + ']'));
                var targetElement = FilterElement[1];
                dlgelement.style.maxHeight = type == 'excel' ? '800px' : '350px';
                var elementVisible = dlgelement.style.display;
                dlgelement.style.display = 'block';
                var newpos = calculateRelativeBasedPosition(targetElement, dlgelement);
                dlgelement.style.display = elementVisible;
                var dlgWidth = 250;
                var left = newpos.left - dlgWidth + targetElement.clientWidth;
                var top_2 = newpos.top + targetElement.getBoundingClientRect().height - 5;
                if (left < 1)
                    left = dlgWidth + left - 16;
                else
                    left = left - 4;
                this.parent.dotNetRef.invokeMethodAsync("GetFilterIconPosition", left.toString(), top_2.toString());
            }
        }
    };
    Filter.prototype.mouseDownHandler = function (args) {
        if ((args && closest(args.target, '.e-filter-popup')
            || (args.currentTarget && args.currentTarget.activeElement &&
                parentsUntil(args.currentTarget.activeElement, 'e-filter-popup'))
            || parentsUntil(args.target, 'e-popup') ||
            (parentsUntil(args.target, 'e-popup-wrapper'))) && !Browser.isDevice) {
            this.parent.dotNetRef.invokeMethodAsync("PreventColumnMenuClose", true);
        }
    };
    return Filter;
}());
export { Filter };
