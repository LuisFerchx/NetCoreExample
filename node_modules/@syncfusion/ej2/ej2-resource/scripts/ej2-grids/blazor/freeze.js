import { isNullOrUndefined } from '@syncfusion/ej2-base';
import { getScrollBarWidth } from './util';
var Freeze = (function () {
    function Freeze(parent) {
        this.parent = parent;
        this.frozenHeader = parent.element.querySelector('.e-frozenheader');
        this.movableHeader = parent.element.querySelector('.e-movableheader');
        this.addEventListener();
    }
    Freeze.prototype.addEventListener = function () {
        if (this.parent.options.frozenColumns) {
            this.setFrozenHeight();
            this.refreshFreeze({ case: 'textwrap' });
            this.refreshFreeze({ case: 'refreshHeight' });
        }
    };
    Freeze.prototype.refreshFreeze = function (obj) {
        if (obj.case === 'textwrap' || obj.case === 'refreshHeight') {
            var fRows = void 0;
            var mRows = void 0;
            var fHdr = this.getFrozenHeader();
            var mHdr = this.getMovableHeader();
            var cont = this.parent.getContent();
            var wrapMode = this.parent.options.wrapMode;
            if (obj.case === 'textwrap') {
                if (wrapMode !== 'Header' || obj.isModeChg) {
                    fRows = cont.querySelector('.e-frozencontent').querySelectorAll('tr');
                    mRows = cont.querySelector('.e-movablecontent').querySelectorAll('tr');
                    this.setWrapHeight(fRows, mRows, obj.isModeChg, true);
                }
                if (wrapMode === 'Both' || obj.isModeChg) {
                    fRows = fHdr.querySelectorAll('tr');
                    mRows = mHdr.querySelectorAll('tr');
                }
                else {
                    fRows = fHdr.querySelector(wrapMode === 'Content' ?
                        'tbody' : 'thead').querySelectorAll('tr');
                    mRows = mHdr.querySelector(wrapMode === 'Content' ?
                        'tbody' : 'thead').querySelectorAll('tr');
                }
                if (!this.parent.getHeaderContent().querySelectorAll('.e-stackedheadercell').length) {
                    this.setWrapHeight(fRows, mRows, obj.isModeChg, false, false);
                }
                this.refreshStackedHdrHgt();
            }
            else if (obj.case === 'refreshHeight') {
                this.setWrapHeight(cont.querySelector('.e-frozencontent').querySelectorAll('tr'), cont.querySelector('.e-movablecontent').querySelectorAll('tr'), obj.isModeChg);
                if (!this.parent.getHeaderContent().querySelectorAll('.e-stackedheadercell').length) {
                    this.setWrapHeight(fHdr.querySelectorAll('tr'), mHdr.querySelectorAll('tr'), obj.isModeChg);
                }
            }
        }
    };
    Freeze.prototype.updateResizeHandler = function () {
        var elements = [].slice.call(this.parent.getHeaderContent().querySelectorAll('.e-rhandler'));
        for (var i = 0; i < elements.length; i++) {
            elements[i].style.height = elements[i].parentElement.offsetHeight + 'px';
        }
    };
    Freeze.prototype.setWrapHeight = function (fRows, mRows, isModeChg, isContReset, isStackedHdr) {
        var fRowHgt;
        var mRowHgt;
        var isWrap = this.parent.options.allowTextWrap;
        var wrapMode = this.parent.options.wrapMode;
        var tHead = this.parent.getHeaderContent().querySelector('thead');
        var tBody = this.parent.getHeaderContent().querySelector('tbody');
        var height = [];
        var width = [];
        for (var i = 0, len = fRows.length; i < len; i++) {
            if (!isNullOrUndefined(fRows[i]) && !isNullOrUndefined(mRows[i])) {
                height[i] = fRows[i].getBoundingClientRect().height;
                width[i] = mRows[i].getBoundingClientRect().height;
            }
        }
        for (var i = 0, len = fRows.length; i < len; i++) {
            if (isModeChg && ((wrapMode === 'Header' && isContReset) || ((wrapMode === 'Content' && tHead.contains(fRows[i]))
                || (wrapMode === 'Header' && tBody.contains(fRows[i])))) || isStackedHdr) {
                fRows[i].style.height = null;
                mRows[i].style.height = null;
            }
            fRowHgt = height[i];
            mRowHgt = width[i];
            if (fRowHgt > mRowHgt) {
                mRows[i].style.height = fRowHgt + 'px';
            }
            else if (mRowHgt > fRowHgt) {
                fRows[i].style.height = mRowHgt + 'px';
            }
        }
        if (isWrap) {
            this.setFrozenHeight();
        }
    };
    Freeze.prototype.setFrozenHeight = function (height) {
        if (height === void 0) { height = getScrollBarWidth(); }
        var movableContentHeight = this.parent.element.querySelector('.e-movablecontent').getBoundingClientRect().height;
        var movableContent = this.parent.element.querySelector('.e-movablecontent');
        var frozenContent = this.parent.element.querySelector('.e-frozencontent');
        frozenContent.style.height = movableContentHeight - height + 'px';
        frozenContent.style.borderBottom = '';
    };
    Freeze.prototype.refreshStackedHdrHgt = function () {
        var fRowSpan;
        var mRowSpan;
        var fTr = this.getFrozenHeader().querySelectorAll('.e-columnheader');
        var mTr = this.getMovableHeader().querySelectorAll('.e-columnheader');
        for (var i = 0, len = fTr.length; i < len; i++) {
            fRowSpan = this.getRowSpan(fTr[i]);
            mRowSpan = this.getRowSpan(mTr[i]);
            if (fRowSpan.min > 1) {
                this.updateStackedHdrRowHgt(i, fRowSpan.max, fTr[i], mTr);
            }
            else if (mRowSpan.min > 1) {
                this.updateStackedHdrRowHgt(i, mRowSpan.max, mTr[i], fTr);
            }
        }
        if (this.parent.options.allowResizing) {
            this.updateResizeHandler();
        }
    };
    Freeze.prototype.getRowSpan = function (row) {
        var rSpan;
        var minRowSpan;
        var maxRowSpan;
        for (var i = 0, len = row.childElementCount; i < len; i++) {
            if (i === 0) {
                minRowSpan = row.children[0].rowSpan;
            }
            rSpan = row.children[i].rowSpan;
            minRowSpan = Math.min(rSpan, minRowSpan);
            maxRowSpan = Math.max(rSpan, minRowSpan);
        }
        return { min: minRowSpan, max: maxRowSpan };
    };
    Freeze.prototype.updateStackedHdrRowHgt = function (idx, maxRowSpan, row, rows) {
        var height = 0;
        for (var i = 0; i < maxRowSpan; i++) {
            height += rows[idx + i].style.height ?
                parseInt(rows[idx + i].style.height, 10) : rows[idx + i].offsetHeight;
        }
        row.style.height = height + 'px';
    };
    Freeze.prototype.getFrozenHeader = function () {
        return this.frozenHeader;
    };
    Freeze.prototype.getMovableHeader = function () {
        return this.movableHeader;
    };
    Freeze.prototype.refreshRowHeight = function () {
        if (this.parent.options.rowHeight != 0) {
            return;
        }
        if (this.parent.options.frozenColumns || this.parent.options.frozenRows) {
            this.clearWrapHeight();
            this.refreshStackedHdrHgt();
            this.refreshFreeze({ case: 'refreshHeight' });
            if (this.parent.options.allowResizing) {
                this.updateResizeHandler();
            }
        }
    };
    Freeze.prototype.clearWrapHeight = function () {
        var fn = function (fRows, mRows) {
            for (var i = 0, len = fRows.length; i < len; i++) {
                if (!isNullOrUndefined(fRows[i]) && !isNullOrUndefined(mRows[i])) {
                    fRows[i].style.height = null;
                    mRows[i].style.height = null;
                }
            }
        };
        var fRows;
        var mRows;
        if (this.parent.options.frozenColumns) {
            if (this.parent.options.frozenRows) {
                fRows = this.parent.element.querySelector('.e-frozenheader').querySelectorAll('tr');
                mRows = this.parent.element.querySelector('.e-movableheader').querySelectorAll('tr');
                fn(fRows, mRows);
            }
            fRows = this.parent.element.querySelector('.e-frozencontent').querySelectorAll('tr');
            mRows = this.parent.element.querySelector('.e-movablecontent').querySelectorAll('tr');
            fn(fRows, mRows);
        }
        if (this.parent.options.frozenRows && this.parent.options.frozenColumns == 0) {
            fRows = this.parent.element.querySelector('.e-headercontent').querySelectorAll('tr');
            mRows = this.parent.element.querySelector('.e-content').querySelectorAll('tr');
            fn(fRows, mRows);
        }
    };
    return Freeze;
}());
export { Freeze };
