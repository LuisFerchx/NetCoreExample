import { extend, isNullOrUndefined, print } from '@syncfusion/ej2-base';
import { EventHandler, KeyboardEvents, closest } from '@syncfusion/ej2-base';
import { getScrollableParent } from '@syncfusion/ej2-popups';
import { Scroll } from './scroll';
import { Freeze } from './freeze';
import { iterateArrayOrObject, parentsUntil, getRowHeight } from './util';
import { ColumnWidthService } from './width-controller';
import { HeaderDragDrop } from './header-drag-drop';
import { ContentDragDrop } from './content-drag-drop';
import { Reorder } from './reorder';
import { Resize } from './resize';
import { Group } from './group';
import { ColumnChooser } from './column-chooser';
import { ColumnMenu } from './column-menu';
import { Filter } from './filter';
import { Edit } from './edit';
import { Clipboard } from './clipboard';
import { CustomToolTip } from './tooltip';
import { RowDD } from './row-reorder';
import { Selection } from './selection';
import { VirtualHeaderRenderer, VirtualContentRenderer } from './virtual-scroll';
var SfGrid = (function () {
    function SfGrid(element, options, dotnetRef) {
        this.columnModel = [];
        this.inViewIndexes = [];
        this.isRendered = false;
        this.element = element;
        if (isNullOrUndefined(element)) {
            return;
        }
        if (!isNullOrUndefined(element)) {
            this.element.blazor__instance = this;
        }
        this.dotNetRef = dotnetRef;
        this.options = options;
        this.header = this.element.querySelector('.e-headercontent');
        this.content = this.element.querySelector('.e-gridcontent .e-content');
        this.footer = this.element.querySelector('.e-summarycontent');
        this.initModules();
        this.addScrollEvents(true);
    }
    SfGrid.prototype.initModules = function () {
        this.scrollModule = new Scroll(this);
        this.freezeModule = new Freeze(this);
        this.headerDragDrop = new HeaderDragDrop(this);
        this.contentDragDrop = new ContentDragDrop(this);
        this.reorderModule = new Reorder(this);
        this.groupModule = new Group(this);
        this.resizeModule = new Resize(this);
        this.editModule = new Edit(this);
        this.columnChooserModule = new ColumnChooser(this);
        this.clipboardModule = new Clipboard(this);
        this.columnMenuModule = new ColumnMenu(this);
        this.filterModule = new Filter(this);
        this.virtualContentModule = new VirtualContentRenderer(this);
        this.virtualHeaderModule = new VirtualHeaderRenderer(this);
        this.toolTipModule = new CustomToolTip(this);
        this.rowDragAndDropModule = new RowDD(this);
        this.selectionModule = new Selection(this);
        this.widthService = new ColumnWidthService(this);
        this.isRendered = this.options.isPrerendered;
        this.keyModule = new KeyboardEvents(this.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: gridKeyConfigs,
            eventName: 'keydown'
        });
        if (this.options.enableColumnVirtualization) {
            this.virtualHeaderModule.renderTable();
        }
        if (this.options.enableVirtualization) {
            this.virtualContentModule.renderTable();
        }
        if (this.options.allowResizing) {
            this.resizeModule.render();
        }
        if (!this.options.needClientAction) {
            this.contentReady();
        }
        else {
            this.clientActions();
        }
        this.lastRowBorderCheck();
        this.wireEvents();
    };
    SfGrid.prototype.getHeaderContent = function () { return this.header; };
    SfGrid.prototype.getHeaderTable = function () { return this.header.querySelector('.e-table'); };
    SfGrid.prototype.getContent = function () { return this.content; };
    SfGrid.prototype.getContentTable = function () { return this.content.querySelector('.e-table'); };
    SfGrid.prototype.getFooterContent = function () { return this.footer; };
    SfGrid.prototype.getColumns = function (isRefresh) {
        this.columnModel = [];
        this.updateColumnModel(this.options.columns);
        return this.columnModel;
    };
    SfGrid.prototype.addScrollEvents = function (add) {
        if (this.options.showColumnMenu) {
            var elements = getScrollableParent(this.element);
            for (var i = 0; i < elements.length; i++) {
                if (elements[i] instanceof HTMLElement) {
                    add ? EventHandler.add(elements[i], 'scroll', this.scrollHandler, this) :
                        EventHandler.remove(elements[i], 'scroll', this.scrollHandler);
                }
            }
            add ? EventHandler.add(this.content, 'scroll', this.scrollHandler, this) :
                EventHandler.remove(this.content, 'scroll', this.scrollHandler);
        }
    };
    SfGrid.prototype.scrollHandler = function (e) {
        if (!isNullOrUndefined(this.element) && !isNullOrUndefined(this.element.blazor__instance)) {
            return this.element.blazor__instance.columnMenuModule.setPosition();
        }
    };
    SfGrid.prototype.updateColumnModel = function (columns) {
        for (var i = 0, len = columns.length; i < len; i++) {
            if (columns[i].columns) {
                this.updateColumnModel(columns[i].columns);
            }
            else {
                this.columnModel.push(columns[i]);
            }
        }
    };
    SfGrid.prototype.getColumnByIndex = function (index) {
        var column;
        this.getColumns().some(function (col, i) {
            column = col;
            return i === index;
        });
        return column;
    };
    SfGrid.prototype.getDataRows = function () {
        if (isNullOrUndefined(this.getContentTable().querySelector('tbody'))) {
            return [];
        }
        var rows = [].slice.call(this.getContentTable().querySelector('tbody').children);
        if (this.options.frozenRows) {
            var freezeRows = [].slice.call(this.getHeaderTable().querySelector('tbody').children);
            rows = this.addMovableRows(freezeRows, rows);
        }
        var dataRows = this.generateDataRows(rows);
        return dataRows;
    };
    SfGrid.prototype.addMovableRows = function (fRows, mrows) {
        for (var i = 0, len = mrows.length; i < len; i++) {
            fRows.push(mrows[i]);
        }
        return fRows;
    };
    SfGrid.prototype.generateDataRows = function (rows) {
        var dRows = [];
        for (var i = 0, len = rows.length; i < len; i++) {
            if (rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-hiddenrow')) {
                dRows.push(rows[i]);
            }
        }
        return dRows;
    };
    SfGrid.prototype.getMovableDataRows = function () {
        var rows = [].slice.call(this.getContent().querySelector('.e-movablecontent').querySelector('tbody').children);
        if (this.options.frozenRows) {
            var freezeRows = [].slice.call(this.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody').children);
            rows = this.addMovableRows(freezeRows, rows);
        }
        var dataRows = this.generateDataRows(rows);
        return dataRows;
    };
    SfGrid.prototype.getFrozenDataRows = function () {
        var rows = [].slice.call(this.getContent().querySelector('.e-frozencontent').querySelector('tbody').children);
        if (this.options.frozenRows) {
            var freezeRows = [].slice.call(this.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody').children);
            rows = this.addMovableRows(freezeRows, rows);
        }
        var dataRows = this.generateDataRows(rows);
        return dataRows;
    };
    SfGrid.prototype.getRowByIndex = function (index) {
        return this.getDataRows()[index];
    };
    SfGrid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {
        var frzCols = this.options.frozenColumns;
        return frzCols && columnIndex >= frzCols ?
            this.getMovableDataRows()[rowIndex] && this.getMovableDataRows()[rowIndex].querySelectorAll('.e-rowcell')[columnIndex - frzCols] :
            this.getDataRows()[rowIndex] && this.getDataRows()[rowIndex].querySelectorAll('.e-rowcell')[columnIndex];
    };
    SfGrid.prototype.getColumnHeaderByIndex = function (index) {
        return this.getHeaderTable().querySelectorAll('.e-headercell')[index];
    };
    SfGrid.prototype.getRows = function () {
        return this.options.frozenColumns ? this.getFrozenDataRows() : [].slice.call(this.getContentTable().querySelectorAll('tr.e-row[data-uid]'));
    };
    SfGrid.prototype.getSelectedRows = function () {
        return this.getRows().filter(function (row) { return row.getAttribute('aria-selected') === 'true'; });
    };
    SfGrid.prototype.getSelectedRowIndexes = function () {
        var selectedIndexes = [];
        var rows = this.getRows();
        for (var i = 0; i < rows.length; i++) {
            if (rows[i].hasAttribute('aria-selected') && rows[i].getAttribute('aria-selected') === "true") {
                selectedIndexes.push(i);
            }
        }
        return selectedIndexes;
    };
    SfGrid.prototype.getVisibleColumns = function () {
        var cols = [];
        for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {
            var col = _a[_i];
            if (col.visible) {
                cols.push(col);
            }
        }
        return cols;
    };
    SfGrid.prototype.getColumnByField = function (field) {
        return iterateArrayOrObject(this.getColumns(), function (item, index) {
            if (item.field === field) {
                return item;
            }
            return undefined;
        })[0];
    };
    SfGrid.prototype.getColumnIndexByField = function (field) {
        var cols = this.getColumns();
        for (var i = 0; i < cols.length; i++) {
            if (cols[i].field === field) {
                return i;
            }
        }
        return -1;
    };
    SfGrid.prototype.getColumnByUid = function (uid) {
        return iterateArrayOrObject(this.getColumns().concat(this.getStackedColumns(this.options.columns)), function (item, index) {
            if (item.uid === uid) {
                return item;
            }
            return undefined;
        })[0];
    };
    SfGrid.prototype.getStackedColumns = function (columns, stackedColumn) {
        if (stackedColumn === void 0) { stackedColumn = []; }
        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
            var column = columns_1[_i];
            if (column.columns) {
                stackedColumn.push(column);
                this.getStackedColumns(column.columns, stackedColumn);
            }
        }
        return stackedColumn;
    };
    SfGrid.prototype.getColumnIndexByUid = function (uid) {
        var index = iterateArrayOrObject(this.getColumns(), function (item, index) {
            if (item.uid === uid) {
                return index;
            }
            return undefined;
        })[0];
        return !isNullOrUndefined(index) ? index : -1;
    };
    SfGrid.prototype.getColumnHeaderByUid = function (uid) {
        return this.getHeaderContent().querySelector('[e-mappinguid=' + uid + ']').parentElement;
    };
    SfGrid.prototype.getUidByColumnField = function (field) {
        return iterateArrayOrObject(this.getColumns(), function (item, index) {
            if (item.field === field) {
                return item.uid;
            }
            return undefined;
        })[0];
    };
    SfGrid.prototype.getStackedHeaderColumnByHeaderText = function (stackedHeader, col) {
        for (var i = 0; i < col.length; i++) {
            var individualColumn = col[i];
            if (individualColumn.field === stackedHeader || individualColumn.headerText === stackedHeader) {
                this.stackedColumn = individualColumn;
                break;
            }
            else if (individualColumn.columns) {
                this.getStackedHeaderColumnByHeaderText(stackedHeader, individualColumn.columns);
            }
        }
        return this.stackedColumn;
    };
    SfGrid.prototype.getNormalizedColumnIndex = function (uid) {
        var index = this.getColumnIndexByUid(uid);
        return index + this.getIndentCount();
    };
    SfGrid.prototype.getIndentCount = function () {
        var index = 0;
        if (this.options.allowGrouping) {
            index += this.options.groupCount;
        }
        if (this.options.hasDetailTemplate) {
            index++;
        }
        if (this.options.allowRowDragAndDrop && !this.options.hasDropTarget) {
            index++;
        }
        return index;
    };
    SfGrid.prototype.recalcIndentWidth = function () {
        if (!this.isRendered || !this.getHeaderTable().querySelector('.e-emptycell')) {
            return;
        }
        if ((!this.options.groupCount && !this.options.hasDetailTemplate &&
            (this.options.allowRowDragAndDrop && this.options.hasDropTarget)) || !this.getContentTable()
            || this.getHeaderTable().querySelector('.e-emptycell').getAttribute("indentRefreshed")) {
            return;
        }
        var indentWidth = this.getHeaderTable().querySelector('.e-emptycell').parentElement.offsetWidth;
        var perPixel = indentWidth / 30;
        var i = 0;
        if (perPixel >= 1) {
            indentWidth = (30 / perPixel);
        }
        this.getHeaderTable().querySelector('.e-emptycell').setAttribute('indentRefreshed', 'true');
        this.dotNetRef.invokeMethodAsync('SetIndentWidth', indentWidth + 'px');
    };
    SfGrid.prototype.resetColumnWidth = function () {
        if ((this.options.width === 'auto' || typeof (this.options.width) === 'string')
            && this.getColumns().filter(function (col) { return (!col.width || col.width === 'auto') && col.minWidth; }).length > 0) {
            var tgridWidth = this.widthService.getTableWidth(this.getColumns());
            this.widthService.setMinwidthBycalculation(tgridWidth);
        }
    };
    SfGrid.prototype.contentReady = function (action) {
        if (action === void 0) { action = null; }
        if (this.getColumns().some(function (x) { return x.autoFit; })) {
            this.resizeModule.autoFit();
        }
        if (this.options.frozenColumns) {
            this.freezeModule.refreshRowHeight();
            this.freezeModule.setFrozenHeight();
            this.freezeModule.refreshStackedHdrHgt();
        }
        if (this.options.enableVirtualization) {
            this.virtualContentModule.onDataReady();
        }
        this.recalcIndentWidth();
        this.resetColumnWidth();
        this.lastRowBorderCheck();
        if (action === 'Paging') {
            if (!parentsUntil(document.activeElement, 'e-grid')) {
                this.element.focus();
            }
        }
    };
    SfGrid.prototype.lastRowBorderCheck = function () {
        if (!this.options.enableVirtualization) {
            if (this.getContent().querySelector(".e-table").scrollHeight < this.getContent().clientHeight) {
                this.dotNetRef.invokeMethodAsync('LastRowBorder', true);
            }
            else {
                this.dotNetRef.invokeMethodAsync('LastRowBorder', false);
            }
        }
    };
    SfGrid.prototype.wireEvents = function () {
        EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);
        EventHandler.add(this.element, 'focus', this.gridFocus, this);
        EventHandler.add(document, 'click', this.documentClickHandler, this);
        EventHandler.add(this.element, 'keydown', this.gridKeyDownHandler, this);
        EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);
        EventHandler.add(document.body, 'keydown', this.documentKeyHandler, this);
        if (this.options.allowEditing) {
            EventHandler.add(this.element, 'dblclick', this.doubleClickHandler, this);
        }
    };
    SfGrid.prototype.unWireEvents = function () {
        EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);
        EventHandler.remove(this.element, 'focus', this.gridFocus);
        EventHandler.remove(document, 'click', this.documentClickHandler);
        EventHandler.remove(this.element, 'keydown', this.gridKeyDownHandler);
        EventHandler.remove(this.element, 'keydown', this.keyDownHandler);
        EventHandler.remove(document.body, 'keydown', this.documentKeyHandler);
        EventHandler.remove(this.element, 'dblclick', this.doubleClickHandler);
    };
    SfGrid.prototype.doubleClickHandler = function (e) {
        if (e.target.tagName == 'TD') {
            e.target.blur();
        }
    };
    SfGrid.prototype.setOptions = function (newOptions, options) {
        var oldOptions = extend(options, {});
        this.options = newOptions;
        if (!oldOptions.allowResizing && newOptions.allowResizing) {
            this.resizeModule.render();
        }
        if ((!oldOptions.allowGrouping && newOptions.allowGrouping)
            || (!oldOptions.allowReordering && newOptions.allowReordering)) {
            this.headerDragDrop.initializeHeaderDrag();
            this.headerDragDrop.initializeHeaderDrop();
            this.groupModule.initializeGHeaderDrag();
            this.groupModule.initializeGHeaderDrop();
        }
        if (!oldOptions.allowGrouping && newOptions.allowGrouping) {
            this.contentDragDrop.initializeContentDrop();
        }
        if (!oldOptions.allowRowDragAndDrop && newOptions.allowRowDragAndDrop) {
            this.rowDragAndDropModule.initializeDrag();
        }
        else if (oldOptions.allowRowDragAndDrop && !newOptions.allowRowDragAndDrop) {
            this.rowDragAndDropModule.destroy();
        }
        if (!this.isRendered) {
            this.isRendered = this.options.isPrerendered;
        }
        if (oldOptions.groupCount != newOptions.groupCount) {
            var cell = this.getHeaderTable().querySelector('.e-emptycell');
            if (!cell) {
                return;
            }
            cell.removeAttribute('indentRefreshed');
        }
    };
    SfGrid.prototype.documentClickHandler = function (e) {
        var popupElement = parentsUntil(e.target, 'e-popup-open');
        var CCButton = parentsUntil(e.target, 'e-cc-toolbar');
        var datetimePicker = parentsUntil(e.target, 'e-datepicker');
        var daterangePicker = parentsUntil(e.target, 'e-daterangepicker') || parentsUntil(e.target, 'e-zoomin');
        if (!popupElement && !datetimePicker && !daterangePicker && !(e.target.classList.contains('e-cc-cancel')) && !(e.target.classList.contains('e-choosercheck')) && !(e.target.classList.contains('e-fltrcheck')) && !(e.target.classList.contains('e-icon-filter')) && !CCButton && (this.element.querySelectorAll('.e-filter-popup.e-popup-open').length || this.element.querySelectorAll('.e-ccdlg.e-popup-open').length)) {
            if (this.element.querySelector('.e-datetimepicker') != null) {
                this.element.querySelector('.e-datetimepicker').blur();
            }
            this.dotNetRef.invokeMethodAsync('FilterPopupClose');
        }
    };
    SfGrid.prototype.documentKeyHandler = function (e) {
        if (e.altKey && e.keyCode === 74 && !isNullOrUndefined(this.element)) {
            this.element.focus();
            this.dotNetRef.invokeMethodAsync("GridFocus", e);
        }
    };
    SfGrid.prototype.keyDownHandler = function (e) {
        var gridElement = parentsUntil(e.target, 'e-grid');
        if ((gridElement && gridElement.id !== this.element.id) ||
            (e.key == "Shift" || e.key == "Control" || e.key == "Alt")) {
            return;
        }
        if (e.target.tagName == "INPUT" && e.code == "Delete") {
            return;
        }
        this.dotNetRef.invokeMethodAsync("GridKeyDown", {
            key: e.key,
            code: e.code,
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey,
            altKey: e.altKey
        });
    };
    SfGrid.prototype.gridKeyDownHandler = function (e) {
        var popupElement = parentsUntil(e.target, 'e-filter-popup');
        if (!isNullOrUndefined(popupElement) && popupElement.classList.contains('e-popup-open') && e.key != 'Escape') {
            e.stopPropagation();
            if ((e.key == "Tab" || e.key == "shiftTab" || e.key == "Enter" || e.key == "shiftEnter") &&
                e.target.tagName == "INPUT") {
                var evt = document.createEvent('HTMLEvents');
                evt.initEvent('change', false, true);
                e.target.dispatchEvent(evt);
            }
        }
        if ((e.key == "Tab" || e.key == 'Escape' || e.key == "shiftTab" || e.key == "Enter" || e.key == "shiftEnter")
            && (e.target.tagName == 'INPUT' || e.target.classList.contains('e-datepicker') || e.target.classList.contains('e-datetimepicker'))) {
            e.target.blur();
        }
        if (e.key == "Shift" || e.key == "Control" || e.key == "Alt") {
            e.stopPropagation();
        }
        if (e.keyCode === 67 && e.ctrlKey) {
            this.clipboardModule.copy();
        }
        else if (e.keyCode === 72 && e.ctrlKey && e.shiftKey) {
            this.clipboardModule.copy(true);
        }
        if (e.keyCode === 86 && e.ctrlKey && !this.options.isEdit) {
            e.stopPropagation();
            this.clipboardModule.pasteHandler();
        }
        if (this.element.querySelector('.e-batchrow')) {
            if (e.key != "Tab" && e.key != "shiftTab" && e.key != "Enter" && e.key != "shiftEnter"
                && e.key != "Escape") {
                e.stopPropagation();
            }
            if (e.key == "Tab" || e.key == "shiftTab" || e.key == "Enter" || e.key == "shiftEnter") {
                e.preventDefault();
                if (e.target.tagName == "INPUT") {
                    var evt = document.createEvent('HTMLEvents');
                    evt.initEvent('change', false, true);
                    e.target.dispatchEvent(evt);
                }
            }
        }
    };
    SfGrid.prototype.mouseDownHandler = function (e) {
        var gridElement = parentsUntil(e.target, 'e-grid');
        if (gridElement && gridElement.id !== this.element.id) {
            return;
        }
        if (e.shiftKey || e.ctrlKey) {
            e.preventDefault();
        }
        if ((e.button !== 2 && parentsUntil(e.target, 'e-headercell')) || (e.button !== 2 && parentsUntil(e.target, 'e-detailcell')) || parentsUntil(e.target, 'e-detailrowexpand') || parentsUntil(e.target, 'e-detailrowcollapse')
            || e.target.classList.contains('e-content') || e.target.classList.contains('e-headercontent') || closest(e.target, ".e-groupdroparea") || closest(e.target, ".e-gridpopup")
            || closest(e.target, ".e-summarycell") || closest(e.target, ".e-rhandler")
            || closest(e.target, ".e-filtermenudiv") || closest(e.target, ".e-filterbarcell")
            || closest(e.target, ".e-groupcaption")) {
            this.dotNetRef.invokeMethodAsync("MouseDownHandler", null, null);
        }
        else {
            var target = null;
            var cellUid = null;
            var editForm = parentsUntil(parentsUntil(e.target, 'e-gridform'), 'e-grid');
            if (parentsUntil(e.target, 'e-editcell') || editForm && editForm.id == gridElement.id) {
                target = "Edit";
            }
            else if (parentsUntil(e.target, 'e-pager')) {
                target = "Pager";
            }
            else if (parentsUntil(e.target, 'e-headercontent')) {
                target = "Header";
                cellUid = parentsUntil(e.target, 'e-headercell') ? parentsUntil(e.target, 'e-headercell').getAttribute('data-uid') : null;
            }
            else if (parentsUntil(e.target, 'e-content')) {
                target = "Content";
                cellUid = parentsUntil(e.target, 'e-rowcell') ? parentsUntil(e.target, 'e-rowcell').getAttribute('data-uid') : null;
            }
            if (target == "Header" || target == "Content" || target == "Pager" || target == "Edit") {
                this.dotNetRef.invokeMethodAsync("MouseDownHandler", target, cellUid);
            }
        }
    };
    SfGrid.prototype.gridFocus = function (e) {
        if (!isNullOrUndefined(this.element.querySelector(".e-gridform")) &&
            this.element.querySelector(".e-gridform").classList.contains("e-editing")) {
            return;
        }
        this.dotNetRef.invokeMethodAsync("GridFocus", e);
    };
    SfGrid.prototype.keyActionHandler = function (e) {
        var _this = this;
        if (e.action === 'pageUp' || e.action === 'pageDown' || e.action === 'ctrlAltPageUp'
            || e.action === 'ctrlAltPageDown' || e.action === 'altPageUp' || e.action === 'altPageDown'
            || e.action === 'altDownArrow' || e.action === 'ctrlPlusP') {
            e.preventDefault();
        }
        if (e.action === 'enter' && !isNullOrUndefined(this.element.querySelector(".e-gridform"))
            && this.element.querySelector(".e-gridform").classList.contains("e-editing")
            && this.options.editMode !== "Batch") {
            setTimeout(function () {
                e.target.blur();
                _this.dotNetRef.invokeMethodAsync("EndEdit");
            }, 40);
        }
    };
    SfGrid.prototype.destroy = function () {
        this.unWireEvents();
        this.addScrollEvents(false);
        this.toolTipModule.destroy();
        this.keyModule.destroy();
        this.virtualContentModule.removeEventListener();
        this.columnChooserModule.removeMediaListener();
        this.selectionModule.removeEventListener();
        this.rowDragAndDropModule.destroy();
    };
    SfGrid.prototype.getColumnIndexesInView = function () {
        return this.inViewIndexes;
    };
    SfGrid.prototype.setColumnIndexesInView = function (indexes) {
        this.inViewIndexes = indexes;
    };
    SfGrid.prototype.getRowHeight = function () {
        return this.options.rowHeight ? this.options.rowHeight : getRowHeight(this.element);
    };
    SfGrid.prototype.clientActions = function () {
        if (this.options.enableVirtualization && (this.options.pageSize === 12 || this.options.width === 'auto')) {
            this.virtualContentModule.ensurePageSize();
        }
        if (this.getColumns().some(function (col) { return col.hideAtMedia !== ''; })) {
            this.columnChooserModule.setMediaColumns();
        }
    };
    SfGrid.prototype.print = function () {
        this.removeColGroup();
        var printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');
        printWind.moveTo(0, 0);
        printWind.resizeTo(screen.availWidth, screen.availHeight);
        print(this.element, printWind);
    };
    SfGrid.prototype.removeColGroup = function () {
        var depth = this.options.groupCount;
        var element = this.element;
        var id = '#' + this.element.id;
        if (!depth) {
            return;
        }
        var groupCaption = element.querySelectorAll(".e-groupcaption");
        var colSpan = groupCaption[depth - 1].getAttribute('colspan');
        for (var i = 0; i < groupCaption.length; i++) {
            groupCaption[i].setAttribute('colspan', colSpan);
        }
        var colGroups = element.querySelectorAll("colgroup" + id + "colGroup");
        var contentColGroups = element.querySelector('.e-content').querySelectorAll('colgroup');
        this.hideColGroup(colGroups, depth);
        this.hideColGroup(contentColGroups, depth);
    };
    SfGrid.prototype.hideColGroup = function (colGroups, depth) {
        for (var i = 0; i < colGroups.length; i++) {
            for (var j = 0; j < depth; j++) {
                colGroups[i].children[j].style.display = 'none';
            }
        }
    };
    SfGrid.prototype.getModuleName = function () {
        return 'grid';
    };
    return SfGrid;
}());
export { SfGrid };
var gridKeyConfigs = {
    pageUp: 'pageup',
    pageDown: 'pagedown',
    ctrlAltPageUp: 'ctrl+alt+pageup',
    ctrlAltPageDown: 'ctrl+alt+pagedown',
    altPageUp: 'alt+pageup',
    altPageDown: 'alt+pagedown',
    altDownArrow: 'alt+downarrow',
    altUpArrow: 'alt+uparrow',
    ctrlDownArrow: 'ctrl+downarrow',
    ctrlUpArrow: 'ctrl+uparrow',
    ctrlPlusA: 'ctrl+A',
    ctrlPlusP: 'ctrl+P',
    ctrlPlusC: 'ctrl+C',
    ctrlShiftPlusH: 'ctrl+shift+H',
    enter: 'enter',
};
