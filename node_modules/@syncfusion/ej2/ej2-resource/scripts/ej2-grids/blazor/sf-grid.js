import { isNullOrUndefined, enableBlazorMode } from '@syncfusion/ej2-base';
import { SfGrid } from './sf-grid-fn';
import { getScrollBarWidth } from './util';
var Grid = {
    initialize: function (element, options, dotnetRef) {
        enableBlazorMode();
        new SfGrid(element, options, dotnetRef);
    },
    contentReady: function (element, options, action) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var instance = element.blazor__instance;
            instance.setOptions(options, instance.options);
            instance.options = options;
            instance.contentReady(action);
        }
    },
    reorderColumns: function (element, fromFName, toFName) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.reorderModule.reorderColumns(fromFName, toFName);
        }
    },
    reorderColumnByIndex: function (element, fromIndex, toIndex) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.reorderModule.reorderColumnByIndex(fromIndex, toIndex);
        }
    },
    reorderColumnByTargetIndex: function (element, fieldName, toIndex) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.reorderModule.reorderColumnByTargetIndex(fieldName, toIndex);
        }
    },
    renderColumnChooser: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.columnChooserModule.renderColumnChooser();
        }
    },
    renderColumnMenu: function (element, uid, isFilter, key) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            return element.blazor__instance.columnMenuModule.renderColumnMenu(uid, isFilter, key);
        }
        else {
            return { Left: 1, Top: 1 };
        }
    },
    filterPopupRender: function filterPopupRender(element, dlgID, uid, type, isColumnMenu) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.filterModule.filterPopupRender(dlgID, uid, type, isColumnMenu);
        }
    },
    clientTransformUpdate: function clientTransformUpdate(element, xPosition, yPosition) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.virtualContentModule.updateTransform(xPosition, yPosition);
        }
    },
    autoFitColumns: function (element, columns, fieldNames) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var instance = element.blazor__instance;
            instance.options.columns = columns;
            element.blazor__instance.resizeModule.autoFitColumns(fieldNames);
        }
    },
    refreshColumnIndex: function (element, columns) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var instance = element.blazor__instance;
            instance.options.columns = columns;
            instance.virtualContentModule.refreshColumnIndexes();
        }
    },
    focus: function (element, rowuid, celluid, action) {
        var cell = element.querySelector("[data-uid=\"" + celluid + "\"]");
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance) && !isNullOrUndefined(cell)) {
            var instance = element.blazor__instance;
            if (!instance.options.enableVirtualization) {
                cell.focus();
            }
            else {
                instance.virtualContentModule.focusCell(cell, action);
            }
        }
    },
    focusExcelInput: function (element, celluid) {
        var excelPopup = document.querySelector("#" + celluid + "_excelDlg");
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance) && !isNullOrUndefined(excelPopup)) {
            setTimeout(function () {
                excelPopup.querySelector("#" + element.id + "_SearchBox").focus();
            }, 10);
        }
    },
    refreshOnDataChange: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.virtualContentModule.refreshOnDataChange();
        }
    },
    updateAutofillPosition: function (element, cellindex, index) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var _this = element.blazor__instance;
            return _this.selectionModule.updateAutofillPosition(cellindex, index);
        }
        else {
            return null;
        }
    },
    createBorder: function (element, rowIndex, cellIndex) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var _this = element.blazor__instance;
            return _this.selectionModule.createBorder(rowIndex, cellIndex);
        }
        else {
            return null;
        }
    },
    removePersistItem: function (element, id) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            var _this = element.blazor__instance;
            _this.getHeaderTable().style.width = "";
            _this.getContentTable().style.width = "";
            if (_this.options.aggregatesCount != 0) {
                _this.getFooterContent().querySelector(".e-table").style.width = "";
            }
            if (_this.options.frozenColumns > 0) {
                _this.element.querySelector(".e-movableheader").querySelector('.e-table').style.width = "";
                _this.element.querySelector(".e-movablecontent").querySelector('.e-table').style.width = "";
            }
        }
        localStorage.removeItem(id);
    },
    focusChild: function (element, rowuid, celluid) {
        var query = 'button, [href], input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])';
        var child = [].slice.call(element.querySelector("[data-uid=\"" + celluid + "\"]").querySelectorAll(query));
        child.length > 0 ? child[0].focus() : element.querySelector("[data-uid=\"" + celluid + "\"]").focus();
        return child.length ? true : false;
    },
    exportSave: function (filename, bytesBase64) {
        if (navigator.msSaveBlob) {
            var data = window.atob(bytesBase64);
            var bytes = new Uint8Array(data.length);
            for (var i = 0; i < data.length; i++) {
                bytes[i] = data.charCodeAt(i);
            }
            var blob = new Blob([bytes.buffer], { type: "application/octet-stream" });
            navigator.msSaveBlob(blob, filename);
        }
        else {
            var link = document.createElement('a');
            link.download = filename;
            link.href = "data:application/octet-stream;base64," + bytesBase64;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    },
    destroy: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.destroy();
        }
    },
    validation: function (element, results, isAdd) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.editModule.createTooltip(results, isAdd);
        }
    },
    focusCell: function (element, field, isAdd) {
        if (isAdd && !isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance) && element.blazor__instance.options.frozenColumns) {
            element.querySelector('.e-frozencontent').style.height =
                element.querySelector('.e-movablecontent').getBoundingClientRect().height + 'px';
        }
        var complexField = "#" + field.replace(/[.]/g, "___");
        if (field === "" && element.querySelector("input.e-boolcell")) {
            element.querySelector("input.e-boolcell").focus();
        }
        else if (field !== "" && element.querySelector(complexField)) {
            element.querySelector(complexField).focus();
        }
    },
    setFrozenHeight: function (element) {
        element.querySelector('.e-frozencontent').style.height =
            element.querySelector('.e-movablecontent').offsetHeight - getScrollBarWidth() + 'px';
    },
    printGrid: function (element) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.print();
        }
    },
    updateMediaColumns: function (element, mediaColumnsUid) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.columnChooserModule.updateMediaColumns(mediaColumnsUid);
        }
    },
    copyToClipBoard: function (element, withHeader) {
        if (!isNullOrUndefined(element) && !isNullOrUndefined(element.blazor__instance)) {
            element.blazor__instance.clipboardModule.copy(withHeader);
        }
    },
    gridFocus: function (element) {
        if (!isNullOrUndefined(element)) {
            element.focus();
        }
    },
    isMacDevice: function () {
        return navigator.userAgent.indexOf("Mac OS") !== -1;
    },
};
export default Grid;
