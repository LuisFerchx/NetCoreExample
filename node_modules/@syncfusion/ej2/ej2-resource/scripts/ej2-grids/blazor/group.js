import { Draggable, Droppable } from '@syncfusion/ej2-base';
import { createElement, remove, classList } from '@syncfusion/ej2-base';
import { isNullOrUndefined } from '@syncfusion/ej2-base';
import { parentsUntil } from './util';
var Group = (function () {
    function Group(parent) {
        var _this = this;
        this.visualElement = createElement('div', {
            className: 'e-cloneproperties e-dragclone e-gdclone',
            styles: 'line-height:23px', attrs: { action: 'grouping' }
        });
        this.helper = function (e) {
            var gObj = _this.parent;
            var target = e.sender.target;
            var element = target.classList.contains('e-groupheadercell') ? target :
                parentsUntil(target, 'e-groupheadercell');
            if (!element || (!target.classList.contains('e-drag') && _this.parent.options.groupReordering)) {
                return false;
            }
            _this.column = gObj.getColumnByField(element.firstElementChild.getAttribute('ej-mappingname'));
            _this.visualElement.textContent = element.textContent;
            _this.visualElement.style.width = element.offsetWidth + 2 + 'px';
            _this.visualElement.style.height = element.offsetHeight + 2 + 'px';
            _this.visualElement.setAttribute('e-mappinguid', _this.column.uid);
            gObj.element.appendChild(_this.visualElement);
            return _this.visualElement;
        };
        this.dragStart = function (e) {
            _this.parent.element.classList.add('e-ungroupdrag');
            document.body.classList.add('e-prevent-select');
            e.bindEvents(e.dragElement);
        };
        this.drag = function (e) {
            var target = e.target;
            var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');
            if (!_this.parent.options.groupReordering) {
                classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
                if (!(parentsUntil(target, 'e-gridcontent') || parentsUntil(target, 'e-headercell'))) {
                    classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
                }
            }
        };
        this.dragStop = function (e) {
            document.body.classList.remove('e-prevent-select');
            _this.parent.element.classList.remove('e-ungroupdrag');
            var preventDrop = !(parentsUntil(e.target, 'e-gridcontent') || parentsUntil(e.target, 'e-gridheader'));
            if (preventDrop) {
                remove(e.helper);
                return;
            }
        };
        this.drop = function (e) {
            var gObj = _this.parent;
            var column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));
            gObj.element.querySelector('.e-groupdroparea').classList.remove('e-hover');
            remove(e.droppedElement);
            _this.parent.element.querySelector('.e-groupdroparea').removeAttribute("aria-dropeffect");
            _this.parent.element.querySelector('[aria-grabbed=true]').setAttribute("aria-grabbed", 'false');
            if (isNullOrUndefined(column) || column.allowGrouping === false
                || parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !==
                    gObj.element.getAttribute('id')) {
                return;
            }
            gObj.dotNetRef.invokeMethodAsync("GroupColumn", column.field, 'Group');
        };
        this.parent = parent;
        if (this.parent.options.allowGrouping && this.parent.options.showDropArea) {
            this.initDragAndDrop();
        }
    }
    Group.prototype.columnDrag = function (e) {
        if (this.parent.options.groupReordering) {
        }
        var gObj = this.parent;
        var cloneElement = this.parent.element.querySelector('.e-cloneproperties');
        classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
        if (!parentsUntil(e.target, 'e-groupdroparea') &&
            !(this.parent.options.groupReordering && parentsUntil(e.target, 'e-headercell'))) {
            classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
        }
        e.target.classList.contains('e-groupdroparea') ?
            gObj.element.querySelector('.e-groupdroparea').classList.add('e-hover') :
            gObj.element.querySelector('.e-groupdroparea').classList.remove('e-hover');
    };
    Group.prototype.columnDragStart = function (e) {
        if (e.target.classList.contains('e-stackedheadercell')) {
            return;
        }
        var dropArea = this.parent.element.querySelector('.e-groupdroparea');
        if (dropArea) {
            dropArea.setAttribute("aria-dropeffect", "copy");
        }
        var element = e.target.classList.contains('e-headercell') ? e.target : parentsUntil(e.target, 'e-headercell');
        element.setAttribute("aria-grabbed", 'true');
    };
    Group.prototype.columnDrop = function (e) {
        var gObj = this.parent;
        if (e.droppedElement.getAttribute('action') === 'grouping') {
            var column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));
            if (isNullOrUndefined(column) || column.allowGrouping === false
                || parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !==
                    gObj.element.getAttribute('id')) {
                return;
            }
            gObj.dotNetRef.invokeMethodAsync("GroupColumn", column.field, 'Ungroup');
        }
    };
    Group.prototype.initDragAndDrop = function () {
        this.initializeGHeaderDrop();
        this.initializeGHeaderDrag();
    };
    Group.prototype.initializeGHeaderDrag = function () {
        var ele = this.parent.element.querySelector('.e-groupdroparea');
        if (!ele) {
            return;
        }
        var drag = new Draggable(ele, {
            dragTarget: this.parent.options.groupReordering ? '.e-drag' : '.e-groupheadercell',
            distance: this.parent.options.groupReordering ? -10 : 5,
            helper: this.helper,
            dragStart: this.dragStart,
            drag: this.drag,
            dragStop: this.dragStop,
            isPreventSelect: false
        });
    };
    Group.prototype.initializeGHeaderDrop = function () {
        var gObj = this.parent;
        var ele = this.parent.element.querySelector('.e-groupdroparea');
        if (!ele) {
            return;
        }
        var drop = new Droppable(ele, {
            accept: '.e-dragclone',
            drop: this.drop
        });
    };
    Group.prototype.getModuleName = function () {
        return 'group';
    };
    Group.prototype.getGHeaderCell = function (field) {
        if (this.element && this.element.querySelector('[ej-mappingname="' + field + '"]')) {
            return this.element.querySelector('[ej-mappingname="' + field + '"]').parentElement;
        }
        return null;
    };
    return Group;
}());
export { Group };
