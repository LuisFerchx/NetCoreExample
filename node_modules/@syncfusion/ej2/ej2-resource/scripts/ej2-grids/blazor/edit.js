import { closest, isNullOrUndefined } from '@syncfusion/ej2-base';
import { calculateRelativeBasedPosition } from '@syncfusion/ej2-popups';
import { getScrollBarWidth } from './util';
var Edit = (function () {
    function Edit(parent) {
        this.parent = parent;
    }
    Edit.prototype.createTooltip = function (results, isAdd) {
        var toolTipPos = {};
        var arrowPosition;
        for (var i = 0; i < results.length; i++) {
            var gcontent = this.parent.getContent();
            if (this.parent.options.frozenColumns) {
                gcontent = this.parent.getContent().querySelector('.e-movablecontent');
            }
            var name_1 = results[i]['fieldName'];
            var message = results[i]['message'];
            name_1 = name_1.replace(/[.]/g, "___");
            var element = this.parent.element.querySelector("#" + name_1) ||
                document.querySelector("#" + name_1);
            var isScroll = gcontent.scrollHeight > gcontent.clientHeight || gcontent.scrollWidth > gcontent.clientWidth;
            var isInline = this.parent.options.editMode !== 'Dialog';
            if (!element) {
                return;
            }
            var td = closest(element, '.e-rowcell');
            var row = closest(element, '.e-row');
            var fCont = this.parent.getContent().querySelector('.e-frozencontent');
            var isFHdr = void 0;
            var isFHdrLastRow = false;
            var validationForBottomRowPos = void 0;
            var isBatchModeLastRow = false;
            var viewPortRowCount = Math.round(this.parent.getContent().clientHeight / this.parent.getRowHeight()) - 1;
            var rows = [].slice.call(this.parent.getContent().querySelectorAll('.e-row'));
            if (this.parent.options.editMode === 'Batch') {
                if (viewPortRowCount > 1 && rows.length >= viewPortRowCount
                    && rows[rows.length - 1].getAttribute('aria-rowindex') === row.getAttribute('aria-rowindex')) {
                    isBatchModeLastRow = true;
                }
            }
            if (isInline) {
                if (this.parent.options.frozenRows) {
                }
                if (isFHdrLastRow || (viewPortRowCount > 1 && rows.length >= viewPortRowCount &&
                    (this.parent.options.newRowPosition === 'Bottom' && isAdd || (!isNullOrUndefined(td)
                        && td.classList.contains('e-lastrowcell') && !row.classList.contains('e-addedrow')))) || isBatchModeLastRow) {
                    validationForBottomRowPos = true;
                }
            }
            var table = isInline ?
                (isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable()) :
                document.querySelector('#' + this.parent.element.id + '_dialogEdit_wrapper').querySelector('.e-dlg-content');
            var client = table.getBoundingClientRect();
            var left = isInline ?
                this.parent.element.getBoundingClientRect().left : client.left;
            var input = closest(element, 'td');
            var inputClient = input ? input.getBoundingClientRect() : element.parentElement.getBoundingClientRect();
            var div = this.parent.element.querySelector("#" + name_1 + "_Error") ||
                document.querySelector("#" + name_1 + "_Error");
            div.style.top =
                ((isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top
                    - (this.parent.options.frozenColumns ? fCont.scrollTop : 0)) + table.scrollTop + 9) + 'px';
            div.style.left =
                (inputClient.left - left + table.scrollLeft + inputClient.width / 2) + 'px';
            div.style.maxWidth = inputClient.width - 4 + 'px';
            if (isInline && client.left < left) {
                div.style.left = parseInt(div.style.left, 10) - client.left + left + 'px';
            }
            var arrow = void 0;
            if (validationForBottomRowPos) {
                arrow = div.querySelector('.e-tip-bottom');
            }
            else {
                arrow = div.querySelector('.e-tip-top');
            }
            if ((this.parent.options.frozenColumns || this.parent.options.frozenRows) && this.parent.options.editMode !== 'Dialog') {
                var getEditCell = this.parent.options.editMode === 'Normal' ?
                    closest(element, '.e-editcell') : closest(element, '.e-table');
                getEditCell.style.position = 'relative';
                div.style.position = 'absolute';
            }
            div.style.display = "block";
            div.querySelector(".e-error").innerText = message;
            if (!validationForBottomRowPos && isInline && gcontent.getBoundingClientRect().bottom < inputClient.bottom + inputClient.height) {
                gcontent.scrollTop = gcontent.scrollTop + div.offsetHeight + arrow.scrollHeight;
            }
            var lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue('font-size'), 10);
            if (div.getBoundingClientRect().width < inputClient.width &&
                div.querySelector('label').getBoundingClientRect().height / (lineHeight * 1.2) >= 2) {
                div.style.width = div.style.maxWidth;
            }
            if ((this.parent.options.frozenColumns || this.parent.options.frozenRows)
                && (this.parent.options.editMode === 'Normal' || this.parent.options.editMode === 'Batch')) {
                div.style.left = input.offsetLeft + (input.offsetWidth / 2 - div.offsetWidth / 2) + 'px';
            }
            else {
                div.style.left = (parseInt(div.style.left, 10) - div.offsetWidth / 2) + 'px';
            }
            if (isInline && !isScroll && !this.parent.options.allowPaging || this.parent.options.frozenColumns
                || this.parent.options.frozenRows) {
                gcontent.style.position = 'static';
                var pos = calculateRelativeBasedPosition(input, div);
                div.style.top = pos.top + inputClient.height + 9 + 'px';
            }
            if (validationForBottomRowPos) {
                if (isScroll && !this.parent.options.frozenColumns && this.parent.options.height !== 'auto' && !this.parent.options.frozenRows) {
                    var scrollWidth = gcontent.scrollWidth > gcontent.offsetWidth ? getScrollBarWidth() : 0;
                    div.style.bottom = (parseInt(this.parent.options.height) - gcontent.querySelector('table').offsetHeight
                        - scrollWidth) + inputClient.height + 9 + 'px';
                }
                else {
                    div.style.bottom = inputClient.height + 9 + 'px';
                }
                div.style.top = null;
            }
            arrowPosition = validationForBottomRowPos ? 'bottom' : 'top';
            toolTipPos[name_1] = "top: " + div.style.top + "; bottom: " + div.style.bottom + "; left: " + div.style.left + "; \n            max-width: " + div.style.maxWidth + "; width: " + div.style.width + "; text-align: center; position: " + div.style.position + ";";
        }
        this.parent.dotNetRef.invokeMethodAsync("ShowValidationPopup", toolTipPos, arrowPosition);
    };
    return Edit;
}());
export { Edit };
