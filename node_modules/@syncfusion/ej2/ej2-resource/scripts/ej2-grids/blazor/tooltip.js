import { attributes, createElement, isNullOrUndefined, getUniqueID, Browser, EventHandler } from "@syncfusion/ej2-base";
import { calculatePosition } from "@syncfusion/ej2-popups";
import { parentsUntil } from "./util";
var CustomToolTip = (function () {
    function CustomToolTip(parent) {
        this.parent = parent;
        this.wireEvents();
    }
    CustomToolTip.prototype.wireEvents = function () {
        EventHandler.add(this.parent.getContent(), 'scroll', this.scrollHandler, this);
        EventHandler.add(this.parent.element, 'mousemove', this.mouseMoveHandler, this);
        EventHandler.add(this.parent.element, 'mouseout', this.mouseMoveHandler, this);
        EventHandler.add(this.parent.element, 'keydown', this.onKeyPressed, this);
    };
    CustomToolTip.prototype.unWireevents = function () {
        EventHandler.remove(this.parent.getContent(), 'scroll', this.scrollHandler);
        EventHandler.remove(this.parent.element, 'mousemove', this.mouseMoveHandler);
        EventHandler.remove(this.parent.element, 'mouseout', this.mouseMoveHandler);
        EventHandler.remove(this.parent.element, 'keydown', this.onKeyPressed);
    };
    CustomToolTip.prototype.open = function (target) {
        this.close();
        this.ctrlId = getUniqueID(this.parent.element.getAttribute('id'));
        if (isNullOrUndefined(this.toolTipElement)) {
            this.toolTipElement = createElement('div', {
                className: "e-tooltip-wrap e-popup e-lib e-control e-popup-open",
                styles: 'width: "auto", height: "auto", position: "absolute"',
                attrs: { role: "tooltip", 'aria-hidden': 'false', 'id': this.ctrlId + '_content' }
            });
        }
        attributes(target, { 'aria-describedby': this.ctrlId + "_content", 'data-tooltip-id': this.ctrlId + "_content" });
        this.renderToolTip();
        this.setPosition(target);
    };
    CustomToolTip.prototype.renderToolTip = function () {
        var content = createElement('div', { className: "e-tip-content" });
        content.innerHTML = this.content;
        this.toolTipElement.appendChild(content);
        var arrow = createElement('div', { className: "e-arrow-tip e-tip-bottom", styles: 'top: 99.9%' });
        arrow.appendChild(createElement('div', { className: "e-arrow-tip-outer e-tip-bottom" }));
        arrow.appendChild(createElement('div', { className: "e-arrow-tip-inner e-tip-bottom", styles: 'top: -6px' }));
        this.toolTipElement.appendChild(arrow);
        document.body.appendChild(this.toolTipElement);
    };
    CustomToolTip.prototype.setPosition = function (target) {
        var tooltipPostion = { top: 0, left: 0 };
        var arrow = this.toolTipElement.querySelector('.e-arrow-tip');
        var popUpPosition = calculatePosition(target, 'Center', 'Top');
        tooltipPostion.top -= this.toolTipElement.offsetHeight + arrow.offsetHeight;
        tooltipPostion.left -= this.toolTipElement.offsetWidth / 2;
        this.toolTipElement.style.top = popUpPosition.top + tooltipPostion.top + 'px';
        this.toolTipElement.style.left = popUpPosition.left + tooltipPostion.left + 'px';
    };
    CustomToolTip.prototype.close = function () {
        if (this.toolTipElement) {
            var prevTarget = this.parent.element.querySelector("[aria-describedby=\"" + this.ctrlId + '_content' + "\"]");
            prevTarget.removeAttribute('aria-describedby');
            prevTarget.removeAttribute('data-tooltip-id');
            document.getElementById(this.ctrlId + '_content').remove();
            this.toolTipElement = null;
        }
    };
    CustomToolTip.prototype.getTooltipStatus = function (element) {
        var width;
        var headerTable = this.parent.getHeaderTable();
        var contentTable = this.parent.getContentTable();
        var headerDivTag = 'e-gridheader';
        var contentDivTag = 'e-gridcontent';
        var htable = this.createTable(headerTable, headerDivTag, 'header');
        var ctable = this.createTable(contentTable, contentDivTag, 'content');
        var td = element;
        var table = element.classList.contains('e-headercell') ? htable : ctable;
        var ele = element.classList.contains('e-headercell') ? 'th' : 'tr';
        table.querySelector(ele).className = element.className;
        table.querySelector(ele).innerHTML = element.innerHTML;
        width = table.querySelector(ele).getBoundingClientRect().width;
        document.body.removeChild(htable);
        document.body.removeChild(ctable);
        if (width > element.getBoundingClientRect().width) {
            return true;
        }
        return false;
    };
    CustomToolTip.prototype.mouseMoveHandler = function (e) {
        if (this.isEllipsisTooltip()) {
            var element = parentsUntil(e.target, 'e-ellipsistooltip');
            if (this.prevElement !== element || e.type === 'mouseout') {
                this.close();
            }
            var tagName = e.target.tagName;
            var elemNames = ['A', 'BUTTON', 'INPUT'];
            if (element && e.type !== 'mouseout' && !(Browser.isDevice && elemNames.indexOf(tagName) !== -1)) {
                if (element.getAttribute('aria-describedby')) {
                    return;
                }
                if (this.getTooltipStatus(element)) {
                    if (element.getElementsByClassName('e-headertext').length) {
                        this.content = element.getElementsByClassName('e-headertext')[0].innerText;
                    }
                    else {
                        this.content = element.innerText;
                    }
                    this.prevElement = element;
                    this.open(element);
                }
            }
        }
        this.hoverFrozenRows(e);
    };
    CustomToolTip.prototype.hoverFrozenRows = function (e) {
        if (this.parent.options.frozenColumns) {
            var row = parentsUntil(e.target, 'e-row');
            var frozenHover = [].slice.call(this.parent.element.querySelectorAll('.e-frozenhover'));
            if (frozenHover.length && e.type === 'mouseout') {
                for (var i = 0; i < frozenHover.length; i++) {
                    frozenHover[i].classList.remove('e-frozenhover');
                }
            }
            else if (row) {
                var rows = [].slice.call(this.parent.element.querySelectorAll('tr[aria-rowindex="' + row.getAttribute('aria-rowindex') + '"]'));
                rows.splice(rows.indexOf(row), 1);
                if (row.getAttribute('aria-selected') != 'true') {
                    rows[0].classList.add('e-frozenhover');
                }
                else {
                    rows[0].classList.remove('e-frozenhover');
                }
            }
        }
    };
    CustomToolTip.prototype.isEllipsisTooltip = function () {
        var cols = this.parent.getColumns();
        if (this.parent.options.clipMode === 'EllipsisWithTooltip') {
            return true;
        }
        for (var i = 0; i < cols.length; i++) {
            if (cols[i].clipMode === 'EllipsisWithTooltip') {
                return true;
            }
        }
        return false;
    };
    CustomToolTip.prototype.scrollHandler = function () {
        if (this.isEllipsisTooltip()) {
            this.close();
        }
    };
    CustomToolTip.prototype.createTable = function (table, tag, type) {
        var myTableDiv = createElement('div');
        myTableDiv.className = this.parent.element.className;
        myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';
        var mySubDiv = createElement('div');
        mySubDiv.className = tag;
        var myTable = createElement('table');
        myTable.className = table.className;
        myTable.style.cssText = 'table-layout: auto;width: auto';
        var ele = (type === 'header') ? 'th' : 'td';
        var myTr = createElement('tr');
        var mytd = createElement(ele);
        myTr.appendChild(mytd);
        myTable.appendChild(myTr);
        mySubDiv.appendChild(myTable);
        myTableDiv.appendChild(mySubDiv);
        document.body.appendChild(myTableDiv);
        return myTableDiv;
    };
    CustomToolTip.prototype.onKeyPressed = function (e) {
        if (e.key === 'Tab' || e.key === 'ShiftTab') {
            this.close();
        }
    };
    CustomToolTip.prototype.destroy = function () {
        this.close();
        this.unWireevents();
    };
    return CustomToolTip;
}());
export { CustomToolTip };
