import { formatUnit, Browser, isNullOrUndefined, EventHandler } from '@syncfusion/ej2-base';
import { InterSectionObserver } from './intersection-observer';
import { isGroupAdaptive, getScrollBarWidth } from './util';
var VirtualContentRenderer = (function () {
    function VirtualContentRenderer(parent) {
        var _this_1 = this;
        this.prevHeight = 0;
        this.preStartIndex = 0;
        this.preventEvent = false;
        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'Filtering', 'Searching', 'Grouping', 'Ungrouping'];
        this.offsets = {};
        this.tmpOffsets = {};
        this.offsetKeys = [];
        this.currentInfo = {};
        this.blazorActiveKey = '';
        this.nextRowToNavigate = 0;
        this.virtualEle = new VirtualElementHandler();
        this.startIndex = 0;
        this.bindScrollEvent = function () {
            _this_1.observer.observe(function (scrollArgs) { return _this_1.scrollListener(scrollArgs); }, _this_1.onEntered());
            var gObj = _this_1.parent;
            if (gObj.options.enablePersistence && gObj.scrollPosition) {
                _this_1.content.scrollTop = gObj.scrollPosition.top;
                var scrollValues = { direction: 'down', sentinel: _this_1.observer.sentinelInfo.down,
                    offset: gObj.scrollPosition, focusElement: gObj.element };
                _this_1.scrollListener(scrollValues);
                if (gObj.options.enableColumnVirtualization) {
                    _this_1.content.scrollLeft = gObj.scrollPosition.left;
                }
            }
        };
        this.parent = parent;
        this.contentPanel = this.parent.element.querySelector(".e-gridcontent");
        this.vHelper = new VirtualHelper(parent);
        this.addEventListener();
    }
    VirtualContentRenderer.prototype.getPanel = function () {
        return this.contentPanel;
    };
    VirtualContentRenderer.prototype.getTable = function () {
        return this.contentPanel.querySelector('.e-table');
    };
    VirtualContentRenderer.prototype.renderTable = function () {
        this.header = this.parent.virtualHeaderModule;
        this.virtualEle.table = this.getTable();
        this.virtualEle.content = this.content = this.getPanel().querySelector('.e-content');
        this.virtualEle.renderWrapper(Number(this.parent.options.height));
        this.virtualEle.renderPlaceHolder();
        var content = this.content;
        var opt = {
            container: content, pageHeight: this.getBlockHeight() * 2, debounceEvent: true,
            axes: this.parent.options.enableColumnVirtualization ? ['X', 'Y'] : ['Y']
        };
        this.observer = new InterSectionObserver(this.virtualEle.wrapper, opt);
        this.parent.dotNetRef.invokeMethodAsync("SetRowHeight", this.parent.getRowHeight());
    };
    VirtualContentRenderer.prototype.addEventListener = function () {
        EventHandler.add(this.parent.element, 'keydown', this.keyDownHandler, this);
    };
    VirtualContentRenderer.prototype.removeEventListener = function () {
        EventHandler.remove(this.parent.element, 'keydown', this.keyDownHandler);
    };
    VirtualContentRenderer.prototype.ensurePageSize = function () {
        var rowHeight = this.parent.getRowHeight();
        var vHeight = this.parent.options.height.toString().indexOf('%') < 0 ? this.parent.options.height :
            this.parent.element.getBoundingClientRect().height;
        var blockSize = ~~(vHeight / rowHeight);
        var height = blockSize * 2;
        var size = this.parent.options.pageSize;
        var actualPageSize = size < height ? height : size;
        this.parent.dotNetRef.invokeMethodAsync("SetPageSizeAndCIndex", {
            pageSize: actualPageSize,
            startColumnIndex: this.startColIndex,
            endColumnIndex: this.endColIndex,
            VTableWidth: this.getColumnOffset(this.endColIndex) - this.getColumnOffset(this.startColIndex - 1) + ''
        });
        this.parent.options.pageSize = actualPageSize;
        this.observer.options.pageHeight = this.getBlockHeight() * 2;
    };
    VirtualContentRenderer.prototype.scrollListener = function (scrollArgs) {
        if (this.parent.options.enablePersistence) {
            this.parent.scrollPosition = scrollArgs.offset;
        }
        if (this.preventEvent) {
            this.preventEvent = false;
            return;
        }
        var info = scrollArgs.sentinel;
        var pStartIndex = this.preStartIndex;
        var previousColIndexes = this.parent.getColumnIndexesInView();
        var viewInfo = this.currentInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset);
        if (this.parent.options.enableColumnVirtualization &&
            (JSON.stringify(previousColIndexes) !== JSON.stringify(viewInfo.columnIndexes))) {
            var translateX = this.getColumnOffset(this.startColIndex - 1);
            var width = this.getColumnOffset(this.endColIndex) - translateX + '';
            this.parent.dotNetRef.invokeMethodAsync("VirtualRefresh", {
                requestType: 'virtualscroll',
                startColumnIndex: viewInfo.columnIndexes[0],
                endColumnIndex: viewInfo.columnIndexes[viewInfo.columnIndexes.length - 1],
                axis: 'X',
                VTablewidth: width,
                translateX: this.getColumnOffset(viewInfo.columnIndexes[0] - 1),
                translateY: this.parent.options.enableVirtualMaskRow ? this.translateMaskY : 0
            });
            this.setColVTableWidthAndTranslate();
        }
        this.parent.setColumnIndexesInView(this.parent.options.enableColumnVirtualization ? viewInfo.columnIndexes : []);
        this.nextRowToNavigate = this.blazorActiveKey != '' ? this.nextRowToNavigate : 0;
        if (this.preStartIndex !== pStartIndex) {
            this.parent.options.currentPage = viewInfo.currentPage;
            this.parent.dotNetRef.invokeMethodAsync("VirtualRefresh", {
                requestType: 'virtualscroll',
                nextRowToNavigate: this.nextRowToNavigate,
                virtualStartIndex: viewInfo.startIndex,
                virtualEndIndex: viewInfo.endIndex,
                axis: 'Y',
                RHeight: this.parent.getRowHeight()
            });
        }
        this.prevInfo = viewInfo;
        this.blazorActiveKey = '';
    };
    VirtualContentRenderer.prototype.setColVTableWidthAndTranslate = function (args) {
        if (this.parent.options.enableColumnVirtualization && this.prevInfo &&
            (JSON.stringify(this.currentInfo.columnIndexes) !==
                JSON.stringify(this.prevInfo.columnIndexes)) || ((args && args.refresh))) {
            var translateX = this.getColumnOffset(this.startColIndex - 1);
            var width = this.getColumnOffset(this.endColIndex) - translateX + '';
            this.header.virtualEle.setWrapperWidth(width);
            this.virtualEle.setWrapperWidth(width);
            this.header.virtualEle.adjustTable(translateX, 0);
            this.parent.getContentTable().parentElement.style.width = width + 'px';
        }
    };
    VirtualContentRenderer.prototype.refreshOnDataChange = function () {
        this.getPanel().firstElementChild.scrollTop = 0;
        this.getPanel().firstElementChild.scrollLeft = 0;
        if (this.parent.options.enableColumnVirtualization) {
            this.header.virtualEle.adjustTable(0, 0);
        }
        this.virtualEle.adjustTable(0, 0);
        this.refreshOffsets();
        this.refreshVirtualElement();
    };
    VirtualContentRenderer.prototype.keyDownHandler = function (e) {
        this.blazorActiveKey = (e.key === 'ArrowDown' || e.key === 'ArrowUp') ? e.key : '';
        if (!isNullOrUndefined(this.observer))
            this.observer.blazorActiveKey = this.blazorActiveKey;
    };
    VirtualContentRenderer.prototype.focusCell = function (cell, action) {
        cell.focus({ preventScroll: true });
        var rowHeight = this.parent.getRowHeight();
        var content = this.parent.getContent();
        if (action == "MoveDownCell" && cell.getBoundingClientRect().bottom > content.getBoundingClientRect().top +
            content.getBoundingClientRect().height - getScrollBarWidth()) {
            content.scrollTop = content.scrollTop + rowHeight;
        }
        else if (action == "MoveUpCell" &&
            cell.getBoundingClientRect().bottom < content.getBoundingClientRect().top + rowHeight) {
            this.isScrollFromFocus = true;
            content.scrollTop = content.scrollTop - rowHeight;
        }
    };
    VirtualContentRenderer.prototype.getInfoFromView = function (direction, info, e) {
        var isBlockAdded = false;
        var infoType = { direction: direction, sentinelInfo: info, offsets: e,
            startIndex: this.preStartIndex, endIndex: this.preEndIndex };
        var vHeight = this.parent.options.height.toString().indexOf('%') < 0 ? this.content.getBoundingClientRect().height :
            this.parent.element.getBoundingClientRect().height;
        infoType.page = this.getPageFromTop(e.top + vHeight, infoType);
        infoType.blockIndexes = this.vHelper.getBlockIndexes(infoType.page);
        infoType.columnIndexes = info.axis === 'X' ? this.vHelper.getColumnIndexes() : this.parent.getColumnIndexesInView();
        var rowHeight = this.parent.getRowHeight();
        var exactTopIndex = e.top / rowHeight;
        var noOfInViewIndexes = vHeight / rowHeight;
        var exactEndIndex = exactTopIndex + noOfInViewIndexes;
        var pageSizeBy4 = this.parent.options.pageSize / 4;
        var totalCount = this.parent.options.groupCount ? this.getVisibleGroupedRowCount() : this.count;
        if (infoType.direction === 'down' && !this.isScrollFromFocus) {
            var sIndex = Math.round(exactEndIndex) - Math.round((pageSizeBy4));
            if (this.parent.options.enableVirtualMaskRow) {
                noOfInViewIndexes = Math.ceil(noOfInViewIndexes) - 1;
                var differenceOfRowIndex = Math.ceil(exactTopIndex) - this.preStartIndex;
                if (differenceOfRowIndex >= noOfInViewIndexes) {
                    infoType.startIndex = Math.ceil(exactTopIndex) >= 0 ? Math.ceil(exactTopIndex) : 0;
                    var eIndex = infoType.startIndex + this.parent.options.pageSize;
                    infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
                    infoType.startIndex = eIndex >= totalCount ? infoType.endIndex - this.parent.options.pageSize : infoType.startIndex;
                    infoType.currentPage = Math.ceil(infoType.endIndex / this.parent.options.pageSize);
                    this.nextRowToNavigate = Math.floor(exactEndIndex - 1);
                    this.isScrollFromFocus = false;
                    this.preStartIndex = this.startIndex = infoType.startIndex;
                    this.preEndIndex = infoType.endIndex;
                }
                else {
                    this.isScrollFromFocus = false;
                    this.preStartIndex = this.preStartIndex;
                    this.preEndIndex = this.preEndIndex;
                }
            }
            if (!this.parent.options.enableVirtualMaskRow && isNullOrUndefined(infoType.startIndex) || (exactEndIndex >
                (infoType.startIndex + Math.round((this.parent.options.pageSize / 2 + pageSizeBy4)))
                && infoType.endIndex !== totalCount)) {
                infoType.startIndex = sIndex >= 0 ? Math.round(sIndex) : 0;
                infoType.startIndex = infoType.startIndex > exactTopIndex ? Math.floor(exactTopIndex) : infoType.startIndex;
                var eIndex = infoType.startIndex + this.parent.options.pageSize;
                infoType.startIndex = eIndex < exactEndIndex ? (Math.ceil(exactEndIndex) - this.parent.options.pageSize)
                    : infoType.startIndex;
                infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
                infoType.startIndex = eIndex >= totalCount ?
                    infoType.endIndex - this.parent.options.pageSize : infoType.startIndex;
                infoType.currentPage = Math.ceil(infoType.endIndex / this.parent.options.pageSize);
                this.nextRowToNavigate = Math.floor(exactEndIndex - 1);
            }
        }
        else if (infoType.direction === 'up') {
            if (infoType.startIndex && infoType.endIndex || this.parent.options.enableVirtualMaskRow) {
                var loadAtIndex = Math.round(((infoType.startIndex * rowHeight) + (pageSizeBy4 * rowHeight)) / rowHeight);
                if (this.parent.options.enableVirtualMaskRow) {
                    noOfInViewIndexes = Math.ceil(noOfInViewIndexes);
                    if (exactTopIndex < loadAtIndex || Math.ceil(exactTopIndex) > this.preStartIndex) {
                        var startIndex = Math.ceil(exactTopIndex) > 0 ? Math.ceil(exactTopIndex) : 0;
                        var customStartIndex = totalCount - this.parent.options.pageSize - (this.parent.options.pageSize / 2);
                        if (exactTopIndex < totalCount && customStartIndex < exactTopIndex) {
                            infoType.startIndex = startIndex > 0 ? startIndex - (this.parent.options.pageSize / 2) : 0;
                        }
                        else {
                            infoType.startIndex = startIndex > 0 ? startIndex + this.parent.options.pageSize > totalCount ? totalCount - this.parent.options.pageSize : startIndex : 0;
                        }
                        infoType.startIndex = infoType.startIndex > 0 ? infoType.startIndex - 1 : infoType.startIndex;
                        var eIndex = infoType.startIndex + this.parent.options.pageSize;
                        infoType.endIndex = infoType.startIndex < 0 ? this.parent.options.pageSize : eIndex < totalCount ? eIndex : totalCount;
                        infoType.currentPage = Math.ceil(infoType.startIndex / this.parent.options.pageSize);
                        this.nextRowToNavigate = Math.ceil(exactTopIndex + 1);
                        this.isScrollFromFocus = false;
                        this.preStartIndex = this.startIndex = infoType.startIndex;
                        this.preEndIndex = infoType.endIndex;
                    }
                    else {
                        this.isScrollFromFocus = false;
                        this.preStartIndex = this.preStartIndex;
                        this.preEndIndex = this.preEndIndex;
                    }
                }
                if (exactTopIndex < loadAtIndex && !this.parent.options.enableVirtualMaskRow) {
                    var idxAddedToExactTop = (pageSizeBy4) > noOfInViewIndexes ? pageSizeBy4 :
                        (noOfInViewIndexes + noOfInViewIndexes / 4);
                    var eIndex = Math.round(exactTopIndex + idxAddedToExactTop);
                    infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
                    var sIndex = infoType.endIndex - this.parent.options.pageSize;
                    infoType.startIndex = sIndex > 0 ? sIndex : 0;
                    infoType.endIndex = sIndex < 0 ? this.parent.options.pageSize : infoType.endIndex;
                    infoType.currentPage = Math.ceil(infoType.startIndex / this.parent.options.pageSize);
                    this.nextRowToNavigate = Math.ceil(exactTopIndex + 1);
                }
            }
        }
        if (!this.parent.options.enableVirtualMaskRow) {
            this.isScrollFromFocus = false;
            this.preStartIndex = this.startIndex = infoType.startIndex;
            this.preEndIndex = infoType.endIndex;
        }
        return infoType;
    };
    VirtualContentRenderer.prototype.onDataReady = function () {
        var _this_1 = this;
        var _this = this;
        this.bindScrollEvent();
        this.count = this.parent.options.totalItemCount;
        this.maxPage = Math.ceil(this.count / this.parent.options.pageSize);
        if (['Refresh', 'Filtering', 'Searching', 'Grouping', 'Ungrouping', 'Reorder',
            'refresh', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder', null]
            .some(function (value) { return _this_1.parent.options.requestType === value; })) {
            this.refreshOffsets();
        }
        this.setVirtualHeight();
        this.resetScrollPosition(this.parent.options.requestType);
        this.setColVTableWidthAndTranslate();
        if (this.parent.options.enableVirtualMaskRow) {
            var yValue_1 = Math.min(Math.ceil(this.virtualEle.content.scrollTop), this.offsets[this.maxBlock]);
            if (yValue_1 == 0)
                yValue_1 = yValue_1 - (this.parent.options.pageSize * (this.parent.options.rowHeight ? this.parent.options.rowHeight : 35));
            else if (this.startIndex)
                yValue_1 = yValue_1 - (this.parent.options.pageSize * (this.parent.options.rowHeight ? this.parent.options.rowHeight : 35)) - 10;
            else
                yValue_1 = this.startIndex ? yValue_1 : 0 - (this.parent.options.pageSize * (this.parent.options.rowHeight ? this.parent.options.rowHeight : 35));
            setTimeout(function () {
                _this.translateMaskY = yValue_1;
                _this.translateMaskX = isNullOrUndefined(_this.translateMaskX) ? 0 : _this.translateMaskX;
                _this.virtualEle.wrapper.style.transform = "translate(" + _this.translateMaskX + "px," + yValue_1 + "px)";
            }, 0);
        }
        this.prevInfo = this.prevInfo ? this.prevInfo : this.vHelper.getData();
    };
    VirtualContentRenderer.prototype.setVirtualHeight = function () {
        var width = this.parent.options.enableColumnVirtualization ?
            this.getColumnOffset(this.parent.options.columns.length + this.parent.options.groupCount - 1) + 'px' : '100%';
        var virtualHeight = this.parent.options.groupCount
            ? (this.parent.options.visibleGroupedRowsCount * this.parent.getRowHeight()) : this.offsets[this.getTotalBlocks()];
        this.virtualEle.setVirtualHeight(virtualHeight, width);
        if (this.parent.options.enableColumnVirtualization) {
            this.header.virtualEle.setVirtualHeight(1, width);
        }
    };
    VirtualContentRenderer.prototype.getPageFromTop = function (sTop, info) {
        var _this_1 = this;
        var total = (isGroupAdaptive(this.parent)) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
        var page = 0;
        var extra = this.offsets[total] - this.prevHeight;
        this.offsetKeys.some(function (offset) {
            var iOffset = Number(offset);
            var border = sTop <= _this_1.offsets[offset] || (iOffset === total && sTop > _this_1.offsets[offset]);
            if (border) {
                info.block = iOffset % 2 === 0 ? 1 : 0;
                page = Math.max(1, Math.min(_this_1.vHelper.getPage(iOffset), _this_1.maxPage));
            }
            return border;
        });
        return page;
    };
    VirtualContentRenderer.prototype.getTranslateY = function (sTop, cHeight, info, isOnenter) {
        if (info === undefined) {
            info = { page: this.getPageFromTop(sTop + cHeight, {}) };
            info.blockIndexes = this.vHelper.getBlockIndexes(info.page);
        }
        var block = (info.blockIndexes[0] || 1) - 1;
        var translate = this.getOffset(block);
        var endTranslate = this.getOffset(info.blockIndexes[info.blockIndexes.length - 1]);
        if (isOnenter) {
            info = this.prevInfo;
        }
        var result = translate > sTop ?
            this.getOffset(block - 1) : endTranslate < (sTop + cHeight) ? this.getOffset(block + 1) : translate;
        var blockHeight = this.offsets[info.blockIndexes[info.blockIndexes.length - 1]] -
            this.tmpOffsets[info.blockIndexes[0]];
        if (result + blockHeight > this.offsets[isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks()] && this.parent.options.groupCount == 0) {
            result -= (result + blockHeight) - this.offsets[this.getTotalBlocks()];
        }
        return result;
    };
    VirtualContentRenderer.prototype.getOffset = function (block) {
        return Math.min(this.offsets[block] | 0, this.offsets[this.maxBlock] | 0);
    };
    VirtualContentRenderer.prototype.onEntered = function () {
        var _this_1 = this;
        return function (element, current, direction, e, isWheel, check) {
            if (Browser.isIE && !isWheel && check && !_this_1.preventEvent) {
            }
            var xAxis = current.axis === 'X';
            var top = _this_1.prevInfo.offsets ? _this_1.prevInfo.offsets.top : null;
            var height = _this_1.content.getBoundingClientRect().height;
            var x = _this_1.getColumnOffset(xAxis ? _this_1.vHelper.getColumnIndexes()[0] - 1 : _this_1.prevInfo.columnIndexes[0] - 1);
            var y = _this_1.getTranslateY(e.top, height, xAxis && top === e.top ? _this_1.prevInfo : undefined, true);
            if (_this_1.currentInfo && _this_1.currentInfo.startIndex && xAxis) {
                y = _this_1.currentInfo.startIndex * _this_1.parent.getRowHeight();
            }
            if (!_this_1.parent.options.enableVirtualMaskRow) {
                _this_1.virtualEle.adjustTable(x, Math.min(y, _this_1.offsets[_this_1.maxBlock]));
            }
            else if (_this_1.offsets[_this_1.maxBlock] > y) {
                _this_1.virtualEle.adjustTable(x, Math.min(direction == "right" || direction == "left" || direction == "down" ? _this_1.translateMaskY : y, _this_1.offsets[_this_1.maxBlock]));
            }
            if (xAxis) {
                _this_1.setColVTableWidthAndTranslate({ refresh: true });
            }
        };
    };
    VirtualContentRenderer.prototype.getBlockSize = function () {
        return this.parent.options.pageSize >> 1;
    };
    VirtualContentRenderer.prototype.getBlockHeight = function () {
        return this.getBlockSize() * this.parent.getRowHeight();
    };
    VirtualContentRenderer.prototype.getGroupedTotalBlocks = function () {
        var visibleRowCount = this.getVisibleGroupedRowCount();
        return Math.floor((visibleRowCount / this.getBlockSize()) < 1 ? 1 : visibleRowCount / this.getBlockSize());
    };
    VirtualContentRenderer.prototype.getVisibleGroupedRowCount = function () {
        var visibleRowCount = Number(this.virtualEle.placeholder.style.height.substring(0, this.virtualEle.placeholder.style.height.indexOf('p'))) / this.parent.getRowHeight();
        return visibleRowCount;
    };
    VirtualContentRenderer.prototype.getTotalBlocks = function () {
        return Math.ceil(this.count / this.getBlockSize());
    };
    VirtualContentRenderer.prototype.getColumnOffset = function (block) {
        return this.vHelper.cOffsets[block] | 0;
    };
    VirtualContentRenderer.prototype.resetScrollPosition = function (action) {
        if (this.actions.some(function (value) { return value === action; })) {
            var content = this.content;
            this.preventEvent = content.scrollTop !== 0;
            content.scrollTop = 0;
        }
    };
    VirtualContentRenderer.prototype.refreshOffsets = function () {
        var gObj = this.parent;
        var row = 0;
        var bSize = this.getBlockSize();
        var total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
        this.prevHeight = this.offsets[total];
        this.maxBlock = total % 2 === 0 ? total - 2 : total - 1;
        this.offsets = {};
        var vcRows = [];
        var cache = {};
        var blocks = Array.apply(null, Array(total)).map(function () { return ++row; });
        for (var i = 0; i < blocks.length; i++) {
            var tmp = (cache[blocks[i]] || []).length;
            var rem = !isGroupAdaptive(this.parent) ? this.count % bSize : (vcRows.length % bSize);
            var size = !isGroupAdaptive(this.parent) && blocks[i] in cache ?
                tmp * this.parent.getRowHeight() : rem && blocks[i] === total ? rem * this.parent.getRowHeight() :
                this.getBlockHeight();
            this.offsets[blocks[i]] = (this.offsets[blocks[i] - 1] | 0) + size;
            this.tmpOffsets[blocks[i]] = this.offsets[blocks[i] - 1] | 0;
        }
        this.offsetKeys = Object.keys(this.offsets);
        if (this.parent.options.enableColumnVirtualization) {
            this.vHelper.refreshColOffsets();
        }
    };
    VirtualContentRenderer.prototype.updateTransform = function (x, y) {
        var _this = this;
        setTimeout(function () {
            _this.translateMaskX = x;
            _this.virtualEle.adjustTable(x, _this.translateMaskY);
        }, 500);
    };
    VirtualContentRenderer.prototype.refreshColumnIndexes = function () {
        this.vHelper.refreshColOffsets();
        var colIndexes = this.vHelper.getColumnIndexes();
        this.parent.setColumnIndexesInView(colIndexes);
        this.parent.dotNetRef.invokeMethodAsync("SetColumnIndexes", colIndexes[0], colIndexes[colIndexes.length - 1]);
    };
    VirtualContentRenderer.prototype.refreshVirtualElement = function () {
        this.vHelper.refreshColOffsets();
        this.setVirtualHeight();
    };
    return VirtualContentRenderer;
}());
export { VirtualContentRenderer };
var VirtualHeaderRenderer = (function () {
    function VirtualHeaderRenderer(parent) {
        this.virtualEle = new VirtualElementHandler();
        this.parent = parent;
        this.vHelper = new VirtualHelper(this.parent);
        this.headerPanel = this.parent.element.querySelector(".e-gridheader");
    }
    VirtualHeaderRenderer.prototype.getPanel = function () {
        return this.headerPanel;
    };
    VirtualHeaderRenderer.prototype.getTable = function () {
        return this.headerPanel.querySelector('.e-table');
    };
    VirtualHeaderRenderer.prototype.renderTable = function () {
        this.vHelper.refreshColOffsets();
        this.parent.setColumnIndexesInView(this.vHelper.getColumnIndexes(this.getPanel().querySelector('.e-headercontent')));
        this.virtualEle.table = this.getTable();
        this.virtualEle.content = this.getPanel().querySelector('.e-headercontent');
        this.virtualEle.content.style.position = 'relative';
        this.virtualEle.renderWrapper();
        this.virtualEle.renderPlaceHolder();
    };
    return VirtualHeaderRenderer;
}());
export { VirtualHeaderRenderer };
var VirtualElementHandler = (function () {
    function VirtualElementHandler() {
    }
    VirtualElementHandler.prototype.renderWrapper = function (height) {
        this.wrapper = this.content.querySelector('.e-virtualtable');
        this.wrapper.setAttribute('styles', "min-height:" + formatUnit(height));
    };
    VirtualElementHandler.prototype.renderPlaceHolder = function () {
        this.placeholder = this.content.querySelector('.e-virtualtrack');
    };
    VirtualElementHandler.prototype.adjustTable = function (xValue, yValue) {
        this.wrapper.style.transform = "translate(" + xValue + "px, " + yValue + "px)";
    };
    VirtualElementHandler.prototype.setWrapperWidth = function (width, full) {
        this.wrapper.style.width = width ? width + "px" : full ? '100%' : '';
    };
    VirtualElementHandler.prototype.setVirtualHeight = function (height, width) {
        this.placeholder.style.height = height + "px";
        this.placeholder.style.width = width;
    };
    return VirtualElementHandler;
}());
export { VirtualElementHandler };
var VirtualHelper = (function () {
    function VirtualHelper(parent) {
        this.cOffsets = {};
        this.data = {};
        this.groups = {};
        this.parent = parent;
    }
    VirtualHelper.prototype.getBlockIndexes = function (page) {
        return [page + (page - 1), page * 2];
    };
    VirtualHelper.prototype.getPage = function (block) {
        return block % 2 === 0 ? block / 2 : (block + 1) / 2;
    };
    VirtualHelper.prototype.getData = function () {
        return {
            page: this.parent.options.currentPage,
            blockIndexes: this.getBlockIndexes(this.parent.options.currentPage),
            direction: 'down',
            columnIndexes: this.parent.getColumnIndexesInView()
        };
    };
    VirtualHelper.prototype.getColumnIndexes = function (content) {
        var _this_1 = this;
        if (content === void 0) { content = this.parent.getHeaderContent(); }
        var indexes = [];
        var sLeft = content.scrollLeft | 0;
        var keys = Object.keys(this.cOffsets);
        var cWidth = this.parent.options.needClientAction ? content.getBoundingClientRect().width :
            Number(this.parent.options.width);
        sLeft = Math.min(this.cOffsets[keys.length - 1] - cWidth, sLeft);
        var calWidth = Browser.isDevice ? 2 * cWidth : cWidth / 2;
        var left = sLeft + cWidth + (sLeft === 0 ? calWidth : 0);
        keys.some(function (offset, indx, input) {
            var iOffset = Number(offset);
            var offsetVal = _this_1.cOffsets[offset];
            var border = sLeft - calWidth <= offsetVal && left + calWidth >= offsetVal;
            if (border) {
                indexes.push(iOffset);
            }
            return left + calWidth < offsetVal;
        });
        this.parent.virtualContentModule.startColIndex = indexes[0];
        this.parent.virtualContentModule.endColIndex = indexes[indexes.length - 1];
        return indexes;
    };
    VirtualHelper.prototype.refreshColOffsets = function () {
        var col = 0;
        this.cOffsets = {};
        var gLen = this.parent.options.groupCount;
        var cols = this.parent.options.columns;
        var cLen = cols.length;
        var blocks = Array.apply(null, Array(cLen)).map(function () { return col++; });
        for (var j = 0; j < blocks.length; j++) {
            blocks[j] = blocks[j] + gLen;
            this.cOffsets[blocks[j]] = (this.cOffsets[blocks[j] - 1] | 0) + (cols[j].visible ? parseInt(cols[j].width, 10) : 0);
        }
    };
    return VirtualHelper;
}());
export { VirtualHelper };
