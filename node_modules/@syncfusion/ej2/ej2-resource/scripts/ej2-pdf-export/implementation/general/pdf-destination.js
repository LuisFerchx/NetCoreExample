import { PointF, RectangleF } from './../drawing/pdf-drawing';
import { PdfArray } from './../primitives/pdf-array';
import { PdfPageRotateAngle } from './../pages/enum';
import { PdfDestinationMode } from './../general/enum';
import { PdfReferenceHolder } from './../primitives/pdf-reference';
import { PdfName } from './../primitives/pdf-name';
import { PdfNumber } from './../primitives/pdf-number';
import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';
var PdfDestination = (function () {
    function PdfDestination(arg1, arg2) {
        this.dictionaryProperties = new DictionaryProperties();
        this.destinationMode = PdfDestinationMode.Location;
        this.zoomFactor = 0;
        this.destinationLocation = new PointF(0, 0);
        this.bounds = new RectangleF();
        this.array = new PdfArray();
        if (typeof arg2 === 'undefined') {
            var angle = PdfPageRotateAngle.RotateAngle0;
            this.destinationLocation = new PointF(0, this.destinationLocation.y);
            this.pdfPage = arg1;
        }
        else if (arg2 instanceof PointF) {
            this.constructor(arg1);
            this.destinationLocation = arg2;
        }
        else {
            this.constructor(arg1);
            this.bounds = arg2;
        }
    }
    Object.defineProperty(PdfDestination.prototype, "zoom", {
        get: function () {
            return this.zoomFactor;
        },
        set: function (value) {
            this.zoomFactor = value;
            this.initializePrimitive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDestination.prototype, "page", {
        get: function () {
            return this.pdfPage;
        },
        set: function (value) {
            this.pdfPage = value;
            this.initializePrimitive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDestination.prototype, "mode", {
        get: function () {
            return this.destinationMode;
        },
        set: function (value) {
            this.destinationMode = value;
            this.initializePrimitive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDestination.prototype, "location", {
        get: function () {
            return this.destinationLocation;
        },
        set: function (value) {
            this.destinationLocation = value;
            this.initializePrimitive();
        },
        enumerable: true,
        configurable: true
    });
    PdfDestination.prototype.pointToNativePdf = function (page, point) {
        var section = page.section;
        return section.pointToNativePdf(page, point);
    };
    PdfDestination.prototype.initializePrimitive = function () {
        this.array.clear();
        this.array.add(new PdfReferenceHolder(this.pdfPage));
        switch (this.destinationMode) {
            case PdfDestinationMode.Location:
                var simplePage = this.pdfPage;
                var point = new PointF();
                point = this.pointToNativePdf(simplePage, this.destinationLocation);
                this.array.add(new PdfName(this.dictionaryProperties.xyz));
                this.array.add(new PdfNumber(point.x));
                this.array.add(new PdfNumber(point.y));
                this.array.add(new PdfNumber(this.zoomFactor));
                break;
            case PdfDestinationMode.FitToPage:
                this.array.add(new PdfName(this.dictionaryProperties.fit));
                break;
        }
    };
    Object.defineProperty(PdfDestination.prototype, "element", {
        get: function () {
            this.initializePrimitive();
            return this.array;
        },
        enumerable: true,
        configurable: true
    });
    return PdfDestination;
}());
export { PdfDestination };
