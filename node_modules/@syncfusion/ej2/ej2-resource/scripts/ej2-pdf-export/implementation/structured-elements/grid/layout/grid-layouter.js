var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { PdfGrid } from '../pdf-grid';
import { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';
import { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';
import { PdfBorders } from '../styles/pdf-borders';
import { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';
import { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';
import { PdfHorizontalOverflowType } from '../styles/style';
import { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';
var PdfGridLayouter = (function (_super) {
    __extends(PdfGridLayouter, _super);
    function PdfGridLayouter(baseFormat) {
        var _this = _super.call(this, baseFormat) || this;
        _this.gridInitialWidth = 0;
        _this.gridSize = new SizeF(0, 0);
        _this.parentCellIndex = 0;
        _this.tempWidth = 0;
        _this.childheight = 0;
        _this.isChildGrid = false;
        _this.hasRowSpanSpan = false;
        _this.isRearranged = false;
        _this.pageBounds = new RectangleF();
        _this.listOfNavigatePages = [];
        _this.flag = true;
        _this.columnRanges = [];
        _this.currentLocation = new PointF(0, 0);
        _this.breakRow = true;
        _this.isOverloadWithPosition = false;
        return _this;
    }
    Object.defineProperty(PdfGridLayouter.prototype, "Grid", {
        get: function () {
            return this.elements;
        },
        enumerable: true,
        configurable: true
    });
    PdfGridLayouter.prototype.getFormat = function (format) {
        var f = format;
        return f;
    };
    PdfGridLayouter.prototype.layoutInternal = function (param) {
        var format = this.getFormat(param.format);
        this.gridLayoutFormat = this.getFormat(param.format);
        this.currentPage = param.page;
        if (this.currentPage !== null) {
            var pageHeight = this.currentPage.getClientSize().height;
            var pageWidth = this.currentPage.getClientSize().width;
            this.currentPageBounds = this.currentPage.getClientSize();
        }
        else {
            throw Error('Can not set page as null');
        }
        this.currentGraphics = this.currentPage.graphics;
        var index = 0;
        index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
        this.listOfNavigatePages.push(index);
        if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {
            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));
        }
        else {
            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);
        }
        if (this.Grid.rows.count !== 0) {
            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :
                (this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);
        }
        else if (this.Grid.headers.count !== 0) {
            this.currentBounds.width = param.bounds.width;
        }
        else {
            throw Error('Please add row or header into grid');
        }
        this.startLocation = new PointF(param.bounds.x, param.bounds.y);
        if (param.bounds.height > 0 && !this.Grid.isChildGrid) {
            this.currentBounds.height = param.bounds.height;
        }
        if (!this.Grid.isChildGrid) {
            this.hType = this.Grid.style.horizontalOverflowType;
        }
        if (!this.Grid.style.allowHorizontalOverflow) {
            this.columnRanges = [];
            this.Grid.measureColumnsWidth(this.currentBounds);
            this.columnRanges.push([0, this.Grid.columns.count - 1]);
        }
        else {
            this.Grid.measureColumnsWidth();
            this.determineColumnDrawRanges();
        }
        if (this.Grid.hasRowSpanSpan) {
            for (var i = 0; i < this.Grid.rows.count; i++) {
                var height = this.Grid.rows.getRow(i).height;
                if (!this.Grid.rows.getRow(i).isRowHeightSet) {
                    this.Grid.rows.getRow(i).isRowHeightSet = true;
                }
            }
        }
        var result = this.layoutOnPage(param);
        return result;
    };
    PdfGridLayouter.prototype.determineColumnDrawRanges = function () {
        var startColumn = 0;
        var endColumn = 0;
        var cellWidths = 0;
        var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;
        for (var i = 0; i < this.Grid.columns.count; i++) {
            cellWidths += this.Grid.columns.getColumn(i).width;
            if (cellWidths >= availableWidth) {
                var subWidths = 0;
                for (var j = startColumn; j <= i; j++) {
                    subWidths += this.Grid.columns.getColumn(j).width;
                    if (subWidths > availableWidth) {
                        break;
                    }
                    endColumn = j;
                }
                this.columnRanges.push([startColumn, endColumn]);
                startColumn = endColumn + 1;
                endColumn = startColumn;
                cellWidths = (endColumn <= i) ? this.Grid.columns.getColumn(i).width : 0;
            }
        }
        this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);
    };
    PdfGridLayouter.prototype.layoutOnPage = function (param) {
        this.pageBounds.x = param.bounds.x;
        this.pageBounds.y = param.bounds.y;
        this.pageBounds.height = param.bounds.height;
        var format = this.getFormat(param.format);
        var endArgs = null;
        var result = null;
        var layoutedPages = new TemporaryDictionary();
        var startPage = param.page;
        var isParentCell = false;
        var cellBounds = [];
        for (var index = 0; index < this.columnRanges.length; index++) {
            var range = this.columnRanges[index];
            this.cellStartIndex = range[0];
            this.cellEndIndex = range[1];
            var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);
            this.currentBounds = returnObject.currentBounds;
            this.currentRowIndex = returnObject.currentRowIndex;
            var drawHeader = void 0;
            for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {
                var row = this.Grid.headers.getHeader(i_1);
                var headerHeight = this.currentBounds.y;
                var headerResult = this.drawRow(row);
                drawHeader = false;
            }
            var i = 0;
            var length_1 = this.Grid.rows.count;
            var repeatRow = void 0;
            var startingHeight = 0;
            var flag = true;
            cellBounds = [];
            for (var j = 0; j < this.Grid.rows.count; j++) {
                var row = this.Grid.rows.getRow(j);
                i++;
                this.currentRowIndex = i - 1;
                var originalHeight = this.currentBounds.y;
                startPage = this.currentPage;
                PdfGridLayouter.repeatRowIndex = -1;
                if (flag && row.grid.isChildGrid) {
                    startingHeight = originalHeight;
                    flag = false;
                }
                var rowResult = null;
                if (this.Grid.splitChildRowIndex == -1) {
                    rowResult = this.drawRow(row);
                    row.isrowFinish = true;
                }
                else {
                    if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {
                        rowResult = this.drawRow(row);
                        row.isrowFinish = true;
                    }
                    else if (row.isrowFinish) {
                        continue;
                    }
                    else {
                        break;
                    }
                }
                cellBounds.push(rowResult.bounds.width);
                if (originalHeight === this.currentBounds.y) {
                    repeatRow = true;
                    PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);
                }
                else {
                    repeatRow = false;
                    PdfGridLayouter.repeatRowIndex = -1;
                }
                while (!rowResult.isFinish && startPage != null) {
                    var tempResult = this.getLayoutResult();
                    endArgs = this.raisePageLayouted(tempResult);
                    if (endArgs.cancel || repeatRow)
                        break;
                    else if (this.Grid.allowRowBreakAcrossPages) {
                        this.currentPage = this.getNextPageformat(format);
                        originalHeight = this.currentBounds.y;
                        var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);
                        if (this.Grid.isChildGrid && row.grid.ParentCell != null) {
                            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {
                                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {
                                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;
                                }
                            }
                        }
                        if (row.grid.ParentCell != null) {
                            row.grid.ParentCell.row.isRowBreaksNextPage = true;
                            row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;
                            for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {
                                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;
                            }
                        }
                        if (row.grid.isChildGrid) {
                            row.isrowFinish = false;
                            row.grid.splitChildRowIndex = row.rowIndex;
                            row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;
                            if (row.grid.ParentCell.row.grid.isGridSplit) {
                                row.grid.ParentCell.row.noOfPageCount += 1;
                                row.grid.ParentCell.row.grid.isGridSplit = false;
                            }
                            break;
                        }
                        if (row.noOfPageCount < 1) {
                            if (row.grid.splitChildRowIndex != -1) {
                                row.grid.isGridSplit = true;
                            }
                            this.currentBounds.y = 0.50;
                            if (this.Grid.repeatHeader) {
                                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {
                                    var headerRepeat = this.Grid.headers.getHeader(j_1);
                                    this.drawRow(headerRepeat);
                                }
                            }
                            rowResult = this.drawRow(row);
                            if (row.noOfPageCount >= 1) {
                                var temp = row.rowBreakHeightValue;
                                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {
                                    var tempResult1 = this.getLayoutResult();
                                    endArgs = this.raisePageLayouted(tempResult1);
                                    this.currentPage = this.getNextPageformat(format);
                                    originalHeight = this.currentBounds.y;
                                    if (row.grid.splitChildRowIndex != -1) {
                                        row.grid.isGridSplit = true;
                                    }
                                    this.currentBounds.y = 0.5;
                                    if (this.Grid.repeatHeader) {
                                        for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {
                                            var header = this.Grid.headers.getHeader(i_3);
                                            this.drawRow(header);
                                        }
                                    }
                                    this.drawRow(row);
                                }
                            }
                            row.grid.splitChildRowIndex = -1;
                            row.grid.isGridSplit = false;
                            rowResult.isFinish = true;
                            for (var i_4 = 0; i_4 < row.cells.count; i_4++) {
                                if (row.cells.getCell(i_4).value instanceof PdfGrid) {
                                    row.cells.getCell(i_4).value.splitChildRowIndex = -1;
                                }
                            }
                        }
                    }
                }
                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {
                    this.startLocation.x = this.currentBounds.x;
                    var isAddNextPage = false;
                    this.currentPage = this.getNextPageformat(format);
                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&
                        param.bounds.height > 0 && !this.Grid.isChildGrid) {
                        this.currentBounds.height = param.bounds.height;
                    }
                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&
                        param.bounds.y > 0 && !this.Grid.isChildGrid) {
                        this.currentBounds.y = param.bounds.y;
                    }
                    this.startLocation.y = this.currentBounds.y;
                    if ((format.paginateBounds.x === format.paginateBounds.y) &&
                        (format.paginateBounds.y === format.paginateBounds.height) &&
                        (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {
                        this.currentBounds.x += this.startLocation.x;
                    }
                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {
                        this.currentBounds.y += this.startLocation.x;
                    }
                    if (this.Grid.repeatHeader) {
                        for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {
                            var header = this.Grid.headers.getHeader(i_5);
                            this.drawRow(header);
                        }
                    }
                    this.drawRow(row);
                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {
                        layoutedPages.add(this.currentPage, range);
                    }
                }
                if (row.NestedGridLayoutResult != null) {
                    this.currentPage = row.NestedGridLayoutResult.page;
                    this.currentGraphics = this.currentPage.graphics;
                    this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);
                    var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);
                    this.currentBounds.y = recalHeight;
                    if (startPage != this.currentPage) {
                        var secion = this.currentPage.section;
                        var startIndex = secion.indexOf(startPage) + 1;
                        var endIndex = secion.indexOf(this.currentPage);
                        for (var page = startIndex; page < endIndex + 1; page++) {
                            var pageGraphics = this.currentPage.graphics;
                            var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);
                            var height = page == endIndex ? (row.NestedGridLayoutResult.bounds.height - param.bounds.y) :
                                (this.currentBounds.height - location_2.y);
                            if (height <= pageGraphics.clientSize.height)
                                height += param.bounds.y;
                            location_2.y = format == null ? 0.5 : format.paginateBounds.y;
                            for (var c = 0; c < row.cells.count; c++) {
                                var cell = row.cells.getCell(c);
                                var cellWidth = 0;
                                var totalwidth = 0;
                                if (cell.value instanceof PdfGrid) {
                                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {
                                        totalwidth += cell.value.columns.getColumn(i_6).columnWidth;
                                    }
                                }
                                else {
                                    totalwidth = cell.width;
                                }
                                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);
                                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));
                                location_2.x += cellWidth;
                                c += (cell.columnSpan - 1);
                            }
                        }
                        startPage = this.currentPage;
                    }
                }
            }
            var isPdfGrid = false;
            var maximumCellBoundsWidth = 0;
            if (cellBounds.length > 0) {
                maximumCellBoundsWidth = cellBounds[0];
            }
            var largeNavigatePage = [[1, 2]];
            for (var c = 0; c < this.Grid.rows.count; c++) {
                if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {
                    var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;
                    this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;
                    isPdfGrid = true;
                }
            }
            if (!isPdfGrid && cellBounds.length > 0) {
                for (var c = 0; c < i - 1; c++) {
                    if (maximumCellBoundsWidth < cellBounds[c]) {
                        maximumCellBoundsWidth = cellBounds[c];
                    }
                }
                this.rowLayoutBoundsWidth = maximumCellBoundsWidth;
            }
            else {
                this.rowLayoutBoundsWidth = largeNavigatePage[0][1];
            }
            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1
                && startPage != null && format.layout != PdfLayoutType.OnePage) {
                isParentCell = this.Grid.isChildGrid;
                if (largeNavigatePage[0][0] != 0) {
                    var section = this.currentPage.section;
                    var pageIndex = section.indexOf(this.currentPage);
                    this.currentGraphics = this.currentPage.graphics;
                    this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());
                    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
                }
                else {
                    this.currentPage = this.getNextPageformat(format);
                }
            }
            if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {
                this.currentPage = this.getNextPageformat(format);
                if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)
                    && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {
                    this.currentBounds.x += this.startLocation.x;
                    this.currentBounds.y += this.startLocation.y;
                }
            }
        }
        result = this.getLayoutResult();
        if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {
            this.reArrangePages(layoutedPages);
        }
        this.raisePageLayouted(result);
        return result;
    };
    PdfGridLayouter.prototype.getNextPageformat = function (format) {
        var section = this.currentPage.section;
        var nextPage = null;
        var index = section.indexOf(this.currentPage);
        this.flag = false;
        if (index === section.count - 1) {
            nextPage = section.add();
        }
        else {
            nextPage = section.getPages()[index + 1];
        }
        this.currentGraphics = nextPage.graphics;
        var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
        if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {
            this.listOfNavigatePages.push(pageindex);
        }
        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());
        return nextPage;
    };
    PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {
        var defaultFormat = new PdfStringFormat();
        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&
            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&
            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&
            format.lineAlignment === defaultFormat.lineAlignment
            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&
            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&
            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&
            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&
            format.wordWrap === defaultFormat.wordWrap);
    };
    PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {
        var args = null;
        if (this.Grid.raiseBeginCellDraw) {
            args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);
            this.Grid.onBeginCellDraw(args);
            style = args.style;
        }
        return style;
    };
    PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {
        var args = null;
        if (this.Grid.raiseEndCellDraw) {
            args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);
            this.Grid.onEndCellDraw(args);
        }
    };
    PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {
        var document = this.currentPage.document;
        var pages = [];
        var keys = layoutedPages.keys();
        var values = layoutedPages.values();
        for (var i = 0; i < keys.length; i++) {
            var page = keys[i];
            page.section = null;
            pages.push(page);
            document.pages.remove(page);
        }
        for (var i = 0; i < layoutedPages.size(); i++) {
            var count = 0;
            for (var j = i, count_1 = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count_1) {
                var page = pages[j];
                if (document.pages.indexOf(page) === -1) {
                    document.pages.add(page);
                }
            }
        }
    };
    PdfGridLayouter.prototype.getLayoutResult = function () {
        if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {
            for (var i = 0; i < this.Grid.rows.count; i++) {
                var row = this.Grid.rows.getRow(i);
                if (row.rowBreakHeight > 0 && row.repeatFlag) {
                    this.startLocation.y = this.currentPage.origin.y;
                }
            }
        }
        var bounds;
        if (!this.isChanged) {
            bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -
                this.startLocation.y));
        }
        return new PdfGridLayoutResult(this.currentPage, bounds);
    };
    PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {
        var newHeight = 0.0;
        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
            if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' ||
                typeof row.cells.getCell(i).remainingString === 'undefined')) {
                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());
            }
        }
        return Math.max(height, newHeight);
    };
    PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {
        var cancel = false;
        if (this.Grid.raiseBeginPageLayout) {
            var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);
            this.Grid.onBeginPageLayout(args);
            cancel = args.cancel;
            currentBounds = args.bounds;
            currentRow = args.startRowIndex;
        }
        return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };
    };
    PdfGridLayouter.prototype.raisePageLayouted = function (result) {
        var args = new PdfGridEndPageLayoutEventArgs(result);
        if (this.Grid.raiseEndPageLayout) {
            this.Grid.onEndPageLayout(args);
        }
        return args;
    };
    PdfGridLayouter.prototype.drawRow = function (row, result, height) {
        if (typeof result === 'undefined') {
            var result_1 = new RowLayoutResult();
            var rowHeightWithSpan = 0;
            var location_3 = new PointF(0, 0);
            var size = new SizeF(0, 0);
            var isHeader = false;
            if (row.rowSpanExists) {
                var maxSpan = 0;
                var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);
                if (currRowIndex === -1) {
                    currRowIndex = this.Grid.headers.indexOf(row);
                    if (currRowIndex !== -1) {
                        isHeader = true;
                    }
                }
                for (var i = 0; i < row.cells.count; i++) {
                    var cell = row.cells.getCell(i);
                    maxSpan = Math.max(maxSpan, cell.rowSpan);
                }
                for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {
                    rowHeightWithSpan += (isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height);
                }
            }
            var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;
            if (this.Grid.isChildGrid && this.Grid.ParentCell != null) {
                if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight >
                    this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom
                    + calculatedHeight > this.currentBounds.height || this.currentBounds.y +
                    this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {
                    if (this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {
                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);
                        this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);
                    }
                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {
                        if (this.Grid.allowRowBreakAcrossPages) {
                            result_1.isFinish = true;
                            result_1.bounds = this.currentBounds;
                            this.drawRowWithBreak(result_1, row, calculatedHeight);
                            row.repeatFlag = true;
                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;
                        }
                    }
                }
                else {
                    result_1.isFinish = true;
                    if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {
                        row.repeatFlag = true;
                    }
                    else {
                        row.repeatFlag = false;
                        calculatedHeight = row.height;
                    }
                    if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {
                        if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {
                            calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;
                        }
                    }
                    this.drawRow(row, result_1, calculatedHeight);
                }
            }
            else {
                if (calculatedHeight > this.currentPageBounds.height) {
                    if (this.Grid.allowRowBreakAcrossPages) {
                        result_1.isFinish = true;
                        this.drawRowWithBreak(result_1, row, calculatedHeight);
                        row.isrowFinish = true;
                        row.repeatFlag = true;
                        if (row.grid.splitChildRowIndex !== -1) {
                            result_1.isFinish = false;
                        }
                    }
                }
                else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||
                    this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||
                    this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {
                    if (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {
                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);
                    }
                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {
                        if (this.Grid.allowRowBreakAcrossPages) {
                            result_1.isFinish = true;
                            this.drawRowWithBreak(result_1, row, calculatedHeight);
                            row.repeatFlag = true;
                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;
                            if (row.grid.splitChildRowIndex !== -1) {
                                result_1.isFinish = false;
                            }
                        }
                    }
                    else {
                        result_1.isFinish = false;
                    }
                }
                else {
                    result_1.isFinish = true;
                    this.drawRow(row, result_1, calculatedHeight);
                    row.repeatFlag = false;
                }
            }
            return result_1;
        }
        else {
            var skipcell = false;
            var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);
            result.bounds = new RectangleF(location_4, new SizeF(0, 0));
            height = this.ReCalculateHeight(row, height);
            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
                var cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));
                if (!cancelSpans) {
                    for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {
                        row.cells.getCell(i + j).isCellMergeContinue = true;
                    }
                }
                var size = new SizeF(this.Grid.columns.getColumn(i).width, height);
                if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&
                    this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {
                    row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;
                }
                var cellstyle = row.cells.getCell(i).style;
                var tempValue = ((typeof row.cells.getCell(i).value === 'string' &&
                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');
                row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);
                if (!skipcell) {
                    if (row.cells.getCell(i).value instanceof PdfGrid) {
                        var grid = row.cells.getCell(i).value;
                        grid.parentCellIndex = i;
                    }
                    var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);
                    if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex ||
                        i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {
                        row.rowOverflowIndex = this.cellEndIndex;
                    }
                    if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan >
                        this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) &&
                        row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {
                        row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ?
                            stringResult.remainder : '' : '';
                        row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;
                        row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;
                        row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;
                    }
                }
                tempValue = ((typeof row.cells.getCell(i).value === 'string' &&
                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');
                if (!cancelSpans) {
                    this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);
                }
                if (row.cells.getCell(i).value instanceof PdfGrid) {
                    var grid = row.cells.getCell(i).value;
                    if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {
                        location_4.x = grid.rowLayoutBoundsWidth;
                        location_4.x += grid.style.cellSpacing;
                    }
                    else {
                        location_4.x += this.Grid.columns.getColumn(i).width;
                    }
                }
                else {
                    location_4.x += this.Grid.columns.getColumn(i).width;
                }
            }
            if (!row.rowMergeComplete || row.isRowHeightSet) {
                this.currentBounds.y += height;
            }
            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));
        }
    };
    PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {
        var location = new PointF(this.currentBounds.x, this.currentBounds.y);
        if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {
            location.x = this.startLocation.x;
        }
        result.bounds = new RectangleF(location, new SizeF(0, 0));
        this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;
        if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {
            row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;
        }
        for (var i = 0; i < row.cells.count; i++) {
            var cell = row.cells.getCell(i);
            var cellHeight = cell.measureHeight();
            if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {
                row.rowBreakHeight = 0;
            }
        }
        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
            var cancelSpans = ((row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1) &&
                (row.cells.getCell(i).columnSpan > 1));
            var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight :
                this.currentPageBounds.height);
            var cellstyle1 = row.cells.getCell(i).style;
            row.cells.getCell(i).style = cellstyle1;
            var skipcell = false;
            var stringResult = null;
            if (!skipcell) {
                stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);
            }
            if (row.rowBreakHeight > 0.0) {
                if (stringResult != null) {
                    row.cells.getCell(i).FinishedDrawingCell = false;
                    row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;
                    if (row.grid.isChildGrid) {
                        row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;
                    }
                }
            }
            result.isFinish = (!result.isFinish) ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;
            if (row.cells.getCell(i).value instanceof PdfGrid) {
                var grid = row.cells.getCell(i).value;
                this.rowBreakPageHeightCellIndex = i;
                if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {
                    location.x = this.rowLayoutBoundsWidth;
                    location.x += grid.style.cellSpacing;
                }
                else {
                    location.x += this.Grid.columns.getColumn(i).width;
                }
            }
            else {
                location.x += this.Grid.columns.getColumn(i).width;
            }
        }
        this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;
        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));
    };
    PdfGridLayouter.repeatRowIndex = -1;
    return PdfGridLayouter;
}(ElementLayouter));
export { PdfGridLayouter };
var PdfGridLayoutResult = (function (_super) {
    __extends(PdfGridLayoutResult, _super);
    function PdfGridLayoutResult(page, bounds) {
        return _super.call(this, page, bounds) || this;
    }
    return PdfGridLayoutResult;
}(PdfLayoutResult));
export { PdfGridLayoutResult };
var PdfGridLayoutFormat = (function (_super) {
    __extends(PdfGridLayoutFormat, _super);
    function PdfGridLayoutFormat(baseFormat) {
        var _this = this;
        if (typeof baseFormat === 'undefined') {
            _this = _super.call(this) || this;
        }
        else {
            _this = _super.call(this, baseFormat) || this;
        }
        return _this;
    }
    return PdfGridLayoutFormat;
}(PdfLayoutFormat));
export { PdfGridLayoutFormat };
var GridCellEventArgs = (function () {
    function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {
        this.gridRowIndex = rowIndex;
        this.gridCellIndex = cellIndex;
        this.internalValue = value;
        this.gridBounds = bounds;
        this.pdfGraphics = graphics;
    }
    Object.defineProperty(GridCellEventArgs.prototype, "rowIndex", {
        get: function () {
            return this.gridRowIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridCellEventArgs.prototype, "cellIndex", {
        get: function () {
            return this.gridCellIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridCellEventArgs.prototype, "value", {
        get: function () {
            return this.internalValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridCellEventArgs.prototype, "bounds", {
        get: function () {
            return this.gridBounds;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridCellEventArgs.prototype, "graphics", {
        get: function () {
            return this.pdfGraphics;
        },
        enumerable: true,
        configurable: true
    });
    return GridCellEventArgs;
}());
export { GridCellEventArgs };
var PdfGridBeginCellDrawEventArgs = (function (_super) {
    __extends(PdfGridBeginCellDrawEventArgs, _super);
    function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {
        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
        _this.style = style;
        return _this;
    }
    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, "skip", {
        get: function () {
            return this.bSkip;
        },
        set: function (value) {
            this.bSkip = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, "style", {
        get: function () {
            return this.cellStyle;
        },
        set: function (value) {
            this.cellStyle = value;
        },
        enumerable: true,
        configurable: true
    });
    return PdfGridBeginCellDrawEventArgs;
}(GridCellEventArgs));
export { PdfGridBeginCellDrawEventArgs };
var PdfGridEndCellDrawEventArgs = (function (_super) {
    __extends(PdfGridEndCellDrawEventArgs, _super);
    function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {
        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
        _this.cellStyle = style;
        return _this;
    }
    Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, "style", {
        get: function () {
            return this.cellStyle;
        },
        enumerable: true,
        configurable: true
    });
    return PdfGridEndCellDrawEventArgs;
}(GridCellEventArgs));
export { PdfGridEndCellDrawEventArgs };
var PdfCancelEventArgs = (function () {
    function PdfCancelEventArgs() {
    }
    Object.defineProperty(PdfCancelEventArgs.prototype, "cancel", {
        get: function () {
            return this.isCancel;
        },
        set: function (value) {
            this.isCancel = value;
        },
        enumerable: true,
        configurable: true
    });
    return PdfCancelEventArgs;
}());
export { PdfCancelEventArgs };
var BeginPageLayoutEventArgs = (function (_super) {
    __extends(BeginPageLayoutEventArgs, _super);
    function BeginPageLayoutEventArgs(bounds, page) {
        var _this = _super.call(this) || this;
        _this.bounds = bounds;
        _this.pdfPage = page;
        return _this;
    }
    Object.defineProperty(BeginPageLayoutEventArgs.prototype, "bounds", {
        get: function () {
            return this.cellBounds;
        },
        set: function (value) {
            this.cellBounds = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BeginPageLayoutEventArgs.prototype, "page", {
        get: function () {
            return this.pdfPage;
        },
        enumerable: true,
        configurable: true
    });
    return BeginPageLayoutEventArgs;
}(PdfCancelEventArgs));
export { BeginPageLayoutEventArgs };
var EndPageLayoutEventArgs = (function (_super) {
    __extends(EndPageLayoutEventArgs, _super);
    function EndPageLayoutEventArgs(result) {
        var _this = _super.call(this) || this;
        _this.layoutResult = result;
        return _this;
    }
    Object.defineProperty(EndPageLayoutEventArgs.prototype, "result", {
        get: function () {
            return this.layoutResult;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EndPageLayoutEventArgs.prototype, "nextPage", {
        get: function () {
            return this.nextPdfPage;
        },
        set: function (value) {
            this.nextPdfPage = value;
        },
        enumerable: true,
        configurable: true
    });
    return EndPageLayoutEventArgs;
}(PdfCancelEventArgs));
export { EndPageLayoutEventArgs };
var PdfGridBeginPageLayoutEventArgs = (function (_super) {
    __extends(PdfGridBeginPageLayoutEventArgs, _super);
    function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {
        var _this = _super.call(this, bounds, page) || this;
        _this.startRow = startRow;
        return _this;
    }
    Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, "startRowIndex", {
        get: function () {
            return this.startRow;
        },
        enumerable: true,
        configurable: true
    });
    return PdfGridBeginPageLayoutEventArgs;
}(BeginPageLayoutEventArgs));
export { PdfGridBeginPageLayoutEventArgs };
var PdfGridEndPageLayoutEventArgs = (function (_super) {
    __extends(PdfGridEndPageLayoutEventArgs, _super);
    function PdfGridEndPageLayoutEventArgs(result) {
        return _super.call(this, result) || this;
    }
    return PdfGridEndPageLayoutEventArgs;
}(EndPageLayoutEventArgs));
export { PdfGridEndPageLayoutEventArgs };
var RowLayoutResult = (function () {
    function RowLayoutResult() {
        this.layoutedBounds = new RectangleF(0, 0, 0, 0);
    }
    Object.defineProperty(RowLayoutResult.prototype, "isFinish", {
        get: function () {
            return this.bIsFinished;
        },
        set: function (value) {
            this.bIsFinished = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowLayoutResult.prototype, "bounds", {
        get: function () {
            return this.layoutedBounds;
        },
        set: function (value) {
            this.layoutedBounds = value;
        },
        enumerable: true,
        configurable: true
    });
    return RowLayoutResult;
}());
export { RowLayoutResult };
