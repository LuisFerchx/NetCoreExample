var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { PdfWriter } from './../input-output/pdf-writer';
import { PdfMainObjectCollection } from './../input-output/pdf-main-object-collection';
import { PdfDocumentBase } from './pdf-document-base';
import { PdfCrossTable } from './../input-output/pdf-cross-table';
import { PdfCatalog } from './pdf-catalog';
import { PdfPageSettings } from './../pages/pdf-page-settings';
import { PdfSectionCollection } from './../pages/pdf-section-collection';
import { PdfDocumentPageCollection } from './../pages/pdf-document-page-collection';
import { PdfCacheCollection } from './../general/pdf-cache-collection';
import { PdfColorSpace } from './../graphics/enum';
import { PdfDocumentTemplate } from './pdf-document-template';
import { PdfFontFamily } from './../graphics/fonts/enum';
import { PdfStandardFont } from './../graphics/fonts/pdf-standard-font';
var PdfDocument = (function (_super) {
    __extends(PdfDocument, _super);
    function PdfDocument(isMerging) {
        var _this = _super.call(this) || this;
        _this.defaultMargin = 40.0;
        _this.streamWriter = null;
        _this = _super.call(this, _this) || this;
        if (isMerging === true || isMerging === false || typeof isMerging !== 'undefined') {
            var objects = new PdfMainObjectCollection();
            _this.setMainObjectCollection(objects);
            var crossTable = new PdfCrossTable();
            crossTable.isMerging = isMerging;
            crossTable.document = _this;
            _this.setCrossTable(crossTable);
            var catalog = new PdfCatalog();
            _this.setCatalog(catalog);
            objects.add(catalog);
            catalog.position = -1;
            _this.sectionCollection = new PdfSectionCollection(_this);
            _this.documentPageCollection = new PdfDocumentPageCollection(_this);
            catalog.pages = _this.sectionCollection;
        }
        else {
            PdfDocument.cacheCollection = new PdfCacheCollection();
            _this.constructor(false);
        }
        return _this;
    }
    Object.defineProperty(PdfDocument, "defaultFont", {
        get: function () {
            if (this.defaultStandardFont == null) {
                this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8);
            }
            return this.defaultStandardFont;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDocument.prototype, "sections", {
        get: function () {
            return this.sectionCollection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDocument.prototype, "pageSettings", {
        get: function () {
            if (this.settings == null) {
                this.settings = new PdfPageSettings(this.defaultMargin);
            }
            return this.settings;
        },
        set: function (value) {
            this.settings = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDocument.prototype, "pages", {
        get: function () {
            return this.documentPageCollection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDocument, "cache", {
        get: function () {
            if (typeof PdfDocument.cacheCollection === 'undefined' || PdfDocument.cacheCollection == null) {
                return new PdfCacheCollection();
            }
            return PdfDocument.cacheCollection;
        },
        set: function (value) {
            this.cacheCollection = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDocument, "enableCache", {
        get: function () {
            return this.isCacheEnabled;
        },
        set: function (value) {
            this.isCacheEnabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDocument.prototype, "colorSpace", {
        get: function () {
            if ((this.pdfColorSpace === PdfColorSpace.Rgb) || ((this.pdfColorSpace === PdfColorSpace.Cmyk)
                || (this.pdfColorSpace === PdfColorSpace.GrayScale))) {
                return this.pdfColorSpace;
            }
            else {
                return PdfColorSpace.Rgb;
            }
        },
        set: function (value) {
            if ((value === PdfColorSpace.Rgb) || ((value === PdfColorSpace.Cmyk) ||
                (value === PdfColorSpace.GrayScale))) {
                this.pdfColorSpace = value;
            }
            else {
                this.pdfColorSpace = PdfColorSpace.Rgb;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfDocument.prototype, "template", {
        get: function () {
            if (this.pageTemplate == null) {
                this.pageTemplate = new PdfDocumentTemplate();
            }
            return this.pageTemplate;
        },
        set: function (value) {
            this.pageTemplate = value;
        },
        enumerable: true,
        configurable: true
    });
    PdfDocument.prototype.docSave = function (stream, arg2, arg3) {
        this.checkPagesPresence();
        if (stream === null) {
            throw new Error('ArgumentNullException : stream');
        }
        this.streamWriter = stream;
        var writer = new PdfWriter(stream);
        writer.document = this;
        if (typeof arg2 === 'boolean' && typeof arg3 === 'undefined') {
            return this.crossTable.save(writer);
        }
        else {
            this.crossTable.save(writer, arg2);
        }
    };
    PdfDocument.prototype.checkPagesPresence = function () {
        if (this.pages.count === 0) {
            this.pages.add();
        }
    };
    PdfDocument.prototype.destroy = function () {
        this.catalog = undefined;
        this.colorSpace = undefined;
        this.currentSavingObj = undefined;
        this.documentPageCollection = undefined;
        this.isStreamCopied = undefined;
        this.pageSettings = undefined;
        this.pageTemplate = undefined;
        this.pdfColorSpace = undefined;
        this.sectionCollection = undefined;
        PdfDocument.cache.destroy();
        this.crossTable.pdfObjects.destroy();
        PdfDocument.cache = undefined;
        this.streamWriter.destroy();
    };
    PdfDocument.defaultStandardFont = null;
    PdfDocument.isCacheEnabled = true;
    return PdfDocument;
}(PdfDocumentBase));
export { PdfDocument };
