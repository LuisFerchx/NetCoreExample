import { PdfColor } from './pdf-color';
import { PdfDashStyle, PdfColorSpace } from './enum';
import { PdfBrush } from './brushes/pdf-brush';
var PdfPen = (function () {
    function PdfPen(arg1, arg2) {
        this.pdfColor = new PdfColor(0, 0, 0);
        this.dashOffsetValue = 0;
        this.penDashPattern = [0];
        this.pdfDashStyle = PdfDashStyle.Solid;
        this.pdfLineCap = 0;
        this.pdfLineJoin = 0;
        this.penWidth = 1.0;
        this.internalMiterLimit = 0.0;
        this.colorSpace = PdfColorSpace.Rgb;
        if (typeof arg2 === 'number') {
            this.constructor(arg1);
            this.width = arg2;
        }
        else if (typeof arg2 === 'undefined' && arg1 instanceof PdfBrush) {
            this.setBrush(arg1);
        }
        else if (typeof arg2 === 'undefined' && arg1 instanceof PdfColor) {
            this.color = arg1;
        }
    }
    Object.defineProperty(PdfPen.prototype, "color", {
        get: function () {
            return this.pdfColor;
        },
        set: function (value) {
            this.pdfColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPen.prototype, "dashOffset", {
        get: function () {
            if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {
                return 0;
            }
            else {
                return this.dashOffsetValue;
            }
        },
        set: function (value) {
            this.dashOffsetValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPen.prototype, "dashPattern", {
        get: function () {
            return this.penDashPattern;
        },
        set: function (value) {
            this.penDashPattern = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPen.prototype, "dashStyle", {
        get: function () {
            return this.pdfDashStyle;
        },
        set: function (value) {
            if (this.pdfDashStyle !== value) {
                this.pdfDashStyle = value;
                switch (this.pdfDashStyle) {
                    case PdfDashStyle.Custom:
                        break;
                    case PdfDashStyle.Dash:
                        this.penDashPattern = [3, 1];
                        break;
                    case PdfDashStyle.Dot:
                        this.penDashPattern = [1, 1];
                        break;
                    case PdfDashStyle.DashDot:
                        this.penDashPattern = [3, 1, 1, 1];
                        break;
                    case PdfDashStyle.DashDotDot:
                        this.penDashPattern = [3, 1, 1, 1, 1, 1];
                        break;
                    case PdfDashStyle.Solid:
                        break;
                    default:
                        this.pdfDashStyle = PdfDashStyle.Solid;
                        this.penDashPattern = [0];
                        break;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPen.prototype, "lineCap", {
        get: function () {
            return this.pdfLineCap;
        },
        set: function (value) {
            this.pdfLineCap = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPen.prototype, "lineJoin", {
        get: function () {
            return this.pdfLineJoin;
        },
        set: function (value) {
            this.pdfLineJoin = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPen.prototype, "miterLimit", {
        get: function () {
            return this.internalMiterLimit;
        },
        set: function (value) {
            this.internalMiterLimit = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfPen.prototype, "width", {
        get: function () {
            return this.penWidth;
        },
        set: function (value) {
            this.penWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    PdfPen.prototype.clone = function () {
        var pen = this;
        return pen;
    };
    PdfPen.prototype.setBrush = function (brush) {
        var sBrush = brush;
        this.color = sBrush.color;
        this.pdfBrush = sBrush;
    };
    PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {
        var diff = false;
        saveState = true;
        if (currentPen == null) {
            diff = true;
        }
        diff = this.dashControl(currentPen, saveState, streamWriter);
        streamWriter.setLineWidth(this.width);
        streamWriter.setLineJoin(this.lineJoin);
        streamWriter.setLineCap(this.lineCap);
        var miterLimit = this.miterLimit;
        if (miterLimit > 0) {
            streamWriter.setMiterLimit(miterLimit);
            diff = true;
        }
        var brush = this.pdfBrush;
        streamWriter.setColorAndSpace(this.color, currentColorSpace, true);
        diff = true;
        return diff;
    };
    PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {
        saveState = true;
        var lineWidth = this.width;
        var pattern = this.getPattern();
        streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);
        return saveState;
    };
    PdfPen.prototype.getPattern = function () {
        var pattern = this.dashPattern;
        for (var i = 0; i < pattern.length; ++i) {
            pattern[i] *= this.width;
        }
        return pattern;
    };
    return PdfPen;
}());
export { PdfPen };
