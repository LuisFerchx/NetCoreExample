import { PdfStream } from './../../primitives/pdf-stream';
import { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';
import { PdfArray } from './../../primitives/pdf-array';
import { PdfGraphics } from './../pdf-graphics';
import { PdfResources } from './../pdf-resources';
import { PdfName } from './../../primitives/pdf-name';
import { PointF, SizeF, RectangleF } from './../../drawing/pdf-drawing';
import { GetResourceEventHandler } from './../pdf-graphics';
var PdfTemplate = (function () {
    function PdfTemplate(arg1, arg2) {
        this.dictionaryProperties = new DictionaryProperties();
        this.writeTransformation = true;
        if (typeof arg1 === 'undefined') {
        }
        else if (arg1 instanceof SizeF && typeof arg2 === 'undefined') {
            this.content = new PdfStream();
            var tempSize = new SizeF(arg1.width, arg1.height);
            this.setSize(tempSize);
            this.initialize();
        }
        else {
            this.content = new PdfStream();
            this.setSize(new SizeF(arg1, arg2));
            this.initialize();
        }
    }
    Object.defineProperty(PdfTemplate.prototype, "size", {
        get: function () {
            return this.templateSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfTemplate.prototype, "width", {
        get: function () {
            return this.size.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfTemplate.prototype, "height", {
        get: function () {
            return this.size.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfTemplate.prototype, "graphics", {
        get: function () {
            if (this.pdfGraphics == null || typeof this.pdfGraphics === 'undefined') {
                var gr = new GetResourceEventHandler(this);
                var g = new PdfGraphics(this.size, gr, this.content);
                this.pdfGraphics = g;
                this.pdfGraphics.initializeCoordinates();
            }
            return this.pdfGraphics;
        },
        enumerable: true,
        configurable: true
    });
    PdfTemplate.prototype.getResources = function () {
        if (this.resources == null) {
            this.resources = new PdfResources();
            this.content.items.setValue(this.dictionaryProperties.resources, this.resources);
        }
        return this.resources;
    };
    PdfTemplate.prototype.initialize = function () {
        this.addType();
        this.addSubType();
    };
    PdfTemplate.prototype.addType = function () {
        var value = new PdfName(this.dictionaryProperties.xObject);
        this.content.items.setValue(this.dictionaryProperties.type, value);
    };
    PdfTemplate.prototype.addSubType = function () {
        var value = new PdfName(this.dictionaryProperties.form);
        this.content.items.setValue(this.dictionaryProperties.subtype, value);
    };
    PdfTemplate.prototype.reset = function (size) {
        if (typeof size === 'undefined') {
            if (this.resources != null) {
                this.resources = null;
                this.content.remove(this.dictionaryProperties.resources);
            }
            if (this.graphics != null) {
                this.graphics.reset(this.size);
            }
        }
        else {
            this.setSize(size);
            this.reset();
        }
    };
    PdfTemplate.prototype.setSize = function (size) {
        var rect = new RectangleF(new PointF(0, 0), size);
        var val = PdfArray.fromRectangle(rect);
        this.content.items.setValue(this.dictionaryProperties.bBox, val);
        this.templateSize = size;
    };
    Object.defineProperty(PdfTemplate.prototype, "element", {
        get: function () {
            return this.content;
        },
        enumerable: true,
        configurable: true
    });
    return PdfTemplate;
}());
export { PdfTemplate };
