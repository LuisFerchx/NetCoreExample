import { RectangleF } from './../../../drawing/pdf-drawing';
var ElementLayouter = (function () {
    function ElementLayouter(element) {
        this.layoutElement = element;
    }
    Object.defineProperty(ElementLayouter.prototype, "elements", {
        get: function () {
            return this.layoutElement;
        },
        enumerable: true,
        configurable: true
    });
    ElementLayouter.prototype.getElement = function () {
        return this.layoutElement;
    };
    ElementLayouter.prototype.layout = function (param) {
        return this.layoutInternal(param);
    };
    ElementLayouter.prototype.Layouter = function (param) {
        return this.layoutInternal(param);
    };
    ElementLayouter.prototype.getNextPage = function (currentPage) {
        var section = currentPage.section;
        var nextPage = section.add();
        return nextPage;
    };
    return ElementLayouter;
}());
export { ElementLayouter };
var PdfLayoutFormat = (function () {
    function PdfLayoutFormat(baseFormat) {
        if (typeof baseFormat === 'undefined') {
        }
        else {
            this.break = baseFormat.break;
            this.layout = baseFormat.layout;
            this.paginateBounds = baseFormat.paginateBounds;
            this.boundsSet = baseFormat.usePaginateBounds;
        }
    }
    Object.defineProperty(PdfLayoutFormat.prototype, "layout", {
        get: function () {
            return this.layoutType;
        },
        set: function (value) {
            this.layoutType = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfLayoutFormat.prototype, "break", {
        get: function () {
            return this.breakType;
        },
        set: function (value) {
            this.breakType = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfLayoutFormat.prototype, "paginateBounds", {
        get: function () {
            if (typeof this.layoutPaginateBounds === 'undefined' && this.layoutPaginateBounds == null) {
                this.layoutPaginateBounds = new RectangleF(0, 0, 0, 0);
            }
            return this.layoutPaginateBounds;
        },
        set: function (value) {
            this.layoutPaginateBounds = value;
            this.boundsSet = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfLayoutFormat.prototype, "usePaginateBounds", {
        get: function () {
            return this.boundsSet;
        },
        enumerable: true,
        configurable: true
    });
    return PdfLayoutFormat;
}());
export { PdfLayoutFormat };
var PdfLayoutParams = (function () {
    function PdfLayoutParams() {
    }
    Object.defineProperty(PdfLayoutParams.prototype, "page", {
        get: function () {
            return this.pdfPage;
        },
        set: function (value) {
            this.pdfPage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfLayoutParams.prototype, "bounds", {
        get: function () {
            return new RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);
        },
        set: function (value) {
            this.layoutBounds = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfLayoutParams.prototype, "format", {
        get: function () {
            return this.layoutFormat;
        },
        set: function (value) {
            this.layoutFormat = value;
        },
        enumerable: true,
        configurable: true
    });
    return PdfLayoutParams;
}());
export { PdfLayoutParams };
var PdfLayoutResult = (function () {
    function PdfLayoutResult(page, bounds) {
        this.pdfPage = page;
        this.layoutBounds = bounds;
    }
    Object.defineProperty(PdfLayoutResult.prototype, "page", {
        get: function () {
            return this.pdfPage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PdfLayoutResult.prototype, "bounds", {
        get: function () {
            return this.layoutBounds;
        },
        enumerable: true,
        configurable: true
    });
    return PdfLayoutResult;
}());
export { PdfLayoutResult };
