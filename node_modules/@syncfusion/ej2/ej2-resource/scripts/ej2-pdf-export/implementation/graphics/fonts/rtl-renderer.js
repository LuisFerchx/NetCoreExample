import { PdfString } from './../../primitives/pdf-string';
import { ArabicShapeRenderer } from './rtl/rtl-text-shape';
import { PdfTextDirection } from './../enum';
import { Bidi } from './rtl/rtl-bidirectional';
var RtlRenderer = (function () {
    function RtlRenderer() {
        this.openBracket = '(';
        this.closeBracket = ')';
    }
    RtlRenderer.prototype.layout = function (line, font, rtl, wordSpace, format) {
        if (line == null) {
            throw new Error('ArgumentNullException : line');
        }
        if (font == null) {
            throw new Error('ArgumentNullException : font');
        }
        var result = [];
        if (font.Unicode) {
            result = this.customLayout(line, rtl, format, font, wordSpace);
        }
        else {
            result = [];
            result[0] = line;
        }
        return result;
    };
    RtlRenderer.prototype.splitLayout = function (line, font, rtl, wordSpace, format) {
        if (line == null) {
            throw new Error('ArgumentNullException : line');
        }
        if (font == null) {
            throw new Error('ArgumentNullException : font');
        }
        var words = [];
        var system = false;
        if (!system || words == null) {
            words = this.customSplitLayout(line, font, rtl, wordSpace, format);
        }
        return words;
    };
    RtlRenderer.prototype.getGlyphIndex = function (line, font, rtl, glyphs, custom) {
        var success = true;
        var fail = false;
        if (line == null) {
            throw new Error('ArgumentNullException : line');
        }
        if (font == null) {
            throw new Error('ArgumentNullException : font');
        }
        glyphs = null;
        if (line.length === 0) {
            return { success: fail, glyphs: glyphs };
        }
        var renderer = new ArabicShapeRenderer();
        var text = renderer.shape(line, 0);
        var internalFont = font.fontInternal;
        var ttfReader = internalFont.ttfReader;
        glyphs = new Uint16Array(text.length);
        var i = 0;
        for (var k = 0, len = text.length; k < len; k++) {
            var ch = text[k];
            var glyphInfo = ttfReader.getGlyph(ch);
            if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {
                glyphs[i++] = (glyphInfo).index;
            }
        }
        return { success: success, glyphs: glyphs };
    };
    RtlRenderer.prototype.customLayout = function (line, rtl, format, font, wordSpace) {
        if (wordSpace === null || typeof wordSpace === 'undefined') {
            if (line == null) {
                throw new Error('ArgumentNullException : line');
            }
            var result = null;
            if (format !== null && format.textDirection !== PdfTextDirection.None) {
                var bidi = new Bidi();
                result = bidi.getLogicalToVisualString(line, rtl);
            }
            return result;
        }
        else {
            if (line == null) {
                throw new Error('ArgumentNullException : line');
            }
            if (font == null) {
                throw new Error('ArgumentNullException : font');
            }
            var layouted = null;
            if (format !== null && format.textDirection !== PdfTextDirection.None) {
                var renderer = new ArabicShapeRenderer();
                var txt = renderer.shape(line, 0);
                layouted = this.customLayout(txt, rtl, format);
            }
            var result = [];
            if (wordSpace) {
                var words = layouted.split('');
                var count = words.length;
                for (var i = 0; i < count; i++) {
                    words[i] = this.addChars(font, words[i]);
                }
                result = words;
            }
            else {
                result = [];
                result[0] = this.addChars(font, layouted);
            }
            return result;
        }
    };
    RtlRenderer.prototype.addChars = function (font, glyphs) {
        var line = glyphs;
        if (font == null) {
            throw new Error('ArgumentNullException : font');
        }
        if (line == null) {
            throw new Error('ArgumentNullException : line');
        }
        var text = line;
        var internalFont = font.fontInternal;
        var ttfReader = internalFont.ttfReader;
        font.setSymbols(text);
        text = ttfReader.convertString(text);
        var bytes = PdfString.toUnicodeArray(text, false);
        text = PdfString.byteToString(bytes);
        return text;
    };
    RtlRenderer.prototype.customSplitLayout = function (line, font, rtl, wordSpace, format) {
        if (line == null) {
            throw new Error('ArgumentNullException : line');
        }
        if (font == null) {
            throw new Error('ArgumentNullException : font');
        }
        var reversedLine = this.customLayout(line, rtl, format);
        var words = reversedLine.split('');
        return words;
    };
    return RtlRenderer;
}());
export { RtlRenderer };
