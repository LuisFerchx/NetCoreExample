import { setStyleAttribute, addClass, removeClass, Browser, EventHandler } from '@syncfusion/ej2-base';
import * as cls from '../common/constants';
import { TreeRenderer } from '../pivotfieldlist/tree-renderer';
import { PivotButton } from '../common/pivot-button';
import { CalculatedField } from '../common/calculated-field';
import { closest } from '@syncfusion/ej2-base';
import { ActionBase } from '../common/action-base';
var SfPivotFieldList = (function () {
    function SfPivotFieldList(element, options, dotnetRef) {
        this.element = element;
        this.element.blazor__instance = this;
        this.dotNetRef = dotnetRef;
        this.getOptions(element, options);
        this.dotNetRef = dotnetRef;
    }
    SfPivotFieldList.prototype.getOptions = function (element, options) {
        this.element = element;
        this.options = options;
        this.element.blazor__instance = this;
        this.parentElement = document.getElementById(element.id + '_Dialog_Container');
        this.isAdaptive = Browser.isDevice;
        this.pivotGridModule = options.pivotGridModule && options.pivotGridModule.blazor__instance ?
            options.pivotGridModule.blazor__instance : options.pivotGridModule;
        this.fieldList = options.fieldList;
        this.dataSourceSettings = options.dataSourceSettings;
        if (this.parentElement && this.parentElement.querySelector('#' + this.parentElement.id + '_title')) {
            setStyleAttribute(this.parentElement.querySelector('#' + this.parentElement.id + '_title'), { 'width': '100%' });
        }
    };
    SfPivotFieldList.prototype.initModules = function () {
        this.treeRendererModule = new TreeRenderer(this);
        this.commonActionModule = new ActionBase(this);
        this.pivotButtonModule = new PivotButton(this);
        if (this.options.allowCalculatedField) {
            this.calculatedFieldModule = new CalculatedField(this);
        }
        this.unWireEvents();
        this.wireEvents();
    };
    SfPivotFieldList.prototype.contentReady = function () {
        this.initModules();
        if (this.pivotButtonModule) {
            this.pivotButtonModule.createPivotButtonDrop();
            this.pivotButtonModule.setPivotButtonDrag();
        }
        if (this.parentElement && this.parentElement.querySelector('#' + this.parentElement.id + '_title')) {
            setStyleAttribute(this.parentElement.querySelector('#' + this.parentElement.id + '_title'), { 'width': '100%' });
        }
    };
    SfPivotFieldList.prototype.onShowFieldList = function (element, dialogElement) {
        if (element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS)) {
            addClass([element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS)], cls.ICON_HIDDEN);
        }
        dialogElement.style.top = parseInt(dialogElement.style.top, 10) < 0 ? '0px' : dialogElement.style.top;
    };
    SfPivotFieldList.prototype.removeFieldListIcon = function (element) {
        if ((!document.getElementById(element.id + 'calculateddialog') || document.getElementById(element.id + 'calculateddialog').classList.contains('e-popup-close')) && element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS)) {
            removeClass([element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS)], cls.ICON_HIDDEN);
        }
    };
    SfPivotFieldList.prototype.updateFieldList = function (containerElement) {
        var footer = containerElement.querySelector('.' + cls.FOOTER_CONTENT_CLASS);
        if (containerElement.querySelector('#' + containerElement.id + '_dialog-content')) {
            setStyleAttribute(containerElement.querySelector('#' + containerElement.id + '_dialog-content'), {
                'padding': '0'
            });
            addClass([footer], cls.FIELD_LIST_FOOTER_CLASS);
        }
        else {
            containerElement.querySelector('.' + cls.ADAPTIVE_CONTAINER_CLASS).appendChild(footer);
        }
    };
    SfPivotFieldList.prototype.updateSelectedNodes = function (node, state) {
        node = closest(node, '.' + cls.TEXT_CONTENT_CLASS);
        if (state === 'check') {
            addClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
        }
        else {
            removeClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
        }
        var li = closest(node, 'li');
        if (li && li.querySelector('ul')) {
            for (var _i = 0, _a = [].slice.call(li.querySelectorAll('li')); _i < _a.length; _i++) {
                var element = _a[_i];
                if (state === 'check') {
                    addClass([element.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
                }
                else {
                    removeClass([element.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
                }
            }
        }
    };
    SfPivotFieldList.prototype.removeFocusedElements = function () {
        if (this.element.querySelectorAll('.' + cls.BUTTON_FOCUSED).length > 0) {
            removeClass(this.element.querySelectorAll('.' + cls.BUTTON_FOCUSED), cls.BUTTON_FOCUSED);
        }
    };
    SfPivotFieldList.prototype.wireEvents = function () {
        EventHandler.add(document, 'click', this.removeFocusedElements, this);
    };
    SfPivotFieldList.prototype.unWireEvents = function () {
        EventHandler.remove(document, 'click', this.removeFocusedElements);
    };
    SfPivotFieldList.prototype.destroy = function () {
        this.unWireEvents();
        this.commonActionModule.destroy();
        this.pivotButtonModule.destroy();
        if (this.pivotGridModule) {
            this.pivotGridModule.destroy();
        }
    };
    return SfPivotFieldList;
}());
export { SfPivotFieldList };
