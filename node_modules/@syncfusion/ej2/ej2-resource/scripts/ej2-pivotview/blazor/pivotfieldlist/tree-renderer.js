import * as cls from '../common/constants';
import { createElement, addClass } from '@syncfusion/ej2-base';
var TreeRenderer = (function () {
    function TreeRenderer(parent) {
        this.parent = parent;
        this.parent.treeRendererModule = this;
    }
    TreeRenderer.prototype.updateFieldListIcons = function (id, treeData, dragText) {
        var treeElement = document.getElementById(id);
        var liElement = [].slice.call(treeElement.querySelectorAll('ul li'));
        for (var i = 0; i < liElement.length; i++) {
            for (var j = 0; j < treeData.length; j++) {
                if (treeData[j].id === liElement[i].getAttribute('data-uid')) {
                    this.updateTreeNode(liElement[i], treeData[j], dragText);
                    break;
                }
            }
        }
    };
    TreeRenderer.prototype.updateTreeNode = function (node, nodeData, dragText) {
        var allowDrag = false;
        if (this.parent.options.dataType === 'olap') {
            allowDrag = this.updateOlapTreeNode(node);
        }
        else {
            allowDrag = true;
        }
        var liTextElement = node.querySelector('.' + cls.TEXT_CONTENT_CLASS);
        if (node.querySelector('.' + cls.LIST_ICON) && liTextElement) {
            var liIconElement = node.querySelector('.' + cls.LIST_ICON);
            liTextElement.insertBefore(liIconElement, node.querySelector('.' + cls.LIST_TEXT_CLASS));
        }
        if (allowDrag && !this.parent.isAdaptive) {
            var field = this.parent.commonActionModule.getFieldInfo(nodeData.id);
            allowDrag = false;
            var dragElement = createElement('span', {
                attrs: {
                    'tabindex': '-1',
                    'aria-disabled': 'false'
                }
            });
            dragElement.appendChild(createElement('span', {
                attrs: {
                    'tabindex': '-1',
                    title: field.fieldItem ? field.fieldItem.allowDragAndDrop ? dragText : '' : dragText,
                    'aria-disabled': 'false'
                },
                className: cls.ICON + ' ' + cls.DRAG_CLASS + ' ' + (field.fieldItem ?
                    field.fieldItem.allowDragAndDrop ? '' : cls.DRAG_DISABLE_CLASS : '')
            }));
            if (node.querySelector('.' + cls.CHECKBOX_CONTAINER) && !node.querySelector('.' + cls.DRAG_CLASS) && liTextElement) {
                liTextElement.insertBefore(dragElement, node.querySelector('.' + cls.CHECKBOX_CONTAINER));
            }
            this.parent.pivotButtonModule.createDraggable(true, dragElement, field.fieldItem);
        }
        if (node.querySelector('.' + cls.NODE_CHECK_CLASS)) {
            addClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
        }
    };
    TreeRenderer.prototype.updateOlapTreeNode = function (node) {
        if (this.parent.options.dataType === 'olap' && node) {
            var textNode = node.querySelector('.' + cls.TEXT_CONTENT_CLASS);
            if (textNode.querySelector('.' + cls.CALC_MEMBER_GROUP_TYPE_ICON + ',.' + cls.MEASURE_GROUP_TYPE_ICON + ',.' +
                cls.FOLDER_TYPE_ICON + ',.' + cls.FOLDER_TYPE_OPEN_ICON + ',.' + cls.DIMENSION_TYPE_ICON + ',.' + cls.KPI_ICON)) {
                textNode.querySelector('.' + cls.CHECKBOX_CONTAINER).style.display = 'none';
            }
            if (textNode.querySelector('.' + cls.LIST_ICON) && textNode.querySelector('.' + cls.LIST_ICON).className.indexOf(cls.LEVEL_MEMBERS) > -1) {
                this.parent.isAdaptive ? textNode.querySelector('.' + cls.CHECKBOX_CONTAINER).style.display = 'none' : textNode.querySelector('.' + cls.CHECKBOX_CONTAINER).style.visibility = 'hidden';
            }
            if (textNode.querySelector('.' + cls.HIERARCHY_TYPE_ICON + ',.' + cls.ATTRIBUTE_TYPE_ICON + ',.' + cls.NAMEDSET_TYPE_ICON) ||
                textNode.querySelector('.' + cls.MEASURE_ICON + ',.' + cls.KPI_GOAL_ICON + ',.' + cls.KPI_STATUS_ICON + ',.' + cls.KPI_TREND_ICON + ',.' + cls.KPI_VALUE_ICON) ||
                textNode.querySelector('.' + cls.CALC_MEASURE_ICON + ',.' + cls.CALC_DIMENSION_ICON)) {
                if (textNode.querySelector('.' + cls.MEASURE_ICON)) {
                    textNode.querySelector('.' + cls.LIST_ICON).style.display = 'none';
                    return true;
                }
                else {
                    return true;
                }
            }
        }
        else {
            return true;
        }
        return false;
    };
    return TreeRenderer;
}());
export { TreeRenderer };
