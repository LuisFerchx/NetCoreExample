import { enableBlazorMode } from '@syncfusion/ej2-base';
import { SfPivotView } from './pivotview/sf-pivotview-fn';
import { SfPivotFieldList } from './pivotfieldlist/sf-pivotfieldlist-fn';
import * as cls from './common/constants';
var PivotView = {
    initialize: function (element, options, dotnetRef) {
        enableBlazorMode();
        new SfPivotView(element, options, dotnetRef);
    },
    initializeFieldList: function (element, options, dotnetRef) {
        enableBlazorMode();
        new SfPivotFieldList(element, options, dotnetRef);
    },
    contentReady: function (element, options, refreshContent) {
        if (element && element.blazor__instance) {
            element.blazor__instance.options = options;
            element.blazor__instance.getOptions(element, options);
            if (!refreshContent) {
                element.blazor__instance.contentReady();
            }
        }
    },
    getChartHeight: function (element, height) {
        if (element && element.blazor__instance) {
            element.blazor__instance.getChartHeight(height);
        }
    },
    onShowFieldList: function (element, dialogElement) {
        if (element && element.blazor__instance) {
            element.blazor__instance.onShowFieldList(element, dialogElement);
        }
    },
    removeFieldListIcon: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.removeFieldListIcon(element);
        }
    },
    updateFieldListIcons: function (element, id, treeData, dragText) {
        if (element && element.blazor__instance) {
            element.blazor__instance.treeRendererModule.updateFieldListIcons(id, treeData, dragText);
        }
    },
    setPivotButtonDraggable: function (element, options) {
        if (element && element.blazor__instance && element.blazor__instance.pivotButtonModule) {
            element.blazor__instance.options = options;
            element.blazor__instance.getOptions(element, options);
            element.blazor__instance.pivotButtonModule.createPivotButtonDrop();
            element.blazor__instance.pivotButtonModule.setPivotButtonDrag();
        }
    },
    isFullRowElement: function (element, top, left) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.commonActionModule.isFullRowElement(top, left);
        }
        return JSON.stringify(false);
    },
    getTreeNode: function (element, treeElement, top, left) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.commonActionModule.getTreeNode(treeElement, top, left);
        }
        return null;
    },
    updateActiveNode: function (element, treeElement, id) {
        if (element && element.blazor__instance) {
            element.blazor__instance.commonActionModule.updateActiveNode(treeElement, id);
        }
    },
    updateSelectedNodes: function (element, node, checkState) {
        if (element && element.blazor__instance) {
            element.blazor__instance.updateSelectedNodes(window.sfBlazor.getElementByXpath(node), checkState);
        }
    },
    updateFieldList: function (element, containerElement) {
        if (element && element.blazor__instance) {
            element.blazor__instance.updateFieldList(containerElement);
        }
    },
    renderToolbar: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.toolbarModule.renderToolbar();
        }
    },
    focusToolBar: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.toolbarModule.focusToolBar();
        }
    },
    getButtonPosition: function (element, target, droppedClass) {
        if (element && element.blazor__instance) {
            return JSON.stringify(element.blazor__instance.pivotButtonModule.getButtonPosition(window.sfBlazor.getElementByXpath(target), droppedClass));
        }
        return null;
    },
    getButtonLocation: function (element) {
        var position = element.querySelector('.' + cls.AXISFIELD_ICON_CLASS).getBoundingClientRect();
        return JSON.stringify([position.top + (window.scrollY || document.documentElement.scrollTop), position.left]);
    },
    selectInputRange: function (element, dialogElement) {
        if (element && element.blazor__instance) {
            element.blazor__instance.toolbarModule.selectInputRange(dialogElement);
        }
    },
    focusOnElement: function (element) {
        element.focus();
    },
    copyMdxQuery: function (element, dialogElement) {
        if (element && element.blazor__instance) {
            element.blazor__instance.toolbarModule.copyMdxQuery(dialogElement);
        }
    },
    validateInputs: function (element, filterInfo) {
        if (element && element.blazor__instance) {
            element.blazor__instance.commonActionModule.validateInputs(filterInfo);
        }
    },
    selectedCell: function (element, colIndex, rowIndex, isHeader) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.selectedCell(colIndex, rowIndex, isHeader);
        }
        return undefined;
    },
    hyperlinkCellclick: function (element, args, XPath) {
        if (element && element.blazor__instance) {
            element.blazor__instance.hyperlinkCellclick(JSON.parse(args), JSON.parse(XPath));
        }
    },
    updateEditOptions: function (element, accordId) {
        if (element && element.blazor__instance) {
            element.blazor__instance.calculatedFieldModule.updateEditOptions(accordId);
        }
    },
    accordionClick: function (element, clientX, clientY, id) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.calculatedFieldModule.accordionClick(clientX, clientY, id);
        }
        return undefined;
    },
    getAccordionValue: function (element) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.calculatedFieldModule.getAccordionValue();
        }
        return undefined;
    },
    updateAccordionLabel: function (element, target) {
        if (element && element.blazor__instance) {
            element.blazor__instance.calculatedFieldModule.updateAccordionLabel(target);
        }
    },
    getNodeLocation: function (element, treeElement, id) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.calculatedFieldModule.getNodeLocation(treeElement, id);
        }
        return undefined;
    },
    getIconInfo: function (element, top, left) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.calculatedFieldModule.getIconInfo(top, left);
        }
        return undefined;
    },
    emptyFieldName: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.calculatedFieldModule.emptyFieldName(element.id);
        }
    },
    updateCalculatedFields: function (element, isEdit, top, left, title) {
        if (element && element.blazor__instance) {
            element.blazor__instance.calculatedFieldModule.editCalculatedFieldInfo(isEdit, top, left, title);
        }
    },
    updateCalculatedFieldExpandIcons: function (element, treeElement, id) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.calculatedFieldModule.updateNodeExpandIcons(treeElement, id);
        }
        return JSON.stringify(false);
    },
    createFormulaDroppable: function (element, edit, drag, remove, edited, isEdit, fieldName, id) {
        if (element && element.blazor__instance) {
            element.blazor__instance.calculatedFieldModule.createFormulaDroppable(edit, drag, remove, edited, isEdit, fieldName, id);
        }
    },
    createSheet: function (element, format, id, index) {
        if (element && element.blazor__instance) {
            element.blazor__instance.createSheet(format, id, index);
        }
    },
    updateScrollInfo: function (element, columnCount, rowCount) {
        if (element && element.blazor__instance) {
            element.blazor__instance.virtualScrollModule.updateScrollInfo(element, columnCount, rowCount);
        }
    },
    getScrollInfo: function (element, scrollPageInfo) {
        if (element && element.blazor__instance) {
            element.blazor__instance.getScrollInfo(element, scrollPageInfo);
        }
    },
    exportDocument: function (element, filename, bytesBase64) {
        if (element && element.blazor__instance) {
            element.blazor__instance.exportDocument(element, filename, bytesBase64);
        }
    },
    calculateGridHeight: function (element, elementCreated, rowCount, columnCount) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.calculateGridHeight(elementCreated, rowCount, columnCount);
        }
        return null;
    },
    onContextMenuOpen: function (element) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.onContextMenuOpen();
        }
        return null;
    },
    getSelectedCells: function (element) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.getSelectedCells();
        }
        return null;
    },
    updateGridUI: function (element, options, columnCount, rowCount) {
        if (element && element.blazor__instance) {
            element.blazor__instance.updateGridUI(element);
            if (options) {
                element.blazor__instance.options = options;
                element.blazor__instance.getOptions(element, options);
                element.blazor__instance.virtualScrollModule.updateScrollInfo(element, columnCount, rowCount);
            }
        }
    },
    updateView: function (element, displayOption) {
        if (element && element.blazor__instance) {
            element.blazor__instance.updateView(element, displayOption);
        }
    },
    updateGridSettings: function (element, gridSetting) {
        if (element && element.blazor__instance) {
            element.blazor__instance.updateGridSettings(element, gridSetting);
        }
    },
    getClientWidth: function (element, id) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.getClientWidth(element, id);
        }
        return null;
    },
    getTableCellNode: function (element, top, left) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.getTableCellNode(element, top, left);
        }
        return null;
    },
    updateColorPickerUI: function (element, dialogElement) {
        if (element && element.blazor__instance) {
            return element.blazor__instance.updateColorPickerUI(dialogElement);
        }
    },
    destroy: function (element) {
        if (element && element.blazor__instance) {
            element.blazor__instance.destroy();
        }
    }
};
export default PivotView;
