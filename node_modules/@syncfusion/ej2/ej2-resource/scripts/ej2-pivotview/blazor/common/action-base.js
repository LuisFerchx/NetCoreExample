import { SfPivotView } from '../pivotview/sf-pivotview-fn';
import * as cls from '../common/constants';
import { closest, removeClass, isNullOrUndefined, addClass } from '@syncfusion/ej2-base';
import { CommonKeyboardInteraction } from './keyboard';
var ActionBase = (function () {
    function ActionBase(parent) {
        this.parent = parent;
        this.parent.commonActionModule = this;
        this.keyboardModule = new CommonKeyboardInteraction(parent);
        this.getElementInfo();
    }
    ActionBase.prototype.getElementInfo = function () {
        if (this.parent instanceof SfPivotView) {
            var domInfo = this.parent.element.getBoundingClientRect();
            this.parent.dotNetRef.invokeMethodAsync('GetElementInfo', domInfo.width, domInfo.height);
        }
    };
    ActionBase.prototype.updateActiveNode = function (treeElement, id) {
        removeClass(treeElement.querySelectorAll('li.' + cls.PREV_ACTIVE_NODE), cls.PREV_ACTIVE_NODE);
        addClass([treeElement.querySelector('li[data-uid=' + '\"' + id + '\"' + ']')], cls.PREV_ACTIVE_NODE);
    };
    ActionBase.prototype.isFullRowElement = function (top, left) {
        return JSON.stringify(document.elementFromPoint(left, top).classList.contains(cls.FULL_ROW));
    };
    ActionBase.prototype.validateInputs = function (filterInfo) {
        var operand1 = filterInfo.value1;
        var operand2 = filterInfo.value2;
        var operator = filterInfo.condition;
        var type = filterInfo.type;
        if (isNullOrUndefined(operand1) || operand1 === '' ||
            ['Between', 'NotBetween'].indexOf(operator) > -1 && (isNullOrUndefined(operand2) || operand2 === '')) {
            var focusElement = this.parent.parentElement.querySelector('#' + this.parent.element.id + '_' + type.toLowerCase() +
                (isNullOrUndefined(operand1) || operand1 === '' ? '_input_option_1' : '_input_option_2'));
            addClass([focusElement], cls.EMPTY_FIELD);
            focusElement.focus();
        }
    };
    ActionBase.prototype.updateDropIndicator = function (e) {
        if (this.parent.isDragging && e.target.classList.contains(cls.AXIS_CONTENT_CLASS) && e.type === 'mouseover') {
            removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);
            removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS + '-last')), cls.INDICATOR_HOVER_CLASS);
            var element = [].slice.call(e.target.querySelectorAll('.' + cls.PIVOT_BUTTON_DIV_CLASS));
            if (element.length > 0) {
                addClass([element[element.length - 1].querySelector('.' + cls.DROP_INDICATOR_CLASS + '-last')], cls.INDICATOR_HOVER_CLASS);
            }
        }
        else if (e.type === 'mouseleave') {
            removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);
            removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS + '-last')), cls.INDICATOR_HOVER_CLASS);
        }
        if (this.parent.isDragging && closest(e.target, '.' + cls.PIVOT_BUTTON_DIV_CLASS) && e.type === 'mouseover') {
            removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS + '-last')), cls.INDICATOR_HOVER_CLASS);
            removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);
            var element = closest(e.target, '.' + cls.PIVOT_BUTTON_DIV_CLASS);
            addClass([element.querySelector('.' + cls.DROP_INDICATOR_CLASS)], cls.INDICATOR_HOVER_CLASS);
        }
    };
    ActionBase.prototype.getFieldInfo = function (fieldName, isValueField) {
        var fields = [this.parent.dataSourceSettings.rows, this.parent.dataSourceSettings.columns,
            this.parent.dataSourceSettings.values, this.parent.dataSourceSettings.filters];
        for (var i = 0, len = fields.length; i < len; i++) {
            for (var j = 0, cnt = fields[i] ? fields[i].length : 0; (j < cnt && !isValueField); j++) {
                if (fields[i][j] && fields[i][j].name === fieldName) {
                    return {
                        fieldName: fieldName,
                        fieldItem: fields[i][j],
                        axis: i === 0 ? 'rows' : i === 1 ? 'columns' : i === 2 ? 'values' : 'filters',
                        position: j
                    };
                }
            }
        }
        var fieldList = this.parent.fieldList[fieldName];
        var fieldItem = fieldList || isValueField ? {
            name: fieldName,
            caption: fieldList ? fieldList.caption : fieldName,
            baseField: fieldList ? fieldList.baseField : undefined,
            baseItem: fieldList ? fieldList.baseItem : undefined,
            isCalculatedField: fieldList ? fieldList.isCalculatedField : false,
            isNamedSet: fieldList ? fieldList.isNamedSets : false,
            showNoDataItems: fieldList ? fieldList.showNoDataItems : false,
            showSubTotals: fieldList ? fieldList.showSubTotals : false,
            type: fieldList ? fieldList.aggregateType : undefined,
            showFilterIcon: fieldList ? fieldList.showFilterIcon : false,
            showSortIcon: fieldList ? fieldList.showSortIcon : false,
            showRemoveIcon: fieldList ? fieldList.showRemoveIcon : true,
            showValueTypeIcon: fieldList ? fieldList.showValueTypeIcon : false,
            showEditIcon: fieldList ? fieldList.showEditIcon : false,
            allowDragAndDrop: fieldList ? fieldList.allowDragAndDrop : true
        } : undefined;
        return {
            fieldName: fieldName,
            fieldItem: fieldItem,
            axis: isValueField ? (this.parent.dataSourceSettings.valueAxis === 'row' ? 'rows' : 'columns') : 'fieldlist',
            position: -1
        };
    };
    ActionBase.prototype.getTreeNode = function (treeElement, top, left) {
        if (treeElement) {
            return JSON.stringify(window.sfBlazor.getDomObject('currentNode', closest(document.elementFromPoint(left, top), 'li')));
        }
        return null;
    };
    ActionBase.prototype.destroy = function () {
        this.keyboardModule.destroy();
    };
    return ActionBase;
}());
export { ActionBase };
