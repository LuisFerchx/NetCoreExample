import { KeyboardEvents, closest, removeClass, addClass } from '@syncfusion/ej2-base';
import * as cls from './constants';
var CommonKeyboardInteraction = (function () {
    function CommonKeyboardInteraction(parent) {
        this.keyConfigs = {
            shiftF: 'shift+F',
            shiftS: 'shift+S',
            shiftE: 'shift+E',
            delete: 'delete',
            enter: 'enter',
            escape: 'escape',
            upArrow: 'upArrow',
            downArrow: 'downArrow'
        };
        this.parent = parent;
        this.parent.parentElement.tabIndex = this.parent.parentElement.tabIndex === -1 ? 0 : this.parent.parentElement.tabIndex;
        this.keyboardModule = new KeyboardEvents(this.parent.parentElement, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
    }
    CommonKeyboardInteraction.prototype.keyActionHandler = function (e) {
        switch (e.action) {
            case 'shiftF':
                this.processFilter(e);
                break;
            case 'shiftS':
                this.processSort(e);
                break;
            case 'shiftE':
                this.processEdit(e);
                break;
            case 'delete':
                this.processDelete(e);
                break;
            case 'enter':
                this.processEnter(e);
                break;
            case 'escape':
                this.processClose(e);
                break;
            case 'upArrow':
            case 'downArrow':
                this.processFilterNodeSelection(e);
                break;
        }
    };
    CommonKeyboardInteraction.prototype.getButtonElement = function (target) {
        var allPivotButtons = [].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
        for (var i = 0, len = allPivotButtons.length; i < len; i++) {
            if (allPivotButtons[i].getAttribute('data-uid') === target.getAttribute('data-uid')) {
                return allPivotButtons[i];
            }
        }
        return target;
    };
    CommonKeyboardInteraction.prototype.processEnter = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.PIVOT_BUTTON_CLASS)) {
            if (target.querySelector('.' + cls.AXISFIELD_ICON_CLASS) && closest(target, '.' + cls.VALUE_AXIS_CLASS)) {
                target.querySelector('.' + cls.AXISFIELD_ICON_CLASS).click();
            }
            else if (target.querySelector('.' + cls.CALC_EDIT)) {
                target.querySelector('.' + cls.CALC_EDIT).click();
            }
            else if (target.querySelector('.' + cls.SORT_CLASS) &&
                !closest(target, '.' + cls.VALUE_AXIS_CLASS) && !closest(target, '.' + cls.AXIS_FILTER_CLASS)) {
                target.querySelector('.' + cls.SORT_CLASS).click();
                this.getButtonElement(target).focus();
            }
            else if (target.querySelector('.' + cls.FILTER_COMMON_CLASS) && !closest(target, '.' + cls.VALUE_AXIS_CLASS)) {
                target.querySelector('.' + cls.FILTER_COMMON_CLASS).click();
            }
            e.preventDefault();
            return;
        }
    };
    CommonKeyboardInteraction.prototype.processSort = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.PIVOT_BUTTON_CLASS) && target.querySelector('.' + cls.SORT_CLASS) &&
            !closest(target, '.' + cls.VALUE_AXIS_CLASS) && !closest(target, '.' + cls.AXIS_FILTER_CLASS)) {
            target.querySelector('.' + cls.SORT_CLASS).click();
            this.getButtonElement(target).focus();
            e.preventDefault();
            return;
        }
    };
    CommonKeyboardInteraction.prototype.processEdit = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.PIVOT_BUTTON_CLASS) && target.querySelector('.' + cls.CALC_EDIT)) {
            target.querySelector('.' + cls.CALC_EDIT).click();
            e.preventDefault();
            return;
        }
    };
    CommonKeyboardInteraction.prototype.processFilter = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.PIVOT_BUTTON_CLASS) && target.querySelector('.' + cls.FILTER_COMMON_CLASS) &&
            !closest(target, '.' + cls.VALUE_AXIS_CLASS)) {
            target.querySelector('.' + cls.FILTER_COMMON_CLASS).click();
            e.preventDefault();
            return;
        }
    };
    CommonKeyboardInteraction.prototype.processFilterNodeSelection = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.SELECT_ALL_CLASS) && e.keyCode === 40) {
            var memberEditorTree = closest(target, '.' + cls.EDITOR_TREE_OUTER_DIV_CLASS).querySelector('.' + cls.EDITOR_TREE_CONTAINER_CLASS);
            if (memberEditorTree && memberEditorTree.querySelector('li')) {
                var firstLi = memberEditorTree.querySelector('li');
                if (memberEditorTree.querySelector('li#_active')) {
                    removeClass([memberEditorTree.querySelector('li#_active')], [cls.HOVER, cls.NODE_FOCUS]);
                    memberEditorTree.querySelector('li#_active').removeAttribute('id');
                }
                firstLi.setAttribute('id', '_active');
                addClass([firstLi], [cls.HOVER, cls.NODE_FOCUS]);
                memberEditorTree.focus();
                e.preventDefault();
                return;
            }
        }
        else if (target && closest(target, '.' + cls.EDITOR_TREE_CONTAINER_CLASS) && e.keyCode === 38) {
            var memberEditorTree = closest(target, '.' + cls.EDITOR_TREE_CONTAINER_CLASS);
            if (memberEditorTree.querySelector('li#_active.' + cls.HOVER + '.' + cls.NODE_FOCUS) && memberEditorTree.querySelector('li') &&
                memberEditorTree.querySelector('li').classList.contains(cls.PREV_ACTIVE_NODE) &&
                memberEditorTree.querySelector('li') === memberEditorTree.querySelector('li#_active.' + cls.HOVER + '.' + cls.NODE_FOCUS)) {
                removeClass(memberEditorTree.querySelectorAll('li.' + cls.PREV_ACTIVE_NODE), cls.PREV_ACTIVE_NODE);
                var allMemberEditorTree = closest(target, '.' + cls.EDITOR_TREE_OUTER_DIV_CLASS).querySelector('.' + cls.SELECT_ALL_CLASS);
                if (allMemberEditorTree && allMemberEditorTree.querySelector('li')) {
                    var firstLi = allMemberEditorTree.querySelector('li');
                    firstLi.setAttribute('id', '_active');
                    addClass([firstLi], [cls.HOVER, cls.NODE_FOCUS]);
                    allMemberEditorTree.focus();
                    e.preventDefault();
                    return;
                }
            }
        }
    };
    CommonKeyboardInteraction.prototype.processDelete = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.PIVOT_BUTTON_CLASS) && target.querySelector('.' + cls.REMOVE_CLASS)) {
            target.querySelector('.' + cls.REMOVE_CLASS).click();
            e.preventDefault();
            return;
        }
    };
    CommonKeyboardInteraction.prototype.processClose = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.POPUP + '.' + cls.POPUP_OPEN)) {
            var dialogInstance = closest(target, '.' + cls.POPUP + '.' + cls.POPUP_OPEN)['blazor__instance'];
            var pivot_1 = this;
            if (dialogInstance && !dialogInstance.closeOnEscape) {
                var fieldName_1 = dialogInstance.element.getAttribute('data-fieldName');
                dialogInstance.dotNetRef.invokeMethodAsync('CloseDialog', {
                    altKey: e.altKey,
                    ctrlKey: e.ctrlKey,
                    code: e.code,
                    key: e.key,
                    location: e.location,
                    repeat: e.repeat,
                    shiftKey: e.shiftKey,
                    metaKey: e.metaKey,
                    type: e.type
                }).then(function () {
                    if (pivot_1.parent.parentElement) {
                        var pivotButtons = [].slice.call(pivot_1.parent.parentElement.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
                        for (var _i = 0, pivotButtons_1 = pivotButtons; _i < pivotButtons_1.length; _i++) {
                            var item = pivotButtons_1[_i];
                            if (item.getAttribute('data-uid') === fieldName_1) {
                                item.focus();
                                break;
                            }
                        }
                    }
                    e.preventDefault();
                    return;
                });
            }
        }
    };
    CommonKeyboardInteraction.prototype.destroy = function () {
        if (this.keyboardModule) {
            this.keyboardModule.destroy();
        }
        else {
            return;
        }
    };
    return CommonKeyboardInteraction;
}());
export { CommonKeyboardInteraction };
