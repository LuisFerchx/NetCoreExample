import { SfPivotView } from '../pivotview/sf-pivotview-fn';
import * as cls from '../common/constants';
import { closest, Browser, removeClass, EventHandler, isNullOrUndefined, Draggable, addClass, createElement, remove, Droppable, detach } from '@syncfusion/ej2-base';
import { getZindexPartial } from '@syncfusion/ej2-popups';
var PivotButton = (function () {
    function PivotButton(parent) {
        this.parent = parent;
        this.parent.pivotButtonModule = this;
    }
    PivotButton.prototype.createPivotButtonDrop = function () {
        for (var _i = 0, _a = [].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.AXIS_CONTENT_CLASS)); _i < _a.length; _i++) {
            var element = _a[_i];
            new Droppable(element, {});
            this.unWireEvents(element);
            this.wireEvents(element);
        }
    };
    PivotButton.prototype.setPivotButtonDrag = function () {
        for (var _i = 0, _a = [].slice.call(this.parent.parentElement.querySelectorAll('.' + (this.parent instanceof SfPivotView ? cls.GROUPING_BAR_CLASS : cls.PIVOT_FIELD_LIST_CLASS) + '-button')); _i < _a.length; _i++) {
            var element = _a[_i];
            var buttonElement = element.querySelector('.' + cls.PIVOT_BUTTON_CLASS);
            this.parent.pivotButtonModule.createDraggable(false, this.parent instanceof SfPivotView ?
                buttonElement.querySelector('.' + cls.PIVOT_BUTTON_CONTENT_CLASS) : buttonElement.firstElementChild, JSON.parse(buttonElement.getAttribute('data-fieldInfo')));
        }
    };
    PivotButton.prototype.createDraggable = function (isTreeElement, element, field) {
        var _this = this;
        this.draggable = new Draggable(element, {
            clone: true,
            enableTailMode: true,
            enableAutoScroll: true,
            dragArea: this.parent.parentElement,
            helper: this.createDragClone.bind(this, field, isTreeElement),
            dragStart: this.onDragStart.bind(this, isTreeElement),
            drag: function (e) {
                _this.draggable.setProperties({
                    cursorAt: {
                        top: (!isNullOrUndefined(e.event.targetTouches) || Browser.isDevice) ? 60 : -20
                    }
                });
            },
            dragStop: this.onDragStop.bind(this, isTreeElement),
            abort: (this.parent instanceof SfPivotView ? !(this.parent.groupingBarSettings.allowDragAndDrop && field.allowDragAndDrop) ?
                '.' + cls.PIVOT_BUTTON_CLASS : '' : !field.allowDragAndDrop ? '.' + cls.PIVOT_BUTTON_CLASS : '')
        });
        if (!isTreeElement) {
            this.unWireEvents(element);
            this.wireEvents(element);
        }
    };
    PivotButton.prototype.createDragClone = function (field, isTreeElement, args) {
        var buttonElement = isTreeElement ? null : closest(args.element, '.' + cls.PIVOT_BUTTON_CLASS);
        field = buttonElement ? JSON.parse(buttonElement.getAttribute('data-fieldInfo')) : field;
        var cloneElement = createElement('div', {
            id: this.parent.element.id + '_DragClone',
            className: cls.DRAG_CLONE_CLASS
        });
        var contentElement = createElement('span', {
            className: cls.TEXT_CONTENT_CLASS,
            innerHTML: field ? field.caption ? field.caption : field.name : ''
        });
        cloneElement.appendChild(contentElement);
        document.body.appendChild(cloneElement);
        return cloneElement;
    };
    PivotButton.prototype.onDragStart = function (isTreeElement, e) {
        var _this = this;
        var element = closest(e.element, '.' + (isTreeElement ? cls.LIST_ITEM : cls.PIVOT_BUTTON_CLASS));
        this.parent.dotNetRef.invokeMethodAsync('TriggerNodeDraggingEvent', element.getAttribute('data-uid')).then(function (eventArgs) {
            if (!eventArgs.cancel) {
                _this.parent.isDragging = true;
                var data = _this.parent.fieldList[element.getAttribute('data-uid')];
                var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];
                addClass([isTreeElement ? element.querySelector('.' + cls.LIST_TEXT_CLASS) : element], cls.SELECTED_NODE_CLASS);
                if (data && data.aggregateType === 'CalculatedField') {
                    for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {
                        var axisContent = axis_1[_i];
                        addClass([_this.parent.parentElement.querySelector('.' + axisContent)], cls.NO_DRAG_CLASS);
                    }
                }
                if (document.getElementById(_this.parent.element.id + '_DragClone')) {
                    var zIndex = getZindexPartial(element);
                    document.getElementById(_this.parent.element.id + '_DragClone').style.zIndex = zIndex ? zIndex.toString() : '100000';
                }
                e.bindEvents(e.dragElement);
            }
            else {
                _this.parent.isDragging = false;
                _this.draggable.intDestroy(e.event);
                detach(document.getElementById(_this.parent.element.id + '_DragClone'));
            }
        });
    };
    PivotButton.prototype.onDragStop = function (isTreeElement, args) {
        this.parent.isDragging = false;
        var cancel = false;
        if (!isTreeElement && args.target.classList &&
            (args.target.classList.contains(cls.GROUP_CHART_VALUE) || args.target.classList.contains(cls.GROUP_CHART_VALUE_DROPDOWN))) {
            args.target = this.parent.element.querySelector('.' + cls.GROUP_CHART_ROW);
        }
        if (!isTreeElement && args.target.classList && args.element &&
            (args.target.classList.contains(cls.GROUP_CHART_COLUMN) || args.target.classList.contains(cls.GROUP_CHART_COLUMN_DROPDOWN))) {
            cancel = true;
        }
        var element = closest(args.element, '.' + (isTreeElement ? cls.LIST_ITEM : cls.PIVOT_BUTTON_CLASS));
        if (this.parent.parentElement.querySelector('.' + cls.SELECTED_NODE_CLASS)) {
            removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.SELECTED_NODE_CLASS)), cls.SELECTED_NODE_CLASS);
        }
        var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];
        for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {
            var axisContent = axis_2[_i];
            removeClass([this.parent.parentElement.querySelector('.' + axisContent)], cls.NO_DRAG_CLASS);
        }
        removeClass([isTreeElement ? element.querySelector('.' + cls.LIST_TEXT_CLASS) : element], cls.SELECTED_NODE_CLASS);
        if (document.getElementById(this.parent.element.id + '_DragClone')) {
            remove(args.helper ? args.helper : document.getElementById(this.parent.element.id + '_DragClone'));
        }
        document.body.style.cursor = 'auto';
        if (!this.isNodeDropped(isTreeElement, args, element) || !isTreeElement && cancel) {
            return;
        }
        this.nodeStateModified(isTreeElement, args, cancel, element.getAttribute('data-uid'));
    };
    PivotButton.prototype.nodeStateModified = function (isTreeElement, args, cancel, fieldName) {
        var target = closest(args.target, '.' + cls.DROPPABLE_CLASS) ? JSON.stringify(window.sfBlazor.getDomObject('dropTarget', closest(args.target, '.' + cls.DROPPABLE_CLASS))) : undefined;
        var element = isTreeElement ? undefined : JSON.stringify(window.sfBlazor.getDomObject('element', args.element.parentElement));
        this.parent.dotNetRef.invokeMethodAsync('OnFieldDropped', window.sfBlazor.getDomObject('target', args.target).xPath, target, element, isTreeElement || cancel ? true : false, fieldName);
    };
    PivotButton.prototype.isNodeDropped = function (isTreeElement, args, element) {
        var isDropped = true;
        var targetID = element.getAttribute('data-uid');
        if ((this.parent.fieldList[targetID] && this.parent.fieldList[targetID].isSelected) || !isTreeElement) {
            var target = isTreeElement ? this.getButton(targetID) : element;
            var axisPanel = closest(target, '.' + cls.DROPPABLE_CLASS);
            var droppableElement = closest(args.target, '.' + cls.DROPPABLE_CLASS);
            if (target && axisPanel && axisPanel === droppableElement) {
                var pivotButtons = [].slice.call(axisPanel.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
                var dropTarget = closest(args.target, '.' + cls.PIVOT_BUTTON_DIV_CLASS);
                var sourcePosition = void 0;
                var dropPosition = -1;
                for (var i = 0; i < pivotButtons.length; i++) {
                    if (pivotButtons[i].id === target.id) {
                        sourcePosition = i;
                    }
                    if (dropTarget) {
                        var droppableButton = dropTarget.querySelector('.' + cls.PIVOT_BUTTON_CLASS);
                        if (pivotButtons[i].id === droppableButton.id) {
                            dropPosition = i;
                        }
                    }
                }
                if (sourcePosition === dropPosition || sourcePosition === pivotButtons.length - 1 && dropPosition === -1) {
                    removeClass([].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);
                    isDropped = false;
                }
            }
        }
        return isDropped;
    };
    PivotButton.prototype.getButton = function (fieldName) {
        for (var _i = 0, _a = [].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS)); _i < _a.length; _i++) {
            var buttonElement = _a[_i];
            if (buttonElement.id === fieldName) {
                return buttonElement;
            }
        }
        return undefined;
    };
    PivotButton.prototype.getButtonPosition = function (target, droppedClass) {
        var buttonElement = closest(target, '.' + cls.PIVOT_BUTTON_DIV_CLASS);
        if (buttonElement) {
            buttonElement = buttonElement.querySelector('.' + cls.PIVOT_BUTTON_CLASS);
            var pivotButtons = [].slice.call(this.parent.parentElement.querySelector('.e-' + droppedClass).querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
            for (var i = 0, n = pivotButtons.length; i < n; i++) {
                if (pivotButtons[i].id === buttonElement.id) {
                    return i;
                }
            }
        }
        return -1;
    };
    PivotButton.prototype.wireEvents = function (element) {
        EventHandler.add(element, 'mouseover', this.parent.commonActionModule.updateDropIndicator, this);
        EventHandler.add(element, 'mouseleave', this.parent.commonActionModule.updateDropIndicator, this);
    };
    PivotButton.prototype.unWireEvents = function (element) {
        EventHandler.remove(element, 'mouseover', this.parent.commonActionModule.updateDropIndicator);
        EventHandler.remove(element, 'mouseleave', this.parent.commonActionModule.updateDropIndicator);
    };
    PivotButton.prototype.destroy = function () {
        for (var _i = 0, _a = [].slice.call(this.parent.parentElement.querySelectorAll('.' + cls.AXIS_CONTENT_CLASS)); _i < _a.length; _i++) {
            var element = _a[_i];
            this.unWireEvents(element);
        }
        if (this.draggable && this.draggable.isDestroyed) {
            this.draggable.destroy();
        }
    };
    return PivotButton;
}());
export { PivotButton };
