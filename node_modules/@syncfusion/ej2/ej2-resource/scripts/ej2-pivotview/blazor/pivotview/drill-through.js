import * as cls from '../common/constants';
import { EventHandler } from '@syncfusion/ej2-base';
var DrillThrough = (function () {
    function DrillThrough(parent) {
        this.parent = parent;
        this.parent.drillThroughModule = this;
    }
    DrillThrough.prototype.addInternalEvents = function () {
        this.wireEvents();
    };
    DrillThrough.prototype.wireEvents = function () {
        this.unWireEvents();
        EventHandler.add(this.parent.element, 'dblclick', this.mouseClickHandler, this);
    };
    DrillThrough.prototype.unWireEvents = function () {
        EventHandler.remove(this.parent.element, 'dblclick', this.mouseClickHandler);
    };
    DrillThrough.prototype.mouseClickHandler = function (e) {
        var target = e.target;
        var element;
        if (target.classList.contains(cls.STACKED_HEADER_CELL_DIV) || target.classList.contains(cls.CELLVALUE) ||
            target.classList.contains(cls.HEADER_CELL_DIV)) {
            element = target.parentElement;
        }
        else if (target.classList.contains(cls.HEADERCELL) || target.classList.contains(cls.ROW_CELL_CLASS)) {
            element = target;
        }
        else if (target.classList.contains(cls.HEADER_TEXT)) {
            element = target.parentElement.parentElement;
        }
        if (element) {
            if (this.parent.options.allowDrillThrough && element.classList.contains(cls.VALUESCONTENT) || this.parent.editSettings.allowEditing) {
                var colIndex = Number(element.getAttribute('aria-colindex'));
                var rowIndex = Number(element.getAttribute('index'));
                this.parent.dotNetRef.invokeMethodAsync('MouseDoubleClickHandler', rowIndex, colIndex, JSON.stringify(window.sfBlazor.getDomObject('currentTarget', element)));
            }
        }
    };
    DrillThrough.prototype.destroy = function () {
        this.unWireEvents();
    };
    return DrillThrough;
}());
export { DrillThrough };
