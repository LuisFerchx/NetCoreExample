import * as cls from '../common/constants';
import { PivotButton } from '../common/pivot-button';
import { closest, removeClass, EventHandler, Droppable, setStyleAttribute, formatUnit } from '@syncfusion/ej2-base';
var GroupingBar = (function () {
    function GroupingBar(parent) {
        this.parent = parent;
        this.parent.groupingBarModule = this;
        this.parent.pivotButtonModule = new PivotButton(this.parent);
    }
    GroupingBar.prototype.updatePivotButtons = function () {
        this.createPivotButtonDrop();
        this.parent.pivotButtonModule.setPivotButtonDrag();
    };
    GroupingBar.prototype.createPivotButtonDrop = function () {
        for (var _i = 0, _a = [].slice.call(this.parent.element.querySelectorAll('.' + cls.AXIS_CONTAINER)); _i < _a.length; _i++) {
            var element = _a[_i];
            var buttonElement = element.firstElementChild;
            if (this.parent.groupingBarSettings.allowDragAndDrop) {
                new Droppable(buttonElement, {});
            }
            this.unWireEvent(buttonElement);
            this.wireEvent(buttonElement);
        }
    };
    GroupingBar.prototype.refreshUI = function () {
        var groupingTable = this.parent.element.querySelector('.' + cls.GRID_GROUPING_BAR_CLASS);
        var groupingChartTable = this.parent.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS);
        if (groupingChartTable) {
            groupingChartTable.style.width = this.parent.internalGrid.element.offsetWidth + 'px';
        }
        if (groupingTable) {
            groupingTable.style.minWidth = '400px';
            var rowPanel = groupingTable.querySelector('.' + cls.GROUP_ROW_CLASS);
            var valuePanel = groupingTable.querySelector('.' + cls.GROUP_VALUE_CLASS);
            var columnPanel = groupingTable.querySelector('.' + cls.GROUP_COLUMN_CLASS);
            var filterPanel = groupingTable.querySelector('.' + cls.GROUP_FILTER_CLASS);
            var leftAxisPanel = groupingTable.querySelector('.' + cls.LEFT_AXIS_PANEL_CLASS);
            var rightAxisPanel = groupingTable.querySelector('.' + cls.RIGHT_AXIS_PANEL_CLASS);
            groupingTable.style.width = this.parent.element.querySelector('#' + this.parent.element.id + '_grid').offsetWidth + 'px';
            var colGroupElement = this.parent.element.querySelector('.' + cls.FROZENHEADER_DIV).querySelector('colgroup').children[0];
            var rightAxisWidth = groupingTable.offsetWidth - parseInt(colGroupElement.style.width, 10) + 'px';
            leftAxisPanel.style.minWidth = colGroupElement.style.width;
            valuePanel.style.width = colGroupElement.style.width;
            rightAxisPanel.style.width = rightAxisWidth;
            if (this.parent.element.querySelector('#' + this.parent.element.id + '_grid')) {
                var emptyRowHeader = this.parent.element.querySelector('.' + cls.FROZENHEADER_DIV).querySelector('.' + cls.COLUMN_HEADER);
                emptyRowHeader.querySelector('.' + cls.HEADERCELL).classList.add(cls.GROUP_ROW);
                emptyRowHeader.style.height = emptyRowHeader.querySelector('.' + cls.RESIZE_HANDLER).style.height = 'auto';
                if (this.parent.internalGrid.element.querySelector('.' + cls.GROUP_ROW_CLASS) && emptyRowHeader.querySelector('.' + cls.AXIS_ROW_CLASS)) {
                    rowPanel = rowPanel ? rowPanel : this.parent.internalGrid.element.querySelector('.' + cls.GROUP_ROW_CLASS);
                    rowPanel.style.height = 'auto';
                }
                else {
                    rowPanel.style.height = this.parent.element.querySelector('.' + cls.HEADERCONTENT).offsetHeight + 'px';
                    emptyRowHeader.querySelector('.' + cls.GROUP_ROW).appendChild(groupingTable.querySelector('.' + cls.AXIS_ROW_CLASS));
                }
                emptyRowHeader.querySelector('.' + cls.GROUP_ROW).querySelector('.' + cls.HEADER_CELL_DIV).style.display = 'none';
                emptyRowHeader.querySelector('.' + cls.GROUP_ROW).querySelector('.' + cls.SORT_FILTER_DIV).style.display = 'none';
                var colRowElements = [].slice.call(this.parent.element.querySelector('.' + cls.MOVABLEHEADER_DIV).querySelector('thead').querySelectorAll('tr'));
                var columnRows = colRowElements.filter(function (trCell) {
                    return trCell.childNodes.length > 0;
                });
                for (var _i = 0, columnRows_1 = columnRows; _i < columnRows_1.length; _i++) {
                    var element = columnRows_1[_i];
                    setStyleAttribute(element, { 'height': 'auto' });
                }
                var groupHeight = this.parent.element.querySelector('.' + cls.HEADERCONTENT).offsetHeight;
                rowPanel.style.height = groupHeight + 'px';
                columnPanel.style.height = filterPanel.style.height = 'auto';
                var rightPanelHeight = (valuePanel.offsetHeight / 2);
                if (rightPanelHeight > columnPanel.offsetHeight) {
                    setStyleAttribute(filterPanel, { height: formatUnit(rightPanelHeight) });
                    setStyleAttribute(columnPanel, { height: formatUnit(rightPanelHeight + 2) });
                }
                if (this.parent.element.querySelector('.' + cls.FROZENHEADER_DIV).querySelector('.' + cls.RESIZE_HANDLER)) {
                    emptyRowHeader.style.height = this.parent.element.querySelector('.' + cls.FROZENHEADER_DIV).querySelector('.' + cls.RESIZE_HANDLER).style.height = groupHeight + 'px';
                }
                var colHeight = groupHeight / columnRows.length;
                for (var _a = 0, columnRows_2 = columnRows; _a < columnRows_2.length; _a++) {
                    var element = columnRows_2[_a];
                    setStyleAttribute(element, { 'height': colHeight + 'px' });
                    var rowHeader = [].slice.call(element.querySelectorAll('.' + cls.RESIZE_HANDLER));
                    for (var _b = 0, rowHeader_1 = rowHeader; _b < rowHeader_1.length; _b++) {
                        var handlerElement = rowHeader_1[_b];
                        setStyleAttribute(handlerElement, { 'height': closest(handlerElement, 'th').offsetHeight + 'px' });
                    }
                }
            }
        }
    };
    GroupingBar.prototype.wireEvent = function (element) {
        EventHandler.add(element, 'mouseover', this.dropIndicatorUpdate, this);
        EventHandler.add(element, 'mouseleave', this.dropIndicatorUpdate, this);
    };
    GroupingBar.prototype.unWireEvent = function (element) {
        EventHandler.remove(element, 'mouseover', this.dropIndicatorUpdate);
        EventHandler.remove(element, 'mouseleave', this.dropIndicatorUpdate);
    };
    GroupingBar.prototype.dropIndicatorUpdate = function (e) {
        if ((this.parent.isDragging && e.target.classList.contains(cls.DROPPABLE_CLASS) && e.type === 'mouseover') ||
            e.type === 'mouseleave') {
            removeClass([].slice.call(this.parent.element.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);
            removeClass([].slice.call(this.parent.element.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS + '-last')), cls.INDICATOR_HOVER_CLASS);
        }
    };
    GroupingBar.prototype.destroy = function () {
        for (var _i = 0, _a = [].slice.call(this.parent.element.querySelectorAll('.' + cls.AXIS_CONTAINER)); _i < _a.length; _i++) {
            var element = _a[_i];
            this.unWireEvent(element.firstElementChild);
        }
    };
    return GroupingBar;
}());
export { GroupingBar };
