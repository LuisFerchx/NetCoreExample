import { KeyboardEvents, closest, addClass, removeClass } from '@syncfusion/ej2-base';
import * as cls from '../common/constants';
var KeyboardInteraction = (function () {
    function KeyboardInteraction(parent) {
        this.keyConfigs = {
            tab: 'tab',
            shiftTab: 'shift+tab',
            enter: 'enter',
            shiftEnter: 'shift+enter',
            ctrlEnter: 'ctrl+enter',
            ctrlShiftF: 'ctrl+shift+f'
        };
        this.parent = parent;
        this.event = undefined;
        this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
        this.pivotViewKeyboardModule = new KeyboardEvents(this.parent.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
    }
    KeyboardInteraction.prototype.keyActionHandler = function (e) {
        switch (e.action) {
            case 'tab':
                this.processTab(e);
                break;
            case 'shiftTab':
                this.processShiftTab(e);
                break;
            case 'enter':
            case 'shiftEnter':
            case 'ctrlEnter':
                this.processEnter(e);
                break;
            case 'ctrlShiftF':
                this.toggleFieldList(e);
                break;
        }
    };
    KeyboardInteraction.prototype.getAdjacentButton = function (target, position) {
        var allPivotButtons = this.allpivotButtons(target);
        removeClass(allPivotButtons, cls.BUTTON_FOCUSED);
        if (this.parent.internalGrid &&
            this.parent.internalGrid.element.querySelector('.' + cls.PIVOT_BUTTON_CLASS)) {
            var len = allPivotButtons.length;
            for (var i = 0; i < len; i++) {
                if (allPivotButtons[i].getAttribute('data-uid') === target.getAttribute('data-uid')) {
                    var adjacentButton = position === 'next' ? allPivotButtons[i + 1] : allPivotButtons[i - 1];
                    return (adjacentButton ? adjacentButton : target);
                }
            }
        }
        return target;
    };
    KeyboardInteraction.prototype.allpivotButtons = function (target) {
        var pivotButtons = [];
        if (this.parent.options.showGroupingBar) {
            var columnFilterValueGroup = closest(target, '.' + cls.GRID_GROUPING_BAR_CLASS);
            var rowGroup = closest(target, '.' + cls.GROUP_PIVOT_ROW);
            var chartGroup = closest(target, '.' + cls.CHART_GROUPING_BAR_CLASS);
            var tableAxis = target.classList.contains(cls.ROWSHEADER);
            var chartAxis = void 0;
            var rowAxis = void 0;
            var columnFilterValueAxis = void 0;
            if (columnFilterValueGroup !== null) {
                rowAxis = columnFilterValueGroup.classList.contains(cls.GRID_GROUPING_BAR_CLASS);
            }
            else if (rowGroup !== null) {
                columnFilterValueAxis = rowGroup.classList.contains(cls.GROUP_PIVOT_ROW);
            }
            else if (chartGroup !== null) {
                chartAxis = chartGroup.classList.contains(cls.CHART_GROUPING_BAR_CLASS);
            }
            if (rowAxis || columnFilterValueAxis || tableAxis) {
                var groupingbarButton = [].slice.call(this.parent.element.querySelector('.' + cls.GRID_GROUPING_BAR_CLASS).querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
                var headerButton = [].slice.call(this.parent.element.querySelector('.' + cls.GROUP_PIVOT_ROW).querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
                pivotButtons = groupingbarButton.concat(headerButton);
            }
            else if (chartAxis) {
                pivotButtons = [].slice.call(this.parent.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS).querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
            }
        }
        return pivotButtons;
    };
    KeyboardInteraction.prototype.processTab = function (e) {
        var _this = this;
        var target = e.target;
        if (target && (closest(target, '.' + cls.PIVOT_BUTTON_CLASS) || target.classList.contains(cls.GROUP_ROW))) {
            if (this.parent.internalGrid) {
                if (target.classList.contains(cls.GROUP_ROW) && target.querySelector('.' + cls.BUTTON_FOCUSED)) {
                    target = target.querySelector('.' + cls.BUTTON_FOCUSED);
                }
                var nextButton = this.getAdjacentButton(target, 'next');
                if (nextButton.getAttribute('data-uid') !== target.getAttribute('data-uid')) {
                    addClass([nextButton], cls.BUTTON_FOCUSED);
                    nextButton.focus();
                }
                e.preventDefault();
                return;
            }
        }
        else if (target && closest(target, '.' + cls.GRID_TOOLBAR) && this.parent.options.showToolbar) {
            clearTimeout(this.timeOutObj);
            this.timeOutObj = setTimeout(function () {
                var activeElement = _this.getAdjacentToolbarItem(document.activeElement, 'next');
                removeClass(closest(target, '.' + cls.GRID_TOOLBAR).querySelectorAll('.' + cls.MENU_ITEM_CLASS + '.' + cls.FOCUSED_CLASS), cls.FOCUSED_CLASS);
                if (activeElement && activeElement.classList.contains(cls.MENU_ITEM_CLASS)) {
                    addClass([activeElement], cls.FOCUSED_CLASS);
                }
            });
        }
    };
    KeyboardInteraction.prototype.getAdjacentToolbarItem = function (activeElement, position) {
        if (activeElement.classList.contains(cls.MENU_ITEM_CLASS) && activeElement.classList.contains(cls.FOCUSED_CLASS)) {
            var toolbarItem = closest(activeElement, '.' + cls.TOOLBAR_ITEM);
            var toolbarItems = [].slice.call(closest(activeElement, '.' + cls.GRID_TOOLBAR).querySelectorAll('.' + cls.TOOLBAR_ITEM + ':not(.' + cls.OVERLAY + ')'));
            if (position === 'next') {
                for (var i = 0; i < toolbarItems.length; i++) {
                    if (toolbarItem.id === toolbarItems[i].id) {
                        return this.getActiveElement(toolbarItems[i + 1]);
                    }
                }
            }
            else {
                for (var i = toolbarItems.length - 1; i > -1; i--) {
                    if (toolbarItem.id === toolbarItems[i].id) {
                        return this.getActiveElement(toolbarItems[i - 1]);
                    }
                }
            }
        }
        return activeElement;
    };
    KeyboardInteraction.prototype.getActiveElement = function (item) {
        if (item) {
            if (item.firstElementChild.tagName.toLowerCase() === 'button') {
                item.firstElementChild.focus();
                return item.firstElementChild;
            }
            else if (item.querySelector('.' + cls.MENU_ITEM_CLASS)) {
                item.querySelector('.' + cls.MENU_ITEM_CLASS).focus();
                return item.querySelector('.' + cls.MENU_ITEM_CLASS);
            }
        }
        return document.activeElement;
    };
    KeyboardInteraction.prototype.processShiftTab = function (e) {
        var _this = this;
        var target = e.target;
        if (target && (closest(target, '.' + cls.PIVOT_BUTTON_CLASS) || target.classList.contains(cls.GROUP_ROW))) {
            if (this.parent.internalGrid) {
                if (target.classList.contains(cls.GROUP_ROW) && target.querySelector('.' + cls.BUTTON_FOCUSED)) {
                    target = target.querySelector('.' + cls.BUTTON_FOCUSED);
                }
                else if (target.classList.contains(cls.GROUP_ROW)) {
                    target = this.parent.element.querySelector('.' + cls.BUTTON_FOCUSED) ?
                        this.parent.element.querySelector('.' + cls.BUTTON_FOCUSED) :
                        this.parent.element.querySelector('.' + cls.GRID_GROUPING_BAR_CLASS);
                    var allPivotButtons = this.allpivotButtons(target);
                    if (allPivotButtons.length > 0 && allPivotButtons[allPivotButtons.length - 1]) {
                        allPivotButtons[allPivotButtons.length - 1].focus();
                        removeClass(allPivotButtons, cls.BUTTON_FOCUSED);
                        addClass([allPivotButtons[allPivotButtons.length - 1]], cls.BUTTON_FOCUSED);
                        e.preventDefault();
                        return;
                    }
                }
                var prevButton = this.getAdjacentButton(target, 'previous');
                if (prevButton.getAttribute('data-uid') !== target.getAttribute('data-uid')) {
                    prevButton.focus();
                    e.preventDefault();
                    return;
                }
            }
        }
        else if (target && this.parent.internalGrid && (target.classList.contains(cls.MOVABLE_FIRST) ||
            (target.classList.contains(cls.ROWSHEADER) && closest(target, 'tr').getAttribute('data-uid') ===
                this.parent.internalGrid.element.querySelector('.' + cls.FROZENCONTENT_DIV + ' tr').getAttribute('data-uid')))) {
            var allPivotButtons_1 = this.allpivotButtons(target);
            if (allPivotButtons_1.length > 0) {
                setTimeout(function () {
                    allPivotButtons_1[allPivotButtons_1.length - 1].focus();
                });
                removeClass(allPivotButtons_1, cls.BUTTON_FOCUSED);
                addClass([allPivotButtons_1[allPivotButtons_1.length - 1]], cls.BUTTON_FOCUSED);
                e.preventDefault();
                return;
            }
        }
        else if (target && closest(target, '.' + cls.GRID_TOOLBAR) &&
            this.parent.options.showToolbar) {
            clearTimeout(this.timeOutObj);
            this.timeOutObj = setTimeout(function () {
                var activeElement = _this.getAdjacentToolbarItem(document.activeElement, 'previous');
                removeClass(closest(target, '.' + cls.GRID_TOOLBAR).querySelectorAll('.' + cls.MENU_ITEM_CLASS + '.' + cls.FOCUSED_CLASS), cls.FOCUSED_CLASS);
                if (activeElement && activeElement.classList.contains(cls.MENU_ITEM_CLASS)) {
                    addClass([activeElement], cls.FOCUSED_CLASS);
                }
            });
        }
    };
    KeyboardInteraction.prototype.processEnter = function (e) {
        var target = e.target;
        if (target && closest(target, '.' + cls.GRID_CLASS)) {
            if (e.keyCode === 13 && !e.shiftKey && !e.ctrlKey) {
                if (target.querySelector('.' + cls.ICON)) {
                    this.event = e;
                    target.querySelector('.' + cls.ICON).click();
                }
                else if (target.classList.contains(cls.VALUESCONTENT)) {
                    target.dispatchEvent(new MouseEvent('dblclick', {
                        'view': window,
                        'bubbles': true,
                        'cancelable': true
                    }));
                }
            }
            else if (e.keyCode === 13 && e.shiftKey && !e.ctrlKey) {
                if (this.parent.options.enableValueSorting) {
                    this.event = e;
                    target.click();
                }
            }
            else if (e.keyCode === 13 && !e.shiftKey && e.ctrlKey) {
                if (this.parent.options.hyperlinkSettings && target.querySelector('a')) {
                    target.querySelector('a').click();
                }
            }
            e.preventDefault();
            return;
        }
    };
    KeyboardInteraction.prototype.toggleFieldList = function (e) {
        var pivot = this.parent;
        var target = e.target;
        if (pivot && pivot.options.showFieldList &&
            pivot.element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS)) {
            if (!pivot.element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS).classList.contains(cls.ICON_HIDDEN)) {
                pivot.element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS).click();
                e.preventDefault();
                return;
            }
            else if ((pivot.element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS).classList.contains(cls.ICON_HIDDEN) ||
                pivot.options.showToolbar) && target && closest(target, '.' + cls.PIVOT_VIEW_CLASS) && pivot.pivotFieldListModule &&
                pivot.pivotFieldListModule.parentElement && pivot.pivotFieldListModule.parentElement.classList.contains(cls.POPUP_OPEN)) {
                var dialogInstance = pivot.pivotFieldListModule.parentElement['blazor__instance'];
                if (dialogInstance && !dialogInstance.closeOnEscape) {
                    dialogInstance.dotNetRef.invokeMethodAsync('CloseDialog', {
                        altKey: e.altKey,
                        ctrlKey: e.ctrlKey,
                        code: e.code,
                        key: e.key,
                        location: e.location,
                        repeat: e.repeat,
                        shiftKey: e.shiftKey,
                        metaKey: e.metaKey,
                        type: e.type
                    });
                }
            }
        }
    };
    KeyboardInteraction.prototype.destroy = function () {
        if (this.pivotViewKeyboardModule) {
            this.pivotViewKeyboardModule.destroy();
        }
        else {
            return;
        }
    };
    return KeyboardInteraction;
}());
export { KeyboardInteraction };
