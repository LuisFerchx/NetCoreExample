import * as cls from '../common/constants';
import { EventHandler } from '@syncfusion/ej2-base';
import { setStyleAttribute, createElement } from '@syncfusion/ej2-base';
var VirtualScroll = (function () {
    function VirtualScroll(parent) {
        this.previousValues = { top: 0, left: 0 };
        this.frozenPreviousValues = { top: 0, left: 0 };
        this.eventType = '';
        this.isScrolling = false;
        this.parent = parent;
        this.parent.virtualScrollModule = this;
    }
    VirtualScroll.prototype.addInternalEvents = function () {
        this.wireEvents();
    };
    VirtualScroll.prototype.wireEvents = function () {
        this.unWireEvents();
        var mCont = this.parent.element.querySelector('.' + cls.MOVABLECONTENT_DIV);
        var fCont = this.parent.element.querySelector('.' + cls.FROZENCONTENT_DIV);
        var mHdr = this.parent.element.querySelector('.' + cls.MOVABLEHEADER_DIV);
        EventHandler.clearEvents(mCont);
        EventHandler.clearEvents(fCont);
        EventHandler.add(mCont, 'scroll touchmove pointermove', this.onHorizondalScroll(mHdr, mCont, fCont), this);
        EventHandler.add(mCont, 'scroll wheel touchmove pointermove keyup keydown', this.onVerticalScroll(fCont, mCont), this);
        EventHandler.add(mCont, 'mouseup touchend', this.common(mHdr, mCont, fCont), this);
        EventHandler.add(fCont, 'wheel', this.onWheelScroll(mCont, fCont), this);
        EventHandler.add(fCont, 'touchstart pointerdown', this.setPageXY(), this);
        EventHandler.add(fCont, 'touchmove pointermove', this.onTouchScroll(mHdr, mCont, fCont), this);
        EventHandler.add(mHdr, 'touchstart pointerdown', this.setPageXY(), this);
        EventHandler.add(mHdr, 'touchmove pointermove', this.onTouchScroll(mHdr, mCont, fCont), this);
    };
    VirtualScroll.prototype.unWireEvents = function () {
        var mCont = this.parent.element.querySelector('.' + cls.MOVABLECONTENT_DIV);
        var fCont = this.parent.element.querySelector('.' + cls.FROZENCONTENT_DIV);
        var mHdr = this.parent.element.querySelector('.' + cls.MOVABLEHEADER_DIV);
        EventHandler.remove(mCont, 'scroll touchmove pointermove', this.onHorizondalScroll(mHdr, mCont, fCont));
        EventHandler.remove(mCont, 'scroll wheel touchmove pointermove keyup keydown', this.onVerticalScroll(fCont, mCont));
        EventHandler.remove(mCont, 'mouseup touchend', this.common(mHdr, mCont, fCont));
        EventHandler.remove(fCont, 'wheel', this.onWheelScroll(mCont, fCont));
        EventHandler.remove(fCont, 'touchstart pointerdown', this.setPageXY());
        EventHandler.remove(fCont, 'touchmove pointermove', this.onTouchScroll(mHdr, mCont, fCont));
        EventHandler.remove(mHdr, 'touchstart pointerdown', this.setPageXY());
        EventHandler.remove(mHdr, 'touchmove pointermove', this.onTouchScroll(mHdr, mCont, fCont));
    };
    VirtualScroll.prototype.onWheelScroll = function (mCont, fCont) {
        var _this = this;
        var element = mCont;
        return function (e) {
            var top = element.scrollTop + (e.deltaMode === 1 ? e.deltaY * 30 : e.deltaY);
            if (_this.frozenPreviousValues.top === top) {
                return;
            }
            e.preventDefault();
            fCont.scrollTop = top;
            element.scrollTop = top;
            _this.frozenPreviousValues.top = top;
            _this.eventType = e.type;
        };
    };
    VirtualScroll.prototype.getPointXY = function (e) {
        var pageXY = { x: 0, y: 0 };
        if (!(e.touches && e.touches.length)) {
            pageXY.x = e.pageX;
            pageXY.y = e.pageY;
        }
        else {
            pageXY.x = e.touches[0].pageX;
            pageXY.y = e.touches[0].pageY;
        }
        return pageXY;
    };
    VirtualScroll.prototype.onTouchScroll = function (mHdr, mCont, fCont) {
        var _this = this;
        var element = mCont;
        return function (e) {
            if (e.pointerType === 'mouse') {
                return;
            }
            var pageXY = _this.getPointXY(e);
            var top = element.scrollTop + (_this.pageXY.y - pageXY.y);
            var left = element.scrollLeft + (_this.pageXY.x - pageXY.x);
            if (_this.parent.element.querySelector('.' + cls.HEADERCONTENT).contains(e.target)) {
                if (_this.frozenPreviousValues.left === left || left < 0) {
                    return;
                }
                mHdr.scrollLeft = left;
                element.scrollLeft = left;
                _this.pageXY.x = pageXY.x;
                _this.frozenPreviousValues.left = left;
            }
            else {
                if (_this.frozenPreviousValues.top === top || top < 0) {
                    return;
                }
                fCont.scrollTop = top;
                element.scrollTop = top;
                _this.pageXY.y = pageXY.y;
                _this.frozenPreviousValues.top = top;
            }
            _this.eventType = e.type;
        };
    };
    VirtualScroll.prototype.update = function (mHdr, mCont, top, left, e) {
        this.isScrolling = true;
        if (this.parent.pageSettings) {
            if (this.direction === 'vertical') {
                var rowValues = this.parent.dataSourceSettings.valueAxis === 'row' ? this.parent.dataSourceSettings.values.length : 1;
                var exactSize = (this.parent.pageSettings.rowSize * rowValues * this.parent.gridSettings.rowHeight);
                var section = Math.ceil(top / exactSize);
                this.parent.scrollPosObject.vertical = section;
                var rowStartPos = 0;
                if (this.parent.options.dataType === 'pivot') {
                    this.parent.dotNetRef.invokeMethodAsync('UpdateScrollInfo', section, this.direction);
                    rowStartPos = this.parent.scrollPageInfo.rowStartPos;
                    var exactpage = Math.ceil(rowStartPos / (this.parent.pageSettings.rowSize * rowValues));
                    var pos = exactSize * exactpage -
                        (this.parent.scrollPageInfo.rowFirstLvl * rowValues * this.parent.gridSettings.rowHeight);
                    this.parent.scrollPosObject.verticalSection = pos;
                }
            }
            else {
                var colValues = this.parent.dataSourceSettings.valueAxis === 'column' ? this.parent.dataSourceSettings.values.length : 1;
                var exactSize = (this.parent.pageSettings.columnSize *
                    colValues * this.parent.gridSettings.columnWidth);
                var section = Math.ceil(left / exactSize);
                this.parent.scrollPosObject.horizontal = section;
                var colStartPos = 0;
                if (this.parent.options.dataType === 'pivot') {
                    this.parent.dotNetRef.invokeMethodAsync('UpdateScrollInfo', section, this.direction);
                    colStartPos = this.parent.scrollPageInfo.colStartPos;
                    var exactPage = Math.ceil(colStartPos / (this.parent.pageSettings.columnSize * colValues));
                    var pos = exactSize * exactPage -
                        (this.parent.scrollPageInfo.colFirstLvl * colValues * this.parent.gridSettings.columnWidth);
                    this.parent.scrollPosObject.horizontalSection = pos;
                }
            }
        }
    };
    VirtualScroll.prototype.setPageXY = function () {
        var _this = this;
        return function (e) {
            if (e.pointerType === 'mouse') {
                return;
            }
            _this.pageXY = _this.getPointXY(e);
        };
    };
    VirtualScroll.prototype.common = function (mHdr, mCont, fCont) {
        var _this = this;
        return function (e) {
            _this.update(mHdr, mCont, mCont.scrollTop * _this.parent.verticalScrollScale, mCont.scrollLeft * _this.parent.horizontalScrollScale, e);
        };
    };
    VirtualScroll.prototype.onHorizondalScroll = function (mHdr, mCont, fCont) {
        var _this = this;
        var timeOutObj;
        return function (e) {
            var left = mCont.scrollLeft * _this.parent.horizontalScrollScale;
            if (e.type === 'wheel' || e.type === 'touchmove' || _this.eventType === 'wheel' || _this.eventType === 'touchmove') {
                clearTimeout(timeOutObj);
                timeOutObj = setTimeout(function () {
                    left = e.type === 'touchmove' ? mCont.scrollLeft : left;
                    _this.update(mHdr, mCont, mCont.scrollTop * _this.parent.verticalScrollScale, left, e);
                }, 300);
            }
            if (_this.previousValues.left === left) {
                fCont.scrollTop = mCont.scrollTop;
                return;
            }
            _this.direction = 'horizondal';
            var horiOffset = -((left - _this.parent.scrollPosObject.horizontalSection - mCont.scrollLeft));
            var vertiOffset = mCont.querySelector('.' + cls.TABLE).style.transform.split(',')[1].trim();
            if (mCont.scrollLeft < _this.parent.scrollerBrowserLimit) {
                setStyleAttribute(mCont.querySelector('.' + cls.TABLE), {
                    transform: 'translate(' + horiOffset + 'px,' + vertiOffset
                });
                setStyleAttribute(mHdr.querySelector('.' + cls.TABLE), {
                    transform: 'translate(' + horiOffset + 'px,' + 0 + 'px)'
                });
            }
            var excessMove = _this.parent.scrollPosObject.horizontalSection > left ?
                -(_this.parent.scrollPosObject.horizontalSection - left) : ((left + mHdr.offsetWidth) -
                (_this.parent.scrollPosObject.horizontalSection + mCont.querySelector('.' + cls.TABLE).offsetWidth));
            var notLastPage = Math.ceil(_this.parent.scrollPosObject.horizontalSection / _this.parent.horizontalScrollScale) <
                _this.parent.scrollerBrowserLimit;
            if (_this.parent.scrollPosObject.horizontalSection > left ? true : (excessMove > 1 && notLastPage)) {
                if (left > mHdr.clientWidth) {
                    if (_this.parent.scrollPosObject.left < 1) {
                        _this.parent.scrollPosObject.left = mHdr.clientWidth;
                    }
                    _this.parent.scrollPosObject.left = _this.parent.scrollPosObject.left - 50;
                    excessMove = _this.parent.scrollPosObject.horizontalSection > left ?
                        (excessMove - _this.parent.scrollPosObject.left) : (excessMove + _this.parent.scrollPosObject.left);
                }
                else {
                    excessMove = -_this.parent.scrollPosObject.horizontalSection;
                }
                horiOffset = -((left - (_this.parent.scrollPosObject.horizontalSection + excessMove) - mCont.scrollLeft));
                var vWidth = (_this.parent.gridSettings.columnWidth * _this.parent.scrollPageInfo.columnCount
                    - _this.parent.internalGrid.columnModel[0].width);
                if (vWidth > _this.parent.scrollerBrowserLimit) {
                    _this.parent.horizontalScrollScale = vWidth / _this.parent.scrollerBrowserLimit;
                    vWidth = _this.parent.scrollerBrowserLimit;
                }
                if (horiOffset > vWidth && horiOffset > left) {
                    horiOffset = left;
                    excessMove = 0;
                }
                setStyleAttribute(mCont.querySelector('.' + cls.TABLE), {
                    transform: 'translate(' + horiOffset + 'px,' + vertiOffset
                });
                setStyleAttribute(mHdr.querySelector('.' + cls.TABLE), {
                    transform: 'translate(' + horiOffset + 'px,' + 0 + 'px)'
                });
                _this.parent.scrollPosObject.horizontalSection = _this.parent.scrollPosObject.horizontalSection + excessMove;
            }
            _this.previousValues.left = left;
            _this.frozenPreviousValues.left = left;
            _this.eventType = '';
            mHdr.scrollLeft = mCont.scrollLeft;
        };
    };
    VirtualScroll.prototype.onVerticalScroll = function (fCont, mCont) {
        var _this = this;
        var timeOutObj;
        return function (e) {
            var top = mCont.scrollTop * _this.parent.verticalScrollScale;
            if (e.type === 'wheel' || e.type === 'touchmove' || _this.eventType === 'wheel' || _this.eventType === 'touchmove' || e.type === 'keyup' || e.type === 'keydown') {
                clearTimeout(timeOutObj);
                timeOutObj = setTimeout(function () {
                    _this.update(null, mCont, mCont.scrollTop * _this.parent.verticalScrollScale, mCont.scrollLeft * _this.parent.horizontalScrollScale, e);
                }, 300);
            }
            if (_this.previousValues.top === top) {
                return;
            }
            _this.direction = 'vertical';
            var vertiOffset = -((top - _this.parent.scrollPosObject.verticalSection - mCont.scrollTop));
            var horiOffset = mCont.querySelector('.' + cls.TABLE).style.transform.split(',')[0].trim();
            if (mCont.scrollTop < _this.parent.scrollerBrowserLimit) {
                setStyleAttribute(fCont.querySelector('.' + cls.TABLE), {
                    transform: 'translate(' + 0 + 'px,' + vertiOffset + 'px)'
                });
                setStyleAttribute(mCont.querySelector('.' + cls.TABLE), {
                    transform: horiOffset + ',' + vertiOffset + 'px)'
                });
            }
            var excessMove = _this.parent.scrollPosObject.verticalSection > top ?
                -(_this.parent.scrollPosObject.verticalSection - top) : ((top + fCont.clientHeight) -
                (_this.parent.scrollPosObject.verticalSection + fCont.querySelector('.' + cls.TABLE).offsetHeight));
            var notLastPage = Math.ceil(_this.parent.scrollPosObject.verticalSection / _this.parent.verticalScrollScale) <
                _this.parent.scrollerBrowserLimit;
            if (_this.parent.scrollPosObject.verticalSection > top ? true : (excessMove > 1 && notLastPage)) {
                if (top > fCont.clientHeight) {
                    if (_this.parent.scrollPosObject.top < 1) {
                        _this.parent.scrollPosObject.top = fCont.clientHeight;
                    }
                    _this.parent.scrollPosObject.top = _this.parent.scrollPosObject.top - 50;
                    excessMove = _this.parent.scrollPosObject.verticalSection > top ?
                        (excessMove - _this.parent.scrollPosObject.top) : (excessMove + _this.parent.scrollPosObject.top);
                }
                else {
                    excessMove = -_this.parent.scrollPosObject.verticalSection;
                }
                var movableTable = _this.parent.element.querySelector('.' + cls.MOVABLECONTENT_DIV).querySelector('.' + cls.TABLE);
                vertiOffset = -((top - (_this.parent.scrollPosObject.verticalSection + excessMove) - mCont.scrollTop));
                var vHeight = (_this.parent.gridSettings.rowHeight * _this.parent.scrollPageInfo.rowCount + 0.1
                    - movableTable.clientHeight);
                if (vHeight > _this.parent.scrollerBrowserLimit) {
                    _this.parent.verticalScrollScale = vHeight / _this.parent.scrollerBrowserLimit;
                    vHeight = _this.parent.scrollerBrowserLimit;
                }
                if (vertiOffset > vHeight && vertiOffset > top) {
                    vertiOffset = top;
                    excessMove = 0;
                }
                setStyleAttribute(fCont.querySelector('.' + cls.TABLE), {
                    transform: 'translate(' + 0 + 'px,' + vertiOffset + 'px)'
                });
                setStyleAttribute(mCont.querySelector('.' + cls.TABLE), {
                    transform: horiOffset + ',' + vertiOffset + 'px)'
                });
                _this.parent.scrollPosObject.verticalSection = _this.parent.scrollPosObject.verticalSection + excessMove;
            }
            _this.previousValues.top = top;
            _this.frozenPreviousValues.top = top;
            _this.eventType = '';
            fCont.scrollTop = mCont.scrollTop;
            mCont.scrollTop = fCont.scrollTop;
        };
    };
    VirtualScroll.prototype.updateScrollInfo = function (element, columnCount, rowCount) {
        if (this.parent.options.enableVirtualization) {
            var virtualHeaderDiv = void 0;
            var virtualDiv = void 0;
            if (element.querySelector('.' + cls.MOVABLECONTENT_DIV) &&
                !element.querySelector('.' + cls.MOVABLECONTENT_DIV).querySelector('.' + cls.VIRTUALTRACK_DIV)) {
                virtualDiv = createElement('div', { className: cls.VIRTUALTRACK_DIV });
                element.querySelector('.' + cls.MOVABLECONTENT_DIV).appendChild(virtualDiv);
            }
            if (element.querySelector('.' + cls.MOVABLEHEADER_DIV) &&
                !element.querySelector('.' + cls.MOVABLEHEADER_DIV).querySelector('.' + cls.VIRTUALTRACK_DIV)) {
                virtualHeaderDiv = createElement('div', { className: cls.VIRTUALTRACK_DIV });
                element.querySelector('.' + cls.MOVABLEHEADER_DIV).appendChild(virtualHeaderDiv);
            }
            else {
                virtualHeaderDiv = element.querySelector('.' + cls.MOVABLEHEADER_DIV).querySelector('.' + cls.VIRTUALTRACK_DIV);
            }
            var movableTable = element.querySelector('.' + cls.MOVABLECONTENT_DIV).querySelector('.' + cls.TABLE);
            var vHeight = (this.parent.gridSettings.rowHeight * rowCount + 0.1 - movableTable.clientHeight);
            if (vHeight > this.parent.scrollerBrowserLimit) {
                this.parent.verticalScrollScale = vHeight / this.parent.scrollerBrowserLimit;
                vHeight = this.parent.scrollerBrowserLimit;
            }
            var vWidth = (this.parent.gridSettings.columnWidth * columnCount
                - this.parent.internalGrid.columnModel[0].width);
            if (vWidth > this.parent.scrollerBrowserLimit) {
                this.parent.horizontalScrollScale = vWidth / this.parent.scrollerBrowserLimit;
                vWidth = this.parent.scrollerBrowserLimit;
            }
            setStyleAttribute(virtualDiv, {
                height: (vHeight > 0.1 ? vHeight : 0.1) + 'px',
                width: (vWidth > 0.1 ? vWidth : 0.1) + 'px'
            });
            setStyleAttribute(virtualHeaderDiv, {
                height: 0, width: (vWidth > 0.1 ? vWidth : 0.1) + 'px'
            });
            var mCnt = element.querySelector('.' + cls.MOVABLECONTENT_DIV);
            var fCnt = element.querySelector('.' + cls.FROZENCONTENT_DIV);
            var mHdr = element.querySelector('.' + cls.MOVABLEHEADER_DIV);
            var verOffset = (mCnt.scrollTop > this.parent.scrollerBrowserLimit) ?
                mCnt.querySelector('.' + cls.TABLE).style.transform.split(',')[1].trim() :
                -(((mCnt.scrollTop * this.parent.verticalScrollScale) - this.parent.scrollPosObject.verticalSection - mCnt.scrollTop)) + 'px)';
            var horiOffset = (mCnt.scrollLeft > this.parent.scrollerBrowserLimit) ?
                (mCnt.querySelector('.' + cls.TABLE).style.transform.split(',')[0].trim() + ',') :
                'translate(' + -(((mCnt.scrollLeft * this.parent.horizontalScrollScale) -
                    this.parent.scrollPosObject.horizontalSection - mCnt.scrollLeft)) + 'px,';
            setStyleAttribute(fCnt.querySelector('.' + cls.TABLE), {
                transform: 'translate(' + 0 + 'px,' + verOffset
            });
            setStyleAttribute(mCnt.querySelector('.' + cls.TABLE), {
                transform: horiOffset + verOffset
            });
            setStyleAttribute(mHdr.querySelector('.' + cls.TABLE), {
                transform: horiOffset + 0 + 'px)'
            });
        }
    };
    VirtualScroll.prototype.destroy = function () {
        this.unWireEvents();
    };
    return VirtualScroll;
}());
export { VirtualScroll };
