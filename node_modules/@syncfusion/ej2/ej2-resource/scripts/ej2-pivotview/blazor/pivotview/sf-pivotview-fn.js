import { GroupingBar } from './grouping-bar';
import { Browser, closest, EventHandler, formatUnit, addClass, removeClass, setStyleAttribute, remove } from '@syncfusion/ej2-base';
import * as cls from '../common/constants';
import { CalculatedField } from '../common/calculated-field';
import { Toolbar } from './toolbar';
import { DrillThrough } from './drill-through';
import { ActionBase } from '../common/action-base';
import { KeyboardInteraction } from './keyboard';
import { Selection } from '../pivotview/selection';
import { VirtualScroll } from '../pivotview/virtual-scroll';
var SfPivotView = (function () {
    function SfPivotView(element, options, dotnetRef) {
        this.scrollPageInfo = { rowCount: 0, columnCount: 0, colFirstLvl: 0, rowFirstLvl: 0, colStartPos: 0, rowStartPos: 0 };
        this.verticalScrollScale = 1;
        this.horizontalScrollScale = 1;
        this.scrollerBrowserLimit = 8000000;
        this.scrollPosObject = { vertical: 0, horizontal: 0, verticalSection: 0, horizontalSection: 0, top: 0, left: 0, scrollDirection: { direction: '', position: 0 } };
        this.element = element;
        this.element.blazor__instance = this;
        this.dotNetRef = dotnetRef;
        this.getOptions(element, options);
        this.initModules();
    }
    SfPivotView.prototype.getOptions = function (element, options) {
        this.element = element;
        this.options = options;
        this.element.blazor__instance = this;
        this.parentElement = element;
        this.isAdaptive = Browser.isDevice;
        this.internalGrid = options.internalGrid && options.internalGrid['blazor__instance'] ?
            options.internalGrid['blazor__instance'] : { element: options.internalGrid };
        this.pivotFieldListModule = options.fieldListModule && options.fieldListModule.blazor__instance ?
            options.fieldListModule.blazor__instance : options.fieldListModule;
        this.fieldList = options.fieldList;
        this.dataSourceSettings = options.dataSourceSettings;
        this.gridSettings = options.gridSettings;
        this.editSettings = options.editSettings;
        this.displayOptions = options.displayOptions;
        this.enableValueSorting = options.enableValueSorting;
        this.currentView = this.displayOptions.view === 'Both' ? this.displayOptions.primary : this.displayOptions.view;
        this.groupingBarSettings = this.options.groupingBarsettings;
        this.pageSettings = this.options.pageSettings;
    };
    SfPivotView.prototype.initModules = function () {
        if (this.options.showGroupingBar) {
            this.groupingBarModule = new GroupingBar(this);
        }
        if (this.options.showToolbar) {
            this.toolbarModule = new Toolbar(this);
        }
        if (this.options.allowDrillThrough || this.editSettings.allowEditing) {
            this.drillThroughModule = new DrillThrough(this);
        }
        if (this.options.allowCalculatedField) {
            this.calculatedFieldModule = new CalculatedField(this);
        }
        if (this.options.enableVirtualization) {
            this.virtualScrollModule = new VirtualScroll(this);
        }
        if (this.gridSettings.allowSelection) {
            this.selectionModule = new Selection(this);
        }
        this.keyboardModule = new KeyboardInteraction(this);
        this.commonActionModule = new ActionBase(this);
        this.contentReady();
        this.unWireEvents();
        this.wireEvents();
    };
    SfPivotView.prototype.updateModuleProperties = function () {
        if (this.options.showGroupingBar) {
            if (this.groupingBarModule) {
                this.groupingBarModule.parent = this.pivotButtonModule.parent = this;
            }
            else {
                this.groupingBarModule = new GroupingBar(this);
            }
        }
        if (this.options.showToolbar) {
            if (this.toolbarModule) {
                this.toolbarModule.parent = this;
            }
            else {
                this.toolbarModule = new Toolbar(this);
            }
        }
        if (this.options.allowDrillThrough || this.editSettings.allowEditing) {
            if (this.drillThroughModule) {
                this.drillThroughModule.parent = this;
            }
            else {
                this.drillThroughModule = new DrillThrough(this);
            }
        }
        if (this.options.allowCalculatedField) {
            if (this.calculatedFieldModule) {
                this.calculatedFieldModule.parent = this;
            }
            else {
                this.calculatedFieldModule = new CalculatedField(this);
            }
        }
        if (this.gridSettings.allowSelection) {
            if (this.selectionModule) {
                this.selectionModule.parent = this;
            }
            else {
                this.selectionModule = new Selection(this);
            }
        }
        if (this.options.enableVirtualization) {
            if (this.virtualScrollModule) {
                this.virtualScrollModule.parent = this;
            }
            else {
                this.virtualScrollModule = new VirtualScroll(this);
            }
        }
        this.keyboardModule.parent = this.commonActionModule.parent = this.commonActionModule.keyboardModule.parent = this;
    };
    SfPivotView.prototype.getChartHeight = function (height) {
        if (this.element.querySelector('.' + cls.PIVOT_CHART) && this.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS)) {
            this.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS).style.width = this.element.querySelector('.' + cls.PIVOT_CHART).style.width;
            height = this.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS).clientHeight;
        }
        var calculatedHeight;
        if (this.options.showToolbar && this.options.showGroupingBar) {
            calculatedHeight = (height - (this.element.querySelector('.e-pivot-toolbar') ? this.element.querySelector('.e-pivot-toolbar').clientHeight : 42) - (this.element.querySelector('.e-chart-grouping-bar') ? this.element.querySelector('.e-chart-grouping-bar').clientHeight : 76)).toString();
        }
        else if (this.options.showToolbar) {
            calculatedHeight = (height - (this.element.querySelector('.e-pivot-toolbar') ? this.element.querySelector('.e-pivot-toolbar').clientHeight : 42)).toString();
        }
        else if (this.options.showGroupingBar) {
            calculatedHeight = (height - (this.element.querySelector('.e-chart-grouping-bar') ? this.element.querySelector('.e-chart-grouping-bar').clientHeight : 76)).toString();
        }
        return calculatedHeight;
    };
    SfPivotView.prototype.contentReady = function () {
        this.updateModuleProperties();
        if (this.options.renderGrid) {
            if (this.options.showGroupingBar && this.groupingBarModule) {
                this.groupingBarModule.updatePivotButtons();
                this.groupingBarModule.refreshUI();
            }
            else {
                if (this.element && this.element.querySelectorAll('.e-axis-container').length > 0) {
                    for (var _i = 0, _a = [].slice.call(this.element.querySelectorAll('.e-axis-container')); _i < _a.length; _i++) {
                        var element = _a[_i];
                        remove(element);
                    }
                }
            }
            if ((this.options.allowDrillThrough || this.editSettings.allowEditing) && this.drillThroughModule) {
                this.drillThroughModule.addInternalEvents();
            }
            if (this.options.enableVirtualization && this.virtualScrollModule) {
                this.virtualScrollModule.addInternalEvents();
            }
            if (this.gridSettings.allowSelection && this.selectionModule) {
                this.selectionModule.addInternalEvents();
            }
        }
    };
    SfPivotView.prototype.getSelectedCellDom = function (domElement) {
        if (domElement) {
            return JSON.stringify(window.sfBlazor.getDomObject('currentCell', domElement));
        }
        else {
            return null;
        }
    };
    SfPivotView.prototype.selectedCell = function (colIndex, rowIndex, isHeader) {
        if (isHeader) {
            return this.getSelectedCellDom(this.element.querySelector('.' + (colIndex === 0 ? cls.FROZENHEADER_DIV : cls.MOVABLEHEADER_DIV) + ' th[index=' + '\"' + rowIndex + '\"' + '][aria-colindex=' + '\"' + colIndex + '\"' + ']'));
        }
        else {
            return this.getSelectedCellDom(this.element.querySelector('.' + (colIndex === 0 ? cls.FROZENCONTENT_DIV : cls.MOVABLECONTENT_DIV) + ' td[index=' + '\"' + rowIndex + '\"' + '][aria-colindex=' + '\"' + colIndex + '\"' + ']'));
        }
    };
    SfPivotView.prototype.hyperlinkCellclick = function (hyperargs, xpath) {
        if (hyperargs != null) {
            hyperargs.currentCell = window.sfBlazor.getElementByXpath(xpath);
            var url = hyperargs.currentCell.getAttribute('data-url') ? hyperargs.currentCell.getAttribute('data-url') : hyperargs.currentCell.querySelector('a').getAttribute('data-url');
            window.open(url);
        }
    };
    SfPivotView.prototype.createSheet = function (format, id, index) {
        var sheet = this.createStyleSheet();
        sheet.insertRule('.format' + id + index + '{' + format + '}', 0);
    };
    SfPivotView.prototype.getScrollInfo = function (element, scrollPageInfo) {
        this.scrollPageInfo.colFirstLvl = scrollPageInfo.colFirstLvl;
        this.scrollPageInfo.rowFirstLvl = scrollPageInfo.rowFirstLvl;
        this.scrollPageInfo.columnCount = scrollPageInfo.columnCount;
        this.scrollPageInfo.rowCount = scrollPageInfo.rowCount;
        this.scrollPageInfo.colStartPos = scrollPageInfo.colStartPos;
        this.scrollPageInfo.rowStartPos = scrollPageInfo.rowStartPos;
    };
    SfPivotView.prototype.exportDocument = function (element, filename, bytesBase64) {
        if (navigator.msSaveBlob) {
            var data = window.atob(bytesBase64);
            var bytes = new Uint8Array(data.length);
            for (var i = 0; i < data.length; i++) {
                bytes[i] = data.charCodeAt(i);
            }
            var blob = new Blob([bytes.buffer], {
                type: "application/octet-stream",
            });
            navigator.msSaveBlob(blob, filename);
        }
        else {
            var link = document.createElement("a");
            link.download = filename;
            link.href = "data:application/octet-stream;base64," + bytesBase64;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };
    SfPivotView.prototype.createStyleSheet = function () {
        var style = document.createElement('style');
        style.appendChild(document.createTextNode(''));
        document.head.appendChild(style);
        return style.sheet;
    };
    SfPivotView.prototype.getSelectedCells = function () {
        var selectedElements = [].slice.call(this.element.querySelectorAll('.' + cls.CELL_SELECTED_BGCOLOR + ',.' + cls.SELECTED_BGCOLOR));
        var domCollection = [];
        for (var _i = 0, selectedElements_1 = selectedElements; _i < selectedElements_1.length; _i++) {
            var element = selectedElements_1[_i];
            domCollection.push(window.sfBlazor.getDomObject('currentCell', element));
        }
        return JSON.stringify(domCollection);
    };
    SfPivotView.prototype.onContextMenuOpen = function () {
        if (this.options.allowGrouping && this.lastCellClicked) {
            var currentCell = closest(this.lastCellClicked, 'td.' + cls.ROWSHEADER + ',th.' + cls.COLUMNSHEADER);
            this.lastCellClicked = undefined;
            if (currentCell && !currentCell.classList.contains(cls.VALUESHEADER)) {
                return JSON.stringify(window.sfBlazor.getDomObject('currentCell', currentCell));
            }
            return null;
        }
        return null;
    };
    SfPivotView.prototype.mouseRclickHandler = function (e) {
        this.lastCellClicked = e.target;
    };
    SfPivotView.prototype.mouseClickHandler = function (e) {
        if (this.element.querySelectorAll('.' + cls.BUTTON_FOCUSED).length > 0) {
            removeClass(this.element.querySelectorAll('.' + cls.BUTTON_FOCUSED), cls.BUTTON_FOCUSED);
        }
        if (this.element.querySelector('.' + cls.GRID_TOOLBAR) &&
            this.element.querySelector('.' + cls.GRID_TOOLBAR).querySelectorAll('.' + cls.MENU_ITEM_CLASS + '.' + cls.FOCUSED_CLASS).length > 0) {
            removeClass(this.element.querySelector('.' + cls.GRID_TOOLBAR).querySelectorAll('.' + cls.MENU_ITEM_CLASS + '.' + cls.FOCUSED_CLASS), cls.FOCUSED_CLASS);
        }
        var target = e.target;
        if (this.enableValueSorting && this.options.dataType === 'pivot' && (target.classList.contains(cls.SORT_FILTER_DIV) || target.classList.contains(cls.STACKED_HEADER_TEXT) ||
            target.classList.contains(cls.STACKED_HEADER_CELL_DIV) || target.classList.contains(cls.HEADER_TEXT) || target.classList.contains(cls.STACKED_HEADER_CELL_DIV) ||
            target.classList.contains(cls.HEADER_CELL_DIV) || target.classList.contains(cls.HEADERCELL) || target.classList.contains(cls.CELLVALUE) ||
            target.classList.contains(cls.COLUMNSHEADER) || target.classList.contains(cls.ROWSHEADER))) {
            var element = closest(target, 'td.' + cls.ROWSHEADER + ',th.' + cls.COLUMNSHEADER);
            if (element && ((closest(element, '.' + cls.MOVABLEHEADER_DIV) && this.dataSourceSettings.valueAxis === 'column') ||
                (closest(element, 'tr.' + cls.ROW) && this.dataSourceSettings.valueAxis === 'row') &&
                    (element.classList.contains(cls.ROWSHEADER) || element.classList.contains(cls.SUBTOTAL)))) {
                if (this.enableValueSorting) {
                    var colIndex = Number(element.getAttribute('aria-colindex'));
                    var rowIndex = Number(element.getAttribute('index'));
                    if (this.dataSourceSettings.valueAxis === 'column' && (this.dataSourceSettings.values.length > 1 || this.dataSourceSettings.alwaysShowValueHeader)) {
                        colIndex = (Number(element.getAttribute('aria-colindex')) + Number(element.getAttribute('aria-colspan')) - 1);
                    }
                    this.dotNetRef.invokeMethodAsync('MouseClickHandler', rowIndex, colIndex);
                }
                e.preventDefault();
            }
        }
        else if (!this.gridSettings.allowSelection) {
            var element = closest(target, 'td.' + cls.ROWSHEADER + ',th.' + cls.COLUMNSHEADER + ',td.' + cls.ROW_CELL_CLASS);
            if (element !== null) {
                var colIndex = Number(element.getAttribute('aria-colindex'));
                var rowIndex = Number(element.getAttribute('index'));
                if (!(target.classList.contains('e-expand') || target.classList.contains('e-collapse')))
                    this.dotNetRef.invokeMethodAsync('CellClickedHandler', rowIndex, colIndex, e, JSON.stringify(window.sfBlazor.getDomObject('cellElement', element)));
            }
        }
    };
    SfPivotView.prototype.getHeightAsNumber = function () {
        var height;
        if (isNaN(this.options.height)) {
            if (this.options.height.toString().indexOf('%') > -1) {
                height = (parseFloat(this.options.height.toString()) / 100) * this.element.offsetHeight;
            }
            else if (this.options.height.toString().indexOf('px') > -1) {
                height = Number(this.options.height.toString().split('px')[0]);
            }
            else if (this.options.height === 'auto') {
                height = this.element.offsetHeight;
            }
        }
        else {
            height = Number(this.options.height);
        }
        if (height < 300) {
            height = 300;
        }
        return height;
    };
    SfPivotView.prototype.calculateGridHeight = function (elementCreated, rowCount, columnCount) {
        var gridHeight = this.options.height;
        var parHeight = this.getHeightAsNumber();
        var tableHeight = (rowCount * this.gridSettings.rowHeight);
        if (isNaN(parHeight)) {
            parHeight = parHeight > 300 ? parHeight : 300;
        }
        if (this.gridSettings.height === 'auto' && parHeight && this.element.querySelector('.' + cls.GRID_HEADER)) {
            var colHeaderHeight = (columnCount * this.gridSettings.rowHeight) + (this.element.querySelector('.' + cls.GRID_HEADER).offsetHeight - this.element.querySelector('.' + cls.HEADERCONTENT).offsetHeight);
            var gBarHeight = colHeaderHeight + (this.element.querySelector('.' + cls.GROUPING_BAR_CLASS) ?
                this.element.querySelector('.' + cls.GROUPING_BAR_CLASS).offsetHeight : 0);
            var toolBarHeight = this.element.querySelector('.' + cls.GRID_TOOLBAR) ? this.element.querySelector('.' + cls.GRID_TOOLBAR).clientHeight : 0;
            gridHeight = parHeight - (gBarHeight + toolBarHeight) - 1;
            if (elementCreated) {
                var contentHeight = this.internalGrid && this.internalGrid.options && !isNaN(this.internalGrid.options.height) ?
                    Number(this.internalGrid.options.height) : this.element.querySelector('.' + cls.MOVABLECONTENT_DIV).offsetHeight;
                var tableWidth = this.element.querySelector('.' + cls.MOVABLECONTENT_DIV + ' .' + cls.TABLE).offsetWidth;
                var contentWidth = this.element.querySelector('.' + cls.MOVABLECONTENT_DIV).offsetWidth;
                var horizontalOverflow = contentWidth < tableWidth;
                var verticalOverflow = contentHeight < tableHeight;
                var commonOverflow = horizontalOverflow && ((gridHeight - tableHeight) < 18) ? true : false;
                if (gridHeight >= tableHeight && (horizontalOverflow ? gridHeight >= contentHeight : true) &&
                    !verticalOverflow && !commonOverflow) {
                    return 'auto';
                }
            }
            else {
                if (gridHeight > (rowCount * this.gridSettings.rowHeight)) {
                    return 'auto';
                }
            }
        }
        else {
            gridHeight = this.gridSettings.height;
        }
        return gridHeight < this.gridSettings.rowHeight ? this.gridSettings.rowHeight.toString() :
            tableHeight < gridHeight ? tableHeight.toString() : gridHeight.toString();
    };
    SfPivotView.prototype.updateGridUI = function (element) {
        if (this.options.showGroupingBar && this.groupingBarModule) {
            this.groupingBarModule.refreshUI();
        }
        else {
            var emptyRowHeader = element.querySelector('.' + cls.FROZENHEADER_DIV).querySelector('.' + cls.COLUMN_HEADER);
            if (emptyRowHeader && emptyRowHeader.querySelector('.' + cls.RESIZE_HANDLER)) {
                emptyRowHeader.style.height = emptyRowHeader.querySelector('.' + cls.RESIZE_HANDLER).style.height = 'auto';
                emptyRowHeader.style.height = emptyRowHeader.querySelector('.' + cls.RESIZE_HANDLER).style.height = element.querySelector('.' + cls.HEADERCONTENT).offsetHeight + 'px';
            }
        }
        if (element.querySelector('.' + cls.MOVABLEHEADER_DIV + ' .' + cls.TABLE) && element.querySelector('.' + cls.MOVABLEHEADER_DIV + ' .' + cls.TABLE).style.width === '0px') {
            element.querySelector('.' + cls.MOVABLECONTENT_DIV + ' .' + cls.TABLE).style.width = element.querySelector('.' + cls.MOVABLEHEADER_DIV + ' .' + cls.TABLE).style.width = '';
        }
        if (element.querySelector('.' + cls.MOVABLEHEADER_DIV + ' .' + cls.TABLE + ' th.e-firstcell.e-lastcell') && element.querySelector('.' + cls.MOVABLEHEADER_DIV + ' .' + cls.TABLE + ' th.e-firstcell.e-lastcell').offsetWidth <= 0) {
            var headerColGroupElements = element.querySelector('.' + cls.MOVABLEHEADER_DIV + ' .' + cls.TABLE + ' colgroup').children;
            var contentColGroupElements = element.querySelector('.' + cls.MOVABLECONTENT_DIV + ' .' + cls.TABLE + ' colgroup').children;
            var columnWidth = formatUnit(this.options.gridSettings.columnWidth);
            if (headerColGroupElements.length > 1 && headerColGroupElements[headerColGroupElements.length - 1].style.width === 'auto') {
                headerColGroupElements[headerColGroupElements.length - 1].style.width = columnWidth;
            }
            if (contentColGroupElements.length > 1 && contentColGroupElements[contentColGroupElements.length - 1].style.width === 'auto') {
                contentColGroupElements[contentColGroupElements.length - 1].style.width = columnWidth;
            }
        }
        this.element.querySelector('.' + cls.MOVABLECONTENT_DIV).style.overflow = 'auto';
        var hasVerticalScrollbar = element.querySelector('.' + cls.MOVABLECONTENT_DIV).scrollHeight > element.querySelector('.' + cls.MOVABLECONTENT_DIV).clientHeight;
        setStyleAttribute(element.querySelector('.' + cls.GRID_HEADER), this.options.enableRtl ? {
            'paddingLeft': hasVerticalScrollbar ? '16px' : ''
        } : {
            'paddingRight': hasVerticalScrollbar ? '16px' : ''
        });
        setStyleAttribute(element.querySelector('.' + cls.HEADERCONTENT), this.options.enableRtl ? {
            'borderLeftWidth': hasVerticalScrollbar ? '1px' : ''
        } : {
            'borderRightWidth': hasVerticalScrollbar ? '1px' : ''
        });
        element.querySelector('.' + cls.FROZENCONTENT_DIV).style.height = formatUnit(element.querySelector('.' + cls.MOVABLECONTENT_DIV).clientHeight);
    };
    SfPivotView.prototype.updateView = function (element, displayOption) {
        if (element) {
            this.displayOptions = JSON.parse(displayOption);
            if (this.displayOptions.view === 'Both' && this.displayOptions.primary === 'Table') {
                this.element.querySelector('.' + cls.PIVOT_CHART).style.display = 'none';
                this.element.querySelector('#' + this.element.id + '_grid').style.display = '';
                if (this.options.showGroupingBar) {
                    if (this.element.querySelector('.' + cls.PIVOT_CHART) && this.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS)) {
                        this.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS).style.display = 'none';
                        this.element.querySelector('.' + cls.GRID_GROUPING_BAR_CLASS).style.display = '';
                    }
                }
            }
            else if (this.displayOptions.view === 'Both' && this.displayOptions.primary === 'Chart') {
                this.element.querySelector('.' + cls.PIVOT_CHART).style.display = '';
                this.element.querySelector('#' + this.element.id + '_grid').style.display = 'none';
                if (this.options.showGroupingBar) {
                    if (this.element.querySelector('.' + cls.GRID_GROUPING_BAR_CLASS)) {
                        this.element.querySelector('.' + cls.GRID_GROUPING_BAR_CLASS).style.display = 'none';
                        this.element.querySelector('.' + cls.CHART_GROUPING_BAR_CLASS).style.display = '';
                    }
                }
            }
        }
    };
    SfPivotView.prototype.updateGridSettings = function (element, gridSetting) {
        if (element && gridSetting !== null) {
            this.gridSettings = JSON.parse(gridSetting);
        }
    };
    SfPivotView.prototype.getClientWidth = function (element, id) {
        if (element && id !== null) {
            return document.getElementById(id).clientWidth;
        }
        return null;
    };
    SfPivotView.prototype.getTableCellNode = function (element, top, left) {
        if (element) {
            var cellElement = document.elementFromPoint(left, top);
            if (cellElement) {
                var colIndex = Number(cellElement.getAttribute('aria-colindex'));
                var rowIndex = Number(cellElement.getAttribute('index'));
                var cellInfo = {};
                if (colIndex && rowIndex) {
                    cellInfo['index'] = rowIndex;
                    cellInfo['aria-colindex'] = colIndex;
                    return JSON.stringify(cellInfo);
                }
            }
        }
        return null;
    };
    SfPivotView.prototype.updateColorPickerUI = function (dialogElemnt) {
        if (dialogElemnt) {
            var fontColorPicker = [].slice.call(dialogElemnt.querySelectorAll('.' + cls.COLOR_PICKER_CONTAINER + '.' + cls.FORMAT_FONT_COLOR_PICKER_CONTAINER));
            var backColorPicker = [].slice.call(dialogElemnt.querySelectorAll('.' + cls.COLOR_PICKER_CONTAINER + '.' + cls.FORMAT_BACK_COLOR_PICKER_CONTAINER));
            for (var _i = 0, fontColorPicker_1 = fontColorPicker; _i < fontColorPicker_1.length; _i++) {
                var element = fontColorPicker_1[_i];
                addClass([element], [cls.FORMAT_COLOR_PICKER, cls.FORMAT_FONT_COLOR_PICKER]);
                addClass([element.querySelector('.' + cls.COLOR_PICKER)], cls.FORMAT_FONT_COLOR);
                addClass([element.querySelector('.' + cls.SELECTED_COLOR)], cls.ICON);
            }
            for (var _a = 0, backColorPicker_1 = backColorPicker; _a < backColorPicker_1.length; _a++) {
                var element = backColorPicker_1[_a];
                addClass([element], cls.FORMAT_COLOR_PICKER);
                addClass([element.querySelector('.' + cls.COLOR_PICKER)], cls.FORMAT_BACK_COLOR);
                addClass([element.querySelector('.' + cls.SELECTED_COLOR)], cls.ICON);
            }
        }
    };
    SfPivotView.prototype.onWindowResize = function () {
        var _this = this;
        clearTimeout(this.timeOutObj);
        this.timeOutObj = setTimeout(function () {
            _this.commonActionModule.getElementInfo();
            _this.dotNetRef.invokeMethodAsync('LayoutRefresh');
        }, 500);
    };
    SfPivotView.prototype.wireEvents = function () {
        EventHandler.add(document, this.isAdaptive ? 'touchend' : 'click', this.mouseClickHandler, this);
        EventHandler.add(this.element, this.isAdaptive ? 'touchend' : 'contextmenu', this.mouseRclickHandler, this);
        this.onWindowResize = this.onWindowResize.bind(this);
        window.addEventListener('resize', this.onWindowResize, true);
    };
    SfPivotView.prototype.unWireEvents = function () {
        EventHandler.remove(document, this.isAdaptive ? 'touchend' : 'click', this.mouseClickHandler);
        EventHandler.remove(this.element, this.isAdaptive ? 'touchend' : 'contextmenu', this.mouseRclickHandler);
        window.removeEventListener('resize', this.onWindowResize, true);
    };
    SfPivotView.prototype.destroy = function () {
        this.unWireEvents();
        this.keyboardModule.destroy();
        this.commonActionModule.destroy();
        if (this.options.showGroupingBar) {
            this.groupingBarModule.destroy();
            this.pivotButtonModule.destroy();
        }
        if (this.options.showFieldList && this.pivotFieldListModule) {
            this.pivotFieldListModule.destroy();
        }
        if (this.options.allowDrillThrough || this.editSettings.allowEditing) {
            this.drillThroughModule.destroy();
        }
        if (this.options.enableVirtualization || this.virtualScrollModule) {
            this.virtualScrollModule.destroy();
        }
        if (this.gridSettings.allowSelection || this.selectionModule) {
            this.selectionModule.destroy();
        }
    };
    return SfPivotView;
}());
export { SfPivotView };
